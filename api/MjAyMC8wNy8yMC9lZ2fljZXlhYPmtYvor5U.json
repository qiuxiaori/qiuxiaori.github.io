{"title":"egg单元测试","date":"2020-07-20T07:05:18.548Z","date_formatted":{"ll":"Jul 20, 2020","L":"07/20/2020","MM-DD":"07-20"},"link":"2020/07/20/egg单元测试","tags":["egg"],"categories":["编程技术"],"updated":"2020-07-20T07:05:18.548Z","content":"<blockquote>\n<p>为什么要单元测试<br>\n它能带给我们很多保障：代码质量持续有保障，重构正确性保障，增强自信心，自动化运行</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"一.egg单元测试框架及约定\">一.egg单元测试框架及约定<a title=\"#一.egg单元测试框架及约定\" href=\"#一.egg单元测试框架及约定\"></a></h3>\n<ol>\n<li>\n<p>测试框架<br>\negg使用 <a href=\"https://mochajs.org/\" target=\"_blank\">Mocha</a>，功能非常丰富，支持运行在 Node.js 和浏览器中， 对异步测试支持非常友好。</p>\n</li>\n<li>\n<p>断言库<br>\negg使用原始的 assert 作为默认的断言库。它的优点是：没有 API 就是最好的 API，不需要任何记忆，只需 assert 即可以及强大的错误信息反馈。</p>\n</li>\n<li>\n<p>目录结构<br>\negg约定 test 目录为存放所有测试脚本的目录，测试所使用到的 fixtures 和相关辅助脚本都应该放在此目录下。测试脚本文件统一按 ${filename}.test.js 命名，必须以 .test.js 作为文件后缀。```<br>\ntest<br>\n├── controller<br>\n│   └── home.test.js<br>\n├── hello.test.js<br>\n└── service<br>\n└── user.test.js</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">4. 测试方式</span><br><span class=\"line\">只需要在 package.json 上配置好 scripts.test 即可。</span><br></pre></td></tr></table></figure>\n<p>{<br>\n“scripts”: {<br>\n“test”: “egg-bin test”<br>\n}<br>\n}</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 然后就可以按标准的 npm test 来运行测试了。</span><br><span class=\"line\">&#96;npm test&#96;</span><br><span class=\"line\"></span><br><span class=\"line\">### 二.对象获取</span><br><span class=\"line\">1. mock</span><br><span class=\"line\">egg单独为框架抽取了一个测试 mock 辅助模块：egg-mock， 有了它就可以非常快速地编写一个 app 的单元测试，并且还能快速创建一个 ctx 来测试它的属性、方法和 Service 等。</span><br><span class=\"line\"></span><br><span class=\"line\">2. app</span><br><span class=\"line\"></span><br><span class=\"line\">* 测试运行之前首先要创建应用的一个 app 实例， 通过它来访问需要被测试的 Controller、Middleware、Service 等应用层代码。通过 egg-mock，结合 Mocha 的 before 钩子就可以便捷地创建出一个 app 实例。&#96;&#96;&#96;js</span><br><span class=\"line\">&#x2F;&#x2F; test&#x2F;controller&#x2F;home.test.js</span><br><span class=\"line\">const assert &#x3D; require(&#39;assert&#39;);</span><br><span class=\"line\">const mock &#x3D; require(&#39;egg-mock&#39;);</span><br><span class=\"line\">describe(&#39;test&#x2F;controller&#x2F;home.test.js&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  let app;</span><br><span class=\"line\">  before(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 创建当前应用的 app 实例</span><br><span class=\"line\">    app &#x3D; mock.app();</span><br><span class=\"line\">    &#x2F;&#x2F; 等待 app 启动成功，才能执行测试用例</span><br><span class=\"line\">    return app.ready();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>每一个测试文件都需要这样创建一个 app 实例非常冗余，因此 egg-mock 提供了一个 bootstrap 文件，可以直接从它上面拿到我们所常用的实例：```js<br>\n// test/controller/home.test.js<br>\nconst { app, mock, assert } = require(‘egg-mock/bootstrap’);<br>\ndescribe(‘test/controller/home.test.js’, () =&gt; {<br>\n// test cases<br>\n});</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">3. ctx</span><br><span class=\"line\">我们除了 app，还需要一种方式便捷地拿到 ctx，方便我们进行 Extend、Service、Helper 等测试。 我们已经通过上面的方式拿到了一个 app，结合 egg-mock 提供的 app.mockContext(options) 方法来快速创建一个 ctx 实例。&#96;&#96;&#96;js</span><br><span class=\"line\">it(&#39;should get a ctx&#39;, () &#x3D;&gt; &#123;</span><br><span class=\"line\">  const ctx &#x3D; app.mockContext();</span><br><span class=\"line\">  assert(ctx.method &#x3D;&#x3D;&#x3D; &#39;GET&#39;);</span><br><span class=\"line\">  assert(ctx.url &#x3D;&#x3D;&#x3D; &#39;&#x2F;&#39;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"三.controller测试\">三.Controller测试<a title=\"#三.controller测试\" href=\"#三.controller测试\"></a></h3>\n<ol>\n<li>app.mockContext()```js<br>\n// 创建一个默认的ctx对象<br>\nctx = app.mockContext();<br>\n// <a href=\"http://xn--ctx-ci6fj43a.name\" target=\"_blank\" rel=\"noopener\">模拟ctx.name</a><br>\nctx = app.mockContext({ name: ‘ceshi’ });<br>\n// 设置ctx的传输头<br>\nctx = app.mockContext({ headers: {  ‘Content-Type’ : ‘multipart/form-data’ } });</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">2. app.mockCsrf()</span><br><span class=\"line\">模拟取 CSRF token 的过程。 这样在使用 SuperTest 请求 app 就会自动通过 CSRF 校验。</span><br><span class=\"line\"></span><br><span class=\"line\">3. app.mockSession&#96;&#96;&#96;js</span><br><span class=\"line\">&#x2F;&#x2F; 模拟session</span><br><span class=\"line\">app.mockSession(&#123;</span><br><span class=\"line\">        foo: &#39;bar&#39;,</span><br><span class=\"line\">        uid: 123,</span><br><span class=\"line\">      &#125;);</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>ctx.httpRequest()</li>\n</ol>\n<ul>\n<li>该方法能发起一个真实的请求，以检测Controller参数的完整性。app.httpRequest() 是 <a href=\"https://github.com/eggjs/egg-mock\" target=\"_blank\">egg-mock</a> 封装的 <a href=\"https://github.com/visionmedia/supertest\" target=\"_blank\">SuperTest</a>。```js<br>\nawait app.httpRequest()<br>\n.get(‘/’)<br>\n.expect(200) // 期望返回 status 200</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* 常用级联函数，按调用顺序介绍&#96;&#96;&#96;js</span><br><span class=\"line\">&#x2F;&#x2F; 发送get请求，post，put，等请求同理</span><br><span class=\"line\">get(&#39;&#x2F;&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; 传递HTTP用户名和密码</span><br><span class=\"line\">auth(&#39;username&#39;, &#39;password&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; 设置传输头,Cookie或主体</span><br><span class=\"line\">set(&#39;Accept&#39;, &#39;application&#x2F;json&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; 类型，表单</span><br><span class=\"line\">type(&#39;form&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; 发送的参数，多个参数用逗号隔开</span><br><span class=\"line\">send(&#123; key: &#39;value&#39; &#125;)</span><br><span class=\"line\">## 发送文件</span><br><span class=\"line\">&#x2F;&#x2F; 使用attach发送文件时必须搭配field方法发送参数，不能用send，多个参数时级联多个field</span><br><span class=\"line\">field(&#39;name&#39;, &#39;my awesome avatar&#39;)</span><br><span class=\"line\">&#x2F;&#x2F;发送的文件</span><br><span class=\"line\">attach(&#39;avatar&#39;, &#39;test&#x2F;fixtures&#x2F;avatar.jpg&#39;)</span><br><span class=\"line\">&#x2F;&#x2F; 期望值</span><br><span class=\"line\">expect(200) &#x2F;&#x2F; 期望返回 status 200</span><br><span class=\"line\">expect(&#39;hello world&#39;); &#x2F;&#x2F; 期望 body 是 hello world</span><br><span class=\"line\">expect(status[, fn])</span><br><span class=\"line\">expect(body[, fn])</span><br><span class=\"line\">expect(field, value[, fn])</span><br></pre></td></tr></table></figure>\n","prev":{"title":"node.js游戏服务器框架pomelo初试","link":"2020/07/20/node.js游戏服务器框架pomelo初试"},"next":{"title":"egg框架中实现上传文件","link":"2020/07/20/egg框架中实现上传文件"},"plink":"http://qiuxiaori.github.com/2020/07/20/egg单元测试/","toc":[{"id":"一.egg单元测试框架及约定","title":"一.egg单元测试框架及约定","index":"1"},{"id":"三.controller测试","title":"三.Controller测试","index":"2"}],"copyright":{"author":"Qiu Xiaori","license":"自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0)","link":"<a href=\"http://qiuxiaori.github.com/2020/07/20/egg单元测试/\" title=\"egg单元测试\">http://qiuxiaori.github.com/2020/07/20/egg单元测试/</a>"}}