{"title":"Rxjs学习","date":"2020-07-23T06:19:09.759Z","date_formatted":{"ll":"Jul 23, 2020","L":"07/23/2020","MM-DD":"07-23"},"link":"2020/07/23/rxjs学习","tags":["rxjs"],"categories":["编程技术"],"updated":"2020-07-23T08:36:43.788Z","content":"<p>RxJS 是一个库，它通过使用 observable 序列来编写异步和基于事件的程序。它提供了一个核心类型 Observable，附属类型 (Observer、 Schedulers、 Subjects) 和受 [Array#extras] 启发的操作符 (map、filter、reduce、every, 等等)，这些数组操作符可以把异步事件作为集合来处理。</p>\n<blockquote>\n<p>可以把 RxJS 当做是用来处理事件的 Lodash</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>ReactiveX 结合了 观察者模式、迭代器模式 和 使用集合的函数式编程，以满足以一种理想方式来管理事件序列所需要的一切。</p>\n<h3 id=\"基本概念\">基本概念<a title=\"#基本概念\" href=\"#基本概念\"></a></h3>\n<ul>\n<li>Observable (可观察对象): 表示一个概念，这个概念是一个可调用的未来值或事件的集合。</li>\n<li>Observer (观察者): 一个回调函数的集合，它知道如何去监听由 Observable 提供的值。</li>\n<li>Sbscription (订阅): 表示 Observable 的执行，主要用于取消 Observable 的执行。</li>\n<li>Operators (操作符): 采用函数式编程风格的纯函数 (pure function)，使用像 map、filter、concat、flatMap 等这样的操作符来处理集合。</li>\n<li>Subject (主体): 相当于 EventEmitter，并且是将值或事件多路推送给多个 Observer 的唯一方式。</li>\n<li>Schedulers (调度器): 用来控制并发并且是中央集权的调度员，允许我们在发生计算时进行协调，例如 setTimeout 或 requestAnimationFrame 或其他。</li>\n</ul>\n","prev":{"title":"简历desi","link":"2020/07/23/简历desi"},"next":{"title":"mac使用指南","link":"2020/07/22/mac小技巧"},"plink":"http://qiuxiaori.github.com/2020/07/23/rxjs学习/","toc":[{"id":"基本概念","title":"基本概念","index":"1"}],"copyright":{"author":"Qiu Xiaori","license":"自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0)","link":"<a href=\"http://qiuxiaori.github.com/2020/07/23/rxjs学习/\" title=\"Rxjs学习\">http://qiuxiaori.github.com/2020/07/23/rxjs学习/</a>"}}