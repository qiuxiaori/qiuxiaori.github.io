{"title":"Docker实战","date":"2020-07-20T07:05:18.546Z","date_formatted":{"ll":"Jul 20, 2020","L":"07/20/2020","MM-DD":"07-20"},"link":"2020/07/20/Docker实战","tags":["docker"],"categories":["编程技术"],"updated":"2020-07-20T07:05:18.546Z","content":"<blockquote>\n<p>写在前面</p>\n</blockquote>\n<ul>\n<li>操作系统：Windows10</li>\n<li>Docker版本：Docker version 19.03.5, build 633a0ea</li>\n</ul>\n<h3 id=\"一.-快速开始\">一. 快速开始<a title=\"#一.-快速开始\" href=\"#一.-快速开始\"></a></h3>\n<p><strong>1. 安装：</strong> <a href=\"https://hub.docker.com/\" target=\"_blank\">Docker官网</a>，下载并安装</p>\n<p><strong>2. 启动：</strong> 安装后双击图标启动。</p>\n<p><strong>3. 设置：</strong> 右击docker图标，Settings -&gt; Resources -&gt; ADVANCED 调整Memory到4G，Swap到2G(根据电脑配置及实际需求调整)</p>\n<h3 id=\"二.-镜像\">二. 镜像<a title=\"#二.-镜像\" href=\"#二.-镜像\"></a></h3>\n<p>当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载。</p>\n<p><strong>1. 管理和使用本地Docker主机镜像</strong></p>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">含义</th>\n<th style=\"text-align:left\">示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">[images/image ls]</td>\n<td style=\"text-align:left\">列出本机的镜像列表</td>\n<td style=\"text-align:left\"><code>docker images</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">[pull]</td>\n<td style=\"text-align:left\">拉取docker镜像</td>\n<td style=\"text-align:left\"><code>docker pull node</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">[search]</td>\n<td style=\"text-align:left\">搜索docker镜像源的镜像</td>\n<td style=\"text-align:left\"><code>docker search node</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">[rmi]</td>\n<td style=\"text-align:left\">删除docker镜像</td>\n<td style=\"text-align:left\"><code>docker rmi node</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">[tag]</td>\n<td style=\"text-align:left\">为镜像添加一个新的标签</td>\n<td style=\"text-align:left\"><code>docker tag 860c279d2fec node</code></td>\n</tr>\n</tbody>\n</table></div></div><p><strong>2. 构建docker镜像</strong></p>\n<p>我们使用命令 docker build ， 从零开始来创建一个新的镜像。为此，我们需要创建一个 Dockerfile 文件，其中包含一组指令来告诉 Docker 如何构建我们的镜像。</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 每一个指令都会在镜像上创建一个新的层，每一个指令的前缀都必须是大写的。</span><br><span class=\"line\"><span class=\"keyword\">FROM</span>    centos:<span class=\"number\">6.7</span> // 指定使用哪个镜像源</span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span>      Fisher <span class=\"string\">\"fisher@sudops.com\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\">     /bin/<span class=\"built_in\">echo</span> <span class=\"string\">'root:123456'</span> |chpasswd // 告诉docker 在镜像内执行命令，安装了什么</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\">     useradd runoob</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\">     /bin/<span class=\"built_in\">echo</span> <span class=\"string\">'runoob:123456'</span> |chpasswd</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\">     /bin/<span class=\"built_in\">echo</span> -e <span class=\"string\">\"LANG=\\\"en_US.UTF-8\\\"\"</span> &gt;/etc/default/<span class=\"built_in\">local</span></span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span>  <span class=\"number\">22</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span>  <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\">     /usr/sbin/sshd -D // 要执行的命令</span></span><br></pre></td></tr></table></figure>\n<p>然后，我们使用 Dockerfile 文件，通过 docker build 命令来构建一个镜像。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t runoob&#x2F;centos:6.7 .</span><br><span class=\"line\">&#x2F;&#x2F; 参数说明</span><br><span class=\"line\">&#x2F;&#x2F; -t ：指定要创建的目标镜像名</span><br><span class=\"line\">&#x2F;&#x2F; . ：Dockerfile 文件所在目录，可以指定Dockerfile 的绝对路径</span><br><span class=\"line\">&#x2F;&#x2F; --no-cache: 不使用缓存</span><br></pre></td></tr></table></figure>\n<h3 id=\"三.-容器\">三. 容器<a title=\"#三.-容器\" href=\"#三.-容器\"></a></h3>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">含义</th>\n<th style=\"text-align:left\">示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\">[run]</td>\n<td style=\"text-align:left\">启动容器</td>\n<td style=\"text-align:left\"><code> docker run -it ubuntu /bin/bash</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\">[start]</td>\n<td style=\"text-align:left\">启动已停止运行的容器</td>\n<td style=\"text-align:left\"><code>docker start node</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\">[ps]</td>\n<td style=\"text-align:left\">查看已启动的容器 [-a] 所有容器</td>\n<td style=\"text-align:left\"><code>docker start node</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\">[stop]</td>\n<td style=\"text-align:left\">停止已启动的容器</td>\n<td style=\"text-align:left\"><code>docker stop id|name</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">[restart]</td>\n<td style=\"text-align:left\">重启已启动的容器</td>\n<td style=\"text-align:left\"><code>docker restart id|name</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">[attach]</td>\n<td style=\"text-align:left\">进入容器终端,退出时容器会停止</td>\n<td style=\"text-align:left\"><code>docker exec -it id|name /bin/bash</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\">[exec][-it]</td>\n<td style=\"text-align:left\">进入容器终端,退出时不会停止</td>\n<td style=\"text-align:left\"><code>docker exec -it id|name /bin/bash</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\">[rm][-f]</td>\n<td style=\"text-align:left\">删除容器</td>\n<td style=\"text-align:left\"><code>docker rm -f id|name</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9</td>\n<td style=\"text-align:left\">[logs][-f]</td>\n<td style=\"text-align:left\">查看容器日志 [–tail][n] 查看最后n条日志</td>\n<td style=\"text-align:left\"><code>docker rm -f id|name</code></td>\n</tr>\n</tbody>\n</table></div></div><p>参数<br>\n[-i]: 交互式操作，[-t]: 终端 [-d]: 后台运行 [-p]: 端口映射 --name 重命名</p>\n<h3 id=\"四.-docker仓库管理\">四. Docker仓库管理<a title=\"#四.-docker仓库管理\" href=\"#四.-docker仓库管理\"></a></h3>\n<blockquote>\n<p>仓库（Repository）是集中存放镜像的地方。目前 Docker 官方维护了一个公共仓库 <a href=\"https://hub.docker.com/\" target=\"_blank\">Docker Hub</a>。大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。</p>\n</blockquote>\n<p><strong>1. 登录</strong></p>\n<p>登录需要输入用户名和密码，登录成功后，我们就可以从 docker hub 上拉取自己账号下的全部镜像。</p>\n<p><code>docker login</code></p>\n<p><strong>2. 退出</strong></p>\n<p>退出 docker hub 可以使用命令：<code>docker logout</code></p>\n<p><strong>3. 推送镜像</strong></p>\n<p>用户登录后，可以通过 docker push 命令将自己的镜像推送到 Docker Hub。<br>\n以下命令中的 username 替换为自己的 Docker 账号用户名。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker tag ubuntu:18.04 username&#x2F;ubuntu:18.04  &#x2F;&#x2F; 将本地镜像加上自己的docker账号前缀</span><br><span class=\"line\">$ docker image ls</span><br><span class=\"line\"></span><br><span class=\"line\">REPOSITORY      TAG        IMAGE ID            CREATED           ...  </span><br><span class=\"line\">ubuntu          18.04      275d79972a86        6 days ago        ...  </span><br><span class=\"line\">username&#x2F;ubuntu 18.04      275d79972a86        6 days ago        ...    &#x2F;&#x2F; 新镜像</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker push username&#x2F;ubuntu:18.04 &#x2F;&#x2F; 推送镜像到远程仓库</span><br><span class=\"line\">$ docker search username&#x2F;ubuntu &#x2F;&#x2F; 可以搜索到账号下的ubuntu镜像</span><br><span class=\"line\"></span><br><span class=\"line\">NAME             DESCRIPTION       STARS         OFFICIAL    AUTOMATED</span><br><span class=\"line\">username&#x2F;ubuntu</span><br></pre></td></tr></table></figure>\n<h3 id=\"五.-实战：使用docker部署一个node项目\">五. 实战：使用docker部署一个node项目<a title=\"#五.-实战：使用docker部署一个node项目\" href=\"#五.-实战：使用docker部署一个node项目\"></a></h3>\n<p>egg框架<br>\n去掉 --daemon<br>\n<strong>1. 打包镜像</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node:12</span><br><span class=\"line\"></span><br><span class=\"line\">RUN mkdir -p &#x2F;usr&#x2F;src&#x2F;node-app&#x2F;asmr-os</span><br><span class=\"line\"></span><br><span class=\"line\">WORKDIR &#x2F;usr&#x2F;src&#x2F;node-app&#x2F;asmr-os</span><br><span class=\"line\"></span><br><span class=\"line\">COPY package.json &#x2F;usr&#x2F;src&#x2F;node-app&#x2F;asmr-os&#x2F;package.json</span><br><span class=\"line\"></span><br><span class=\"line\">RUN npm install</span><br><span class=\"line\"></span><br><span class=\"line\">COPY . &#x2F;usr&#x2F;src&#x2F;node-app&#x2F;asmr-os</span><br><span class=\"line\"></span><br><span class=\"line\">EXPOSE 7001</span><br><span class=\"line\"></span><br><span class=\"line\">CMD [&quot;npm&quot;, &quot;start&quot;]</span><br></pre></td></tr></table></figure>\n<p><code>docker built -t asmr-os .</code></p>\n<p><strong>2. 运行项目</strong></p>\n<p><code>docker run -d --name asmr-os -p 7001:7001 asmr-os</code></p>\n<p><strong>3. 其他依赖</strong></p>\n<h3 id=\"六.-其他\">六. 其他<a title=\"#六.-其他\" href=\"#六.-其他\"></a></h3>\n<p><strong>1. 查看构建过程：</strong> <code>docker history [imageName]</code><br>\n<strong>2. 查看所有容器：</strong> <code>docker ps -aq</code><br>\n<strong>3. 停止所有容器：</strong> <code>docker stop $(docker ps -aq)</code><br>\n<strong>4. 删除所有容器：</strong> <code>docker rm $(docker ps -aq)</code><br>\n<strong>5. 删除所有镜像：</strong> <code>docker rmi $(docker images -q)</code></p>\n<h3 id=\"七.-docker-compose\">七. Docker-compose<a title=\"#七.-docker-compose\" href=\"#七.-docker-compose\"></a></h3>\n","prev":{"title":"Hexo博客杂项","link":"2020/07/20/Hexo博客杂项"},"next":{"title":"ESLint使用简介","link":"2020/07/20/Eslint的使用"},"plink":"http://qiuxiaori.github.com/2020/07/20/Docker实战/","toc":[{"id":"一.-快速开始","title":"一. 快速开始","index":"1"},{"id":"二.-镜像","title":"二. 镜像","index":"2"},{"id":"三.-容器","title":"三. 容器","index":"3"},{"id":"四.-docker仓库管理","title":"四. Docker仓库管理","index":"4"},{"id":"五.-实战：使用docker部署一个node项目","title":"五. 实战：使用docker部署一个node项目","index":"5"},{"id":"六.-其他","title":"六. 其他","index":"6"},{"id":"七.-docker-compose","title":"七. Docker-compose","index":"7"}],"copyright":{"author":"Qiu Xiaori","license":"自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0)","link":"<a href=\"http://qiuxiaori.github.com/2020/07/20/Docker实战/\" title=\"Docker实战\">http://qiuxiaori.github.com/2020/07/20/Docker实战/</a>"}}