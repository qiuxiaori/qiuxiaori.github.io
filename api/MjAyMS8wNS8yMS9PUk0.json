{"title":"ORM简记","date":"2021-05-21T09:32:50.652Z","date_formatted":{"ll":"May 21, 2021","L":"05/21/2021","MM-DD":"05-21"},"link":"2021/05/21/ORM","tags":["orm"],"categories":["编程技术"],"updated":"2021-05-21T09:32:50.652Z","content":"<!--readmore-->\n<h3 id=\"一.-概述\">一. 概述<a title=\"#一.-概述\" href=\"#一.-概述\"></a></h3>\n<p>ORM 是通过实例对象的语法，完成关系型数据库的操作的技术，是&quot;对象-关系映射&quot;（Object/Relational Mapping） 的缩写。</p>\n<h5 id=\"对应关系\">对应关系<a title=\"#对应关系\" href=\"#对应关系\"></a></h5>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th style=\"text-align:left\">数据库</th>\n<th style=\"text-align:left\">对象</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">数据库的表（table）</td>\n<td style=\"text-align:left\">类（class)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">记录（record，行数据</td>\n<td style=\"text-align:left\">对象（object）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">字段（field）</td>\n<td style=\"text-align:left\">对象的属性（attribute）</td>\n</tr>\n</tbody>\n</table></div></div><h5 id=\"例\">例<a title=\"#例\" href=\"#例\"></a></h5>\n<ul>\n<li>一行 SQL 语句</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SELECT id, first_name, last_name, phone, birth_date, sex</span><br><span class=\"line\"> FROM persons </span><br><span class=\"line\"> WHERE id &#x3D; 10</span><br></pre></td></tr></table></figure>\n<ul>\n<li>程序直接运行 SQL，操作数据库的写法如下</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res &#x3D; db.execSql(sql);</span><br><span class=\"line\">name &#x3D; res[0][&quot;FIRST_NAME&quot;];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>改成 ORM 的写法如下</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p &#x3D; Person.get(10);</span><br><span class=\"line\">name &#x3D; p.first_name;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二.-优缺点\">二. 优缺点<a title=\"#二.-优缺点\" href=\"#二.-优缺点\"></a></h3>\n<h5 id=\"优点\">优点<a title=\"#优点\" href=\"#优点\"></a></h5>\n<ol>\n<li>数据模型都在一个地方定义，更容易更新和维护，也利于重用代码。</li>\n<li>ORM 有现成的工具，很多功能都可以自动完成，比如数据消毒、预处理、事务等等。</li>\n<li>它迫使你使用 MVC 架构，ORM 就是天然的 Model，最终使代码更清晰。</li>\n<li>基于 ORM 的业务代码比较简单，代码量少，语义性好，容易理解。</li>\n<li>你不必编写性能不佳的 SQL。</li>\n</ol>\n<h5 id=\"缺点\">缺点<a title=\"#缺点\" href=\"#缺点\"></a></h5>\n<ol>\n<li>ORM 库不是轻量级工具，需要花很多精力学习和设置。</li>\n<li>对于复杂的查询，ORM 要么是无法表达，要么是性能不如原生的 SQL。</li>\n<li>ORM 抽象掉了数据库层，开发者无法了解底层的数据库操作，也无法定制一些特殊的 SQL。</li>\n</ol>\n<h3 id=\"三.-命名规范\">三. 命名规范<a title=\"#三.-命名规范\" href=\"#三.-命名规范\"></a></h3>\n<ol>\n<li>一个类对应一张表。类名是单数，且首字母大写；表名是复数，且全部是小写。比如，表books对应类Book。</li>\n<li>如果名字是不规则复数，则类名依照英语习惯命名，比如，表mice对应类Mouse，表people对应类Person。</li>\n<li>如果名字包含多个单词，那么类名使用首字母全部大写的骆驼拼写法，而表名使用下划线分隔的小写单词。比如，表book_clubs对应类BookClub，表line_items对应类LineItem。</li>\n<li>每个表都必须有一个主键字段，通常是叫做id的整数字段。外键字段名约定为单数的表名 + 下划线 + id，比如item_id表示该字段对应items表的id字段。</li>\n</ol>\n<h3 id=\"四.-node.js-orm-框架\">四. Node.js orm 框架<a title=\"#四.-node.js-orm-框架\" href=\"#四.-node.js-orm-框架\"></a></h3>\n<h5 id=\"mongoose\">Mongoose<a title=\"#mongoose\" href=\"#mongoose\"></a></h5>\n<p>目前比较常见的 MongoDB ORM 框架，官方说法是 ODM 框架，可见对关系型数据库支持一般</p>\n<ul>\n<li>官网：<a href=\"https://mongoosejs.com/\" target=\"_blank\" rel=\"noopener\">https://mongoosejs.com/</a></li>\n<li>数据库：仅支持 MongoDB</li>\n<li>编程风格：</li>\n<li>\n<ul>\n<li>支持 Promise/async/await</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>基于 JS 内置类型的 Schema 声明</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>基于链式构造的 Query Builder 查询</li>\n</ul>\n</li>\n<li>周边技术：</li>\n<li>\n<ul>\n<li>Typegoose<br>\n<a href=\"https://www.npmjs.com/package/typegoose\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/typegoose</a><br>\n可以增加 TypeScript 支持，支持使用 Reflect Metadata 自动映射 TS 类型标注</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"sequelize\">Sequelize<a title=\"#sequelize\" href=\"#sequelize\"></a></h5>\n<p>较老牌的 Node.js ORM 框架，相对简易</p>\n<ul>\n<li>官网：<a href=\"http://docs.sequelizejs.com/\" target=\"_blank\" rel=\"noopener\">http://docs.sequelizejs.com/</a></li>\n<li>数据库：支持关系型数据库（MySQL/MSSQL/PostgreSQL/SQLite）</li>\n<li>编程风格：</li>\n<li>\n<ul>\n<li>支持 Promise/async/await</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>基于自带的一套类型枚举声明</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>基于 JSON 对象的查询方式</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>基于自带的一套操作符描述</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"bookshelf\">Bookshelf<a title=\"#bookshelf\" href=\"#bookshelf\"></a></h5>\n<p>Sequelize 之后出现的 ORM 框架，风格与 Sequelize 较相似，看上去比 Sequelize 易用性高</p>\n<ul>\n<li>官网：<a href=\"http://bookshelfjs.org/\" target=\"_blank\" rel=\"noopener\">http://bookshelfjs.org/</a></li>\n<li>数据库：支持关系型数据库</li>\n<li>编程风格：</li>\n<li>\n<ul>\n<li>基本上是 Eloquent ORM 的 JS 版本</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>支持 Promise/async/await</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>支持基于链式构造的 Query Builder 查询</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"typeorm\">TypeORM<a title=\"#typeorm\" href=\"#typeorm\"></a></h5>\n<p>基于 Decorator 的 ORM 框架，对 TypeScript 支持较好，同时支持在 JavaScript 中通过手动声明使用，以及 JSON 方式的 Entity 配置声明</p>\n<ul>\n<li>官网：<a href=\"https://github.com/typeorm/typeorm/\" target=\"_blank\" rel=\"noopener\">https://github.com/typeorm/typeorm/</a></li>\n<li>数据库：支持关系型数据库，Beta 支持 MongoDB</li>\n<li>编程风格：</li>\n<li>\n<ul>\n<li>基本上是 Hibernate 的 JS 版本</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>支持 Promise/async/await</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>支持基于链式构造的 Query Builder 查询</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>支持 CLI 工具</li>\n</ul>\n</li>\n</ul>\n","prev":{"title":"Node深入浅出","link":"2021/05/21/Node深入浅出"},"next":{"title":"egg框架中实现上传文件","link":"2021/05/21/egg框架中实现上传文件"},"plink":"http://qiuxiaori.github.com/2021/05/21/ORM/","toc":[{"id":"一.-概述","title":"一. 概述","index":"1"},{"id":"二.-优缺点","title":"二. 优缺点","index":"2"},{"id":"三.-命名规范","title":"三. 命名规范","index":"3"},{"id":"四.-node.js-orm-框架","title":"四. Node.js orm 框架","index":"4"}],"copyright":{"author":"Qiu Xiaori","license":"自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0)","link":"<a href=\"http://qiuxiaori.github.com/2021/05/21/ORM/\" title=\"ORM简记\">http://qiuxiaori.github.com/2021/05/21/ORM/</a>"}}