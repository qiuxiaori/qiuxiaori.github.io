{"title":"log4js实战","date":"2021-05-21T09:32:50.653Z","date_formatted":{"ll":"May 21, 2021","L":"05/21/2021","MM-DD":"05-21"},"link":"2021/05/21/log4js实战","categories":["编程技术"],"updated":"2021-05-21T09:32:50.653Z","content":"<h4 id=\"\"><a title=\"#\" href=\"#\"></a></h4>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; configure, getLogger &#125; from &#39;log4js&#39;</span><br><span class=\"line\">import &#123; create &#125; from &#39;..&#x2F;daos&#x2F;logger&#39;</span><br><span class=\"line\">import &#123; PRODUCTION, TEST &#125; from &#39;..&#x2F;interfaces&#x2F;constant&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">const NODE_ENV &#x3D; process.env.NODE_ENV</span><br><span class=\"line\"></span><br><span class=\"line\">configure(&#123;</span><br><span class=\"line\">  appenders: &#123;</span><br><span class=\"line\">    out: &#123; type: &#39;stdout&#39; &#125;,</span><br><span class=\"line\">    overDebug: &#123; type: &#39;stdout&#39; &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  categories: &#123;</span><br><span class=\"line\">    default: &#123; appenders: [&#39;out&#39;], level: &#39;all&#39; &#125;,</span><br><span class=\"line\">    info: &#123; appenders: [&#39;overDebug&#39;], level: &#39;info&#39; &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">export default class Log &#123;</span><br><span class=\"line\">  constructor(public fileName: string) &#123;</span><br><span class=\"line\">    this.fileName &#x3D; fileName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;**</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @param location</span><br><span class=\"line\">   * @param partContent</span><br><span class=\"line\">   * @param error</span><br><span class=\"line\">   *&#x2F;</span><br><span class=\"line\">  public async error(location: string, partContent: Record&lt;string, unknown&gt;, error: Error): Promise&lt;void&gt; &#123;</span><br><span class=\"line\">    await wrapLog(&#39;error&#39;, this.fileName, location, &#123; error: error.stack, ...partContent &#125;, error.name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;**</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @param location</span><br><span class=\"line\">   * @param content</span><br><span class=\"line\">   *&#x2F;</span><br><span class=\"line\">  public async info(location: string, content: Record&lt;string, unknown&gt;): Promise&lt;void&gt; &#123;</span><br><span class=\"line\">    await wrapLog(&#39;info&#39;, this.fileName, location, content)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;**</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @param location</span><br><span class=\"line\">   * @param content</span><br><span class=\"line\">   *&#x2F;</span><br><span class=\"line\">  public async debug(location: string, content: Record&lt;string, unknown&gt;): Promise&lt;void&gt; &#123;</span><br><span class=\"line\">    await wrapLog(&#39;debug&#39;, this.fileName, location, content)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 根据 NODE_ENV 打印或保存日志信息</span><br><span class=\"line\"> * @param level 错误级别 debug&#x2F;info&#x2F;error</span><br><span class=\"line\"> * @param fileName 所在文件</span><br><span class=\"line\"> * @param location 所在方法 或 操作描述</span><br><span class=\"line\"> * @param content 日志内容</span><br><span class=\"line\"> * @param errorName 错误名称</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">export async function wrapLog(</span><br><span class=\"line\">  level: string,</span><br><span class=\"line\">  fileName: string,</span><br><span class=\"line\">  location: string,</span><br><span class=\"line\">  content: Record&lt;string, unknown&gt;,</span><br><span class=\"line\">  errorName &#x3D; &#39;&#39;,</span><br><span class=\"line\">): Promise&lt;void&gt; &#123;</span><br><span class=\"line\">  const contentStr &#x3D; JSON.stringify(content)</span><br><span class=\"line\">  &#x2F;&#x2F; 控制台打印</span><br><span class=\"line\">  let info &#x3D; &#96;$&#123;fileName&#125; - $&#123;location&#125;: $&#123;contentStr&#125;&#96;</span><br><span class=\"line\">  if (errorName) &#123;</span><br><span class=\"line\">    info +&#x3D; &#96;, errorName: $&#123;errorName&#125;&#96;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  if (NODE_ENV &#x3D;&#x3D;&#x3D; PRODUCTION) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; 生产环境只输出 &#39;debug&#39; 以上的日志</span><br><span class=\"line\">    getLogger(&#39;overDebug&#39;)[level](info)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getLogger(&#39;out&#39;)[level](info)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#x2F;&#x2F; 测试环境所有日志 或 生产环境 debug 以上的日志 存储到数据库</span><br><span class=\"line\">  const isSaveProd &#x3D; NODE_ENV &#x3D;&#x3D;&#x3D; PRODUCTION &amp;&amp; (level &#x3D;&#x3D;&#x3D; &#39;info&#39; || level &#x3D;&#x3D;&#x3D; &#39;error&#39;)</span><br><span class=\"line\">  const isSaveTest &#x3D; NODE_ENV &#x3D;&#x3D;&#x3D; TEST</span><br><span class=\"line\">  if (isSaveProd || isSaveTest) &#123;</span><br><span class=\"line\">    await create(level, fileName, location, contentStr, errorName)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"http学习","link":"2021/05/21/http学习"},"next":{"title":"js模块","link":"2021/05/21/js模块"},"plink":"http://qiuxiaori.github.com/2021/05/21/log4js实战/","toc":[{"id":"","title":"","index":"1"}],"copyright":{"author":"Qiu Xiaori","license":"自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0)","link":"<a href=\"http://qiuxiaori.github.com/2021/05/21/log4js实战/\" title=\"log4js实战\">http://qiuxiaori.github.com/2021/05/21/log4js实战/</a>"}}