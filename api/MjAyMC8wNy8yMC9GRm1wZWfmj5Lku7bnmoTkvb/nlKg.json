{"title":"FFmpeg插件的使用","date":"2020-07-20T07:05:18.546Z","date_formatted":{"ll":"Jul 20, 2020","L":"07/20/2020","MM-DD":"07-20"},"link":"2020/07/20/FFmpeg插件的使用","tags":["文件"],"categories":["编程技术"],"updated":"2020-07-20T07:05:18.546Z","content":"<blockquote>\n<p>FFmpeg 是一个自由软件，可以运行音频和视频多种格式的录影、转换、流功能，包含了 libavcodec——这是一个用于多个项目中音频和视频的解码器库，以及 libavformat——一个音频与视频格式转换库。 “FFmpeg”这个单词中的“FF”指的是“Fast Forward”。<a href=\"https://www.npmjs.com/package/ffmpeg\" target=\"_blank\">ffmpeg</a>插件提供了一组函数和实用程序来抽象 ffmpeg 的命令行用法。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"一.安装-ffmpeg\">一.安装 ffmpeg<a title=\"#一.安装-ffmpeg\" href=\"#一.安装-ffmpeg\"></a></h2>\n<ol>\n<li>安装 ffmpeg 软件<br>\n使用 ffmpeg 插件首先需要电脑有 ffmpeg 软件环境，安装 ffmpeg 需要 brew 环境。</li>\n</ol>\n<ul>\n<li>\n<p>安装 brew,执行以下命令<br>\n<code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</code><br>\n这个过程没有 vpn 的话有点慢，可以搜索其他安装方式，这里不细讲。</p>\n</li>\n<li>\n<p>安装 ffmpeg，<br>\n<code>brew install ffmpe</code><br>\n这个过程也要安装很多东西，有点久，还可以到官网下载安装包，不过需要配置，自行谷歌吧。</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>安装插件<br>\n在项目中执行下面 👇 的命令<br>\n<code>npm install ffmpeg</code></p>\n</li>\n<li>\n<p>引入插件<br>\n<code>var ffmpeg = require('ffmpeg');</code></p>\n</li>\n<li>\n<p>使用插件创建实例<br>\nffmpeg 插件中所有的方法都可以使用回调函数或 Promise 两种方式调用。</p>\n</li>\n</ol>\n<ul>\n<li>回调函数方式```js<br>\nnew ffmpeg(‘/path/to/your_movie.avi’, function (err, video) {<br>\nif (!err) {<br>\nconsole.log(‘The video is ready to be processed’);<br>\n} else {<br>\nconsole.log('Error: ’ + err);<br>\n}<br>\n});</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* Promise方式&#96;&#96;&#96;js</span><br><span class=\"line\">  var process &#x3D; new ffmpeg(&#39;&#x2F;path&#x2F;to&#x2F;your_movie.avi&#39;);</span><br><span class=\"line\">  process.then(function (video) &#123;</span><br><span class=\"line\">    console.log(&#39;The video is ready to be processed&#39;);</span><br><span class=\"line\">  &#125;, function (err) &#123;</span><br><span class=\"line\">    console.log(&#39;Error: &#39; + err);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"二.video-对象\">二.Video 对象<a title=\"#二.video-对象\" href=\"#二.video-对象\"></a></h2>\n<h3 id=\"video-对象属性\">video 对象属性<a title=\"#video-对象属性\" href=\"#video-对象属性\"></a></h3>\n<p>每次创建新实例时，此库都会提供一个新对象来检索视频信息，ffmpeg 配置以及进行必要转换的所有方法：```js<br>\nvar process = new ffmpeg(‘/path/to/your_movie.avi’);<br>\nprocess.then(function (video) {<br>\nconsole.log(video.metadata); // Video metadata<br>\nconsole.log(video.metadata.duration.seconds) // Video 的时长<br>\nconsole.log(video.info_configuration); // FFmpeg configuration<br>\n}, function (err) {<br>\nconsole.log('Error: ’ + err);<br>\n});</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### video对象方法</span><br><span class=\"line\">video对象预设一组方法，可以独立于预设配置进行独立操作。</span><br><span class=\"line\">1. **video.fnExtractSoundToMP3(destionationFileName，callback)**</span><br><span class=\"line\">这个方法会把视频的音频流提取为mp3文件。</span><br><span class=\"line\">**参数：**</span><br><span class=\"line\">* destionationFileName：要导出的文件的完整路径：</span><br><span class=\"line\">&#96;&#x2F;path&#x2F;to&#x2F;your_audio_file.mp3&#96;</span><br><span class=\"line\"></span><br><span class=\"line\">* callback: (可选）如果在进程结束时指定，它将返回新音频文件的路径：</span><br><span class=\"line\">&#96;function (error, file)&#96;</span><br><span class=\"line\">**例：**&#96;&#96;&#96;js</span><br><span class=\"line\">  var process &#x3D; new ffmpeg(&#39;&#x2F;path&#x2F;to&#x2F;your_movie.avi&#39;);</span><br><span class=\"line\">  process.then(function (video) &#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Callback mode</span><br><span class=\"line\">   video.fnExtractSoundToMP3(&#39;&#x2F;path&#x2F;to&#x2F;your_audio_file.mp3&#39;, function (error, file) &#123;</span><br><span class=\"line\">    if (!error)</span><br><span class=\"line\">    console.log(&#39;Audio file: &#39; + file);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  &#125;, function (err) &#123;</span><br><span class=\"line\">   console.log(&#39;Error: &#39; + err);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#96;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><strong>video.fnExtractFrameToJPG(destinationFolder,settings, callback)</strong><br>\n这个方法就是帮助实现这次需求的主要方法啦，它能截取视频的一个或多个帧，返回给我们一个图像数组。<br>\n<strong>参数：</strong></li>\n</ol>\n<ul>\n<li>destinationFolder:生成的帧的目标文件夹<br>\n<code>/path/to/you_file</code></li>\n<li>setting:( 可选）更改默认设置的设置：```js<br>\n{<br>\nstart_time: number, // 开始的时间,不太支持<br>\nduration_time: number, // 持续的时间<br>\nframe_rate: number, // 每秒的帧数<br>\nkeep_aspect_ratio: false, // 保持宽高比<br>\nsize: number, // 截取图片的尺寸 不太支持<br>\nnumber: number, // 要截取的帧数<br>\nevery_n_frames: number, // 间隔几帧截取<br>\nevery_n_seconds: number, // 间隔几秒截取，不太支持<br>\nevery_n_percentage: number,// 间隔百分比截取，不太支持<br>\nkeep_pixel_aspect_ratio: true,// Mantain the original pixel video aspect ratio<br>\npadding_color: ‘black’, // Padding color<br>\nfile_name: null,<br>\n}</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* callback: (可选）如果在进程结束时指定将返回创建的帧的路径列表：</span><br><span class=\"line\">&#96;function (error, file)&#96;</span><br><span class=\"line\">**例：**&#96;&#96;&#96;js</span><br><span class=\"line\">  video.fnExtractFrameToJPG(&#39;&#x2F;path&#x2F;to&#x2F;save_your_frames&#39;, &#123;</span><br><span class=\"line\">      frame_rate : 1,</span><br><span class=\"line\">      number : 5,</span><br><span class=\"line\">      file_name : &#39;my_frame_%t_%s&#39;</span><br><span class=\"line\">    &#125;, function (error, files) &#123;</span><br><span class=\"line\">      if (!error)</span><br><span class=\"line\">          console.log(&#39;Frames: &#39; + files);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><strong>video.fnAddWatermark（watermarkPath，newFilepath，settings，callback</strong><br>\n这个方法负责为正在开发的视频添加水印。您可以指定图像位置的确切位置。<br>\n<strong>参数：</strong></li>\n</ol>\n<ul>\n<li>watermarkPath: 存储图像的完整路径<br>\n<code>/path/to/retrieve/watermark_file.png</code></li>\n<li>newFilepath: (可选）新视频的名称。如果未指定，将由该函数创建.<br>\n<code>/path/to/save/your_file_video.mp4</code></li>\n<li>settings: (可选）更改默认设置的设置.```js<br>\n{<br>\nposition: “SW”, // Position: NE NC NW SE SC SW C CE CW<br>\nmargin_nord: null, // Margin nord<br>\nmargin_sud: null, // Margin sud<br>\nmargin_east: null, // Margin east<br>\nmargin_west: null, // Margin west<br>\n};</li>\n<li>callback: (可选）如果在流程结束时指定，它将返回包含水印的新视频的路径.<br>\n<code>function (error, file)</code><br>\n<strong>例:</strong>```js<br>\nvideo.fnAddWatermark(‘/path/to/retrieve/watermark_file.png’, ‘/path/to/save/your_file_video.mp4’, {<br>\nposition : ‘SE’<br>\n}, function (error, file) {<br>\nif (!error)<br>\nconsole.log('New video file: ’ + file);<br>\n});</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">4. **其他方法见npm[ffmpeg](https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;ffmpeg)。**</span><br></pre></td></tr></table></figure>\n","prev":{"title":"Docker实战之mongo","link":"2020/07/20/Docker实战之mongo"},"next":{"title":"ESLint使用简介","link":"2020/07/20/Eslint的使用"},"plink":"http://qiuxiaori.github.com/2020/07/20/FFmpeg插件的使用/","toc":[{"id":"一.安装-ffmpeg","title":"一.安装 ffmpeg","index":"1"},{"id":"二.video-对象","title":"二.Video 对象","index":"2","children":[{"id":"video-对象属性","title":"video 对象属性","index":"2.1"}]}],"copyright":{"author":"Qiu Xiaori","license":"自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0)","link":"<a href=\"http://qiuxiaori.github.com/2020/07/20/FFmpeg插件的使用/\" title=\"FFmpeg插件的使用\">http://qiuxiaori.github.com/2020/07/20/FFmpeg插件的使用/</a>"}}