{"title":"大话数据结构","date":"2021-05-21T11:04:50.443Z","date_formatted":{"ll":"May 21, 2021","L":"05/21/2021","MM-DD":"05-21"},"link":"2021/05/21/大话数据结构","tags":["数据结构"],"categories":["编程技术"],"updated":"2021-05-21T11:04:50.444Z","content":"<hr>\n<h3 id=\"第一章-绪论\">第一章 绪论<a title=\"#第一章-绪论\" href=\"#第一章-绪论\"></a></h3>\n<h4 id=\"1.4-概念和术语\">1.4 概念和术语<a title=\"#1.4-概念和术语\" href=\"#1.4-概念和术语\"></a></h4>\n<p>数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。</p>\n<h4 id=\"1.5-逻辑结构与物理结构\">1.5 逻辑结构与物理结构<a title=\"#1.5-逻辑结构与物理结构\" href=\"#1.5-逻辑结构与物理结构\"></a></h4>\n<h5 id=\"1.5.1-逻辑结构：数据对象中数据元素之间的相互关系。\">1.5.1 逻辑结构：数据对象中数据元素之间的相互关系。<a title=\"#1.5.1-逻辑结构：数据对象中数据元素之间的相互关系。\" href=\"#1.5.1-逻辑结构：数据对象中数据元素之间的相互关系。\"></a></h5>\n<ol>\n<li>\n<p>集合结构：数据元素除了属于同一个集合外，之间没有其他关系。</p>\n</li>\n<li>\n<p>线性结构：一对一的关系。</p>\n</li>\n<li>\n<p>树形结构：存在一种一对多的曾册关系。</p>\n</li>\n<li>\n<p>图形结构：多对多的关系。</p>\n</li>\n</ol>\n<h5 id=\"1.5.2-物理结构：数据的逻辑结构在计算机中的存储形式。\">1.5.2 物理结构：数据的逻辑结构在计算机中的存储形式。<a title=\"#1.5.2-物理结构：数据的逻辑结构在计算机中的存储形式。\" href=\"#1.5.2-物理结构：数据的逻辑结构在计算机中的存储形式。\"></a></h5>\n<p>数据的存储结构应正确反应数据元素之间的逻辑关系。</p>\n<ol>\n<li>顺序存储结构：把数据元素存放在地址连续的存储单元里，其数据件的逻辑关系和物理关系是一致的。</li>\n<li>链式存储结构：把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。用一个指针存放数据元素的地址，通过地址找到关联数据元素的位置。</li>\n</ol>\n<h4 id=\"1.6-抽象数据类型\">1.6 抽象数据类型<a title=\"#1.6-抽象数据类型\" href=\"#1.6-抽象数据类型\"></a></h4>\n<h5 id=\"1.6.1-数据类型\">1.6.1 数据类型<a title=\"#1.6.1-数据类型\" href=\"#1.6.1-数据类型\"></a></h5>\n<p>是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。</p>\n<p>在c语言中，按照取值的不同，数据类型可分为两类：</p>\n<ol>\n<li>原子类型：不可以再分解的基本类型，整型，实型，字符型等。</li>\n<li>结构类型：由若干个类型组合而成，可以分解，如数组等。</li>\n</ol>\n<h5 id=\"1.6.2-抽象数据类型\">1.6.2 抽象数据类型<a title=\"#1.6.2-抽象数据类型\" href=\"#1.6.2-抽象数据类型\"></a></h5>\n<p>指一个数学模型及定义在该模型上的一组操作。仅取决于它的一组逻辑特性，而与其在计算机内部如何表示和实现无关。</p>\n<p>抽象数据类型体现了程序设计中问题分解，抽象和信息隐藏的特性。</p>\n<hr>\n<h3 id=\"第二章-算法\">第二章 算法<a title=\"#第二章-算法\" href=\"#第二章-算法\"></a></h3>\n<h4 id=\"2.4-算法定义\">2.4 算法定义<a title=\"#2.4-算法定义\" href=\"#2.4-算法定义\"></a></h4>\n<p>算法是解决特定问题求解步骤的描述，在计算机中表现为指令的优先序列，并且每条指令表示一个或多个操作。</p>\n<h4 id=\"2.5-算法的特性\">2.5 算法的特性<a title=\"#2.5-算法的特性\" href=\"#2.5-算法的特性\"></a></h4>\n<p>算法具有五个基本特性：输入，输出，有穷性，确定性和可行性。</p>\n<h4 id=\"2.6-算法设计的要求\">2.6 算法设计的要求<a title=\"#2.6-算法设计的要求\" href=\"#2.6-算法设计的要求\"></a></h4>\n<ol>\n<li>\n<p>正确性：输入输出和加工处理无歧义性，能正确反映问题的需求，能得到问题的正确答案。</p>\n<p>一般情况下，算法是否正确的标准：对于非法的输入数据能够得出满足规格说明的结果。</p>\n</li>\n<li>\n<p>可读性：便于阅读，理解和交流。</p>\n</li>\n<li>\n<p>健壮性：输入数据不合法时，算法也能做出相关处理。</p>\n</li>\n<li>\n<p>时间效率高和存储量低。</p>\n</li>\n</ol>\n<h4 id=\"2.7-算法效率的度量方法\">2.7 算法效率的度量方法<a title=\"#2.7-算法效率的度量方法\" href=\"#2.7-算法效率的度量方法\"></a></h4>\n<h5 id=\"2.7.1-事后统计方法\">2.7.1 事后统计方法<a title=\"#2.7.1-事后统计方法\" href=\"#2.7.1-事后统计方法\"></a></h5>\n<h5 id=\"2.7.2-事前分析估算方法\">2.7.2 事前分析估算方法<a title=\"#2.7.2-事前分析估算方法\" href=\"#2.7.2-事前分析估算方法\"></a></h5>\n<p>在计算机程序编制前，依据统计方法对算法进行估算。</p>\n<p>一个用高级程序语言编写的程序在计算机上运行时所消耗的时间取决于下列因素：</p>\n<ol>\n<li>算法采用的策略，方法：算法好坏的根本。</li>\n<li>编译产生的代码质量：软件的支持。</li>\n<li>问题的输入规模。</li>\n<li>机器执行指令的速度：硬件性能。</li>\n</ol>\n<p>在分析程序的运行时间时，重要的是把程序看成独立于程序设计语言的算法或一系列步骤。</p>\n<h4 id=\"2.8-函数的渐近增长\">2.8 函数的渐近增长<a title=\"#2.8-函数的渐近增长\" href=\"#2.8-函数的渐近增长\"></a></h4>\n<p><strong>定义：</strong> 给定两个函数 f(n) 和 g(n)，如果存在一个整数 N，使得对于所有 n &gt; N，  f(n) 总是比 g(n) 大，那么我们说  f(n)  的增长渐近快于 g(n)。</p>\n<p>判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而更应该关注主项的阶数。</p>\n<h4 id=\"2.9-算法时间复杂度\">2.9 算法时间复杂度<a title=\"#2.9-算法时间复杂度\" href=\"#2.9-算法时间复杂度\"></a></h4>\n<h5 id=\"2.9.1-定义：\">2.9.1 定义：<a title=\"#2.9.1-定义：\" href=\"#2.9.1-定义：\"></a></h5>\n<p>在进行算法分析时，语句总的执行次数 T(n) 是关于问题规模 n 的函数，进而分析  T(n) 随 n 的变化情况并确定  T(n) 的数量级。算法的时间复杂度，也就是算法的时间量度，记作： T(n) = O(f(n))。它表示随问题规模 n 的增大，算法执行时间的增长率和  f(n) 的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中 f(n) 是问题规模 n 的某个函数。一般情况下，随着 n 的增大， T(n) 增长最慢的算法为最优算法 。</p>\n<h5 id=\"2.9.2-推导大-o-阶\">2.9.2 推导大 O 阶<a title=\"#2.9.2-推导大-o-阶\" href=\"#2.9.2-推导大-o-阶\"></a></h5>\n<ol>\n<li>用常数 1 取代运行时间中的所有加法常数。</li>\n<li>在修改后的运行次数函数中，只保留最高阶项。</li>\n<li>如果最高阶项存在且不为 1，则去除与这个项相乘的常数。</li>\n</ol>\n<h4 id=\"2.10-常见的时间复杂度\">2.10 常见的时间复杂度<a title=\"#2.10-常见的时间复杂度\" href=\"#2.10-常见的时间复杂度\"></a></h4>\n<p>![image-20200616154806058](/Users/mac/Library/Application Support/typora-user-images/image-20200616154806058.png)</p>\n<h4 id=\"2.12-算法空间复杂度\">2.12 算法空间复杂度<a title=\"#2.12-算法空间复杂度\" href=\"#2.12-算法空间复杂度\"></a></h4>\n<p>算法的空间复杂度通过计算算法所需的存储空间实现，算法空间复杂度的计算公式记作：S(n) = O(f(n))，其中，n 为问题的规模，f(n) 为语句关于 n 所占存储空间的函数。</p>\n<hr>\n<h3 id=\"第三章-线性表-list\">第三章 线性表 List<a title=\"#第三章-线性表-list\" href=\"#第三章-线性表-list\"></a></h3>\n<blockquote>\n<p>零个或多个数据元素的有限序列。</p>\n</blockquote>\n<h4 id=\"3.3-线性表的抽象数据类型\">3.3 线性表的抽象数据类型<a title=\"#3.3-线性表的抽象数据类型\" href=\"#3.3-线性表的抽象数据类型\"></a></h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADT 线性表(List)</span><br><span class=\"line\">Data</span><br><span class=\"line\">\t\t数据元素类型相同，除第一个元素外，每个元素有且只有一个直接前驱元素，除了最后一个元素外，每个元素有且只有一个直接后继元素。数据元素之间的关系是一对一。</span><br><span class=\"line\">Operation</span><br><span class=\"line\">initList,listEmpty,clearList,getElem,locateElem,ListInsert,ListDelete,ListLength</span><br><span class=\"line\">endADT</span><br></pre></td></tr></table></figure>\n<h4 id=\"3.4-线性表的顺序存储结构\">3.4 线性表的顺序存储结构<a title=\"#3.4-线性表的顺序存储结构\" href=\"#3.4-线性表的顺序存储结构\"></a></h4>\n<h5 id=\"3.4.1-定义\">3.4.1 定义<a title=\"#3.4.1-定义\" href=\"#3.4.1-定义\"></a></h5>\n<p>用一段地址连续的存储单元一次存储线性表的数据元素。</p>\n<h5 id=\"3.4.4-地址计算方法\">3.4.4 地址计算方法<a title=\"#3.4.4-地址计算方法\" href=\"#3.4.4-地址计算方法\"></a></h5>\n<p>存储器中的每个存储单元都有自己的编号，这个编号称为地址。</p>\n<p>假设每个数据占用 c 个存储单元，则： LOC(a[i+1]) =  LOC(a[i]) + c</p>\n<p>可推出： LOC(a[i]) =  LOC(a[1]) + (i-1) c</p>\n<h4 id=\"3.5-顺序存储结构的插入与删除\">3.5 顺序存储结构的插入与删除<a title=\"#3.5-顺序存储结构的插入与删除\" href=\"#3.5-顺序存储结构的插入与删除\"></a></h4>\n<h5 id=\"3.5.1-获得元素操作\">3.5.1 获得元素操作<a title=\"#3.5.1-获得元素操作\" href=\"#3.5.1-获得元素操作\"></a></h5>\n<ul>\n<li>在数组下标范围内，直接返回。</li>\n</ul>\n<h5 id=\"3.5.2-插入操作\">3.5.2 插入操作<a title=\"#3.5.2-插入操作\" href=\"#3.5.2-插入操作\"></a></h5>\n<ul>\n<li>插入位置不合理，抛出异常。</li>\n<li>线性表长度大于或等于数组长度，抛出异常或增加容量。</li>\n<li>插入的位置不在表尾，从最后向前遍历到第 i 个位置，向后移动一个位置。</li>\n<li>将要插入元素填入位置 i。</li>\n<li>表长加 1。</li>\n</ul>\n<h5 id=\"3.5.3-删除操作\">3.5.3 删除操作<a title=\"#3.5.3-删除操作\" href=\"#3.5.3-删除操作\"></a></h5>\n<ul>\n<li>\n<p>线性表为空，抛出异常。</p>\n</li>\n<li>\n<p>删除位置不合理，抛出异常。</p>\n</li>\n<li>\n<p>取出删除元素。</p>\n</li>\n<li>\n<p>删除元素不在表尾，从删除位置遍历到最后。分别向前移动一个位置。</p>\n</li>\n<li>\n<p>表长减 1。</p>\n</li>\n</ul>\n<h5 id=\"3.4.5-时间复杂度及优缺点\">3.4.5 时间复杂度及优缺点<a title=\"#3.4.5-时间复杂度及优缺点\" href=\"#3.4.5-时间复杂度及优缺点\"></a></h5>\n<ul>\n<li>时间复杂度：</li>\n</ul>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th>操作</th>\n<th>时间复杂度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>存，取</td>\n<td>O(1)</td>\n</tr>\n<tr>\n<td>插入，删除</td>\n<td>O(n)</td>\n</tr>\n</tbody>\n</table></div></div><ul>\n<li>优点：无须为表示表中元素之间的逻辑关系而增加额外的存储空间；可以快速的存取表中任意位置的元素。</li>\n<li>缺点：删除和插入操作需要移动大量元素；当线性表长度变化较大时，难以确定存储空间的容量；造成存储空间的碎片。</li>\n</ul>\n<h4 id=\"3.6-线性表的链式存储结构\">3.6 线性表的链式存储结构<a title=\"#3.6-线性表的链式存储结构\" href=\"#3.6-线性表的链式存储结构\"></a></h4>\n<h5 id=\"3.6.4-代码描述\">3.6.4 代码描述<a title=\"#3.6.4-代码描述\" href=\"#3.6.4-代码描述\"></a></h5>\n<p>![image-20200617115130497](/Users/mac/Library/Application Support/typora-user-images/image-20200617115130497.png)</p>\n<h4 id=\"3.7-单链表的读取\">3.7 单链表的读取<a title=\"#3.7-单链表的读取\" href=\"#3.7-单链表的读取\"></a></h4>\n<blockquote>\n<p>时间复杂度 O(n)</p>\n</blockquote>\n<ul>\n<li>声明一个结点 p 指向链表第一个结点，初始化 j = 1。</li>\n<li>当 j &lt; i 时, 遍历链表，让 p 的指针向后移动，不断指向下一结点， j 累加 1。</li>\n<li>循环结束 p 为空，元素不存在。</li>\n<li>否则查找成功，返回结点 p 的数据。</li>\n</ul>\n<h4 id=\"3.8-单链表的插入和删除\">3.8 单链表的插入和删除<a title=\"#3.8-单链表的插入和删除\" href=\"#3.8-单链表的插入和删除\"></a></h4>\n<h5 id=\"3.8.1-插入的操作\">3.8.1 插入的操作<a title=\"#3.8.1-插入的操作\" href=\"#3.8.1-插入的操作\"></a></h5>\n<p>![image-20200617134046716](/Users/mac/Library/Application Support/typora-user-images/image-20200617134046716.png)</p>\n<h4 id=\"3.12-静态链表\">3.12 静态链表<a title=\"#3.12-静态链表\" href=\"#3.12-静态链表\"></a></h4>\n<p>用数组描述的链表叫做静态链表。我们让数组的元素都是由俩个数据域组成，data 和 cur，cur用来存放该元素的后继在数组中的下标。</p>\n<h5 id=\"3.12.1-静态链表的插入操作\">3.12.1 静态链表的插入操作<a title=\"#3.12.1-静态链表的插入操作\" href=\"#3.12.1-静态链表的插入操作\"></a></h5>\n<h4 id=\"3.13-循环链表\">3.13 循环链表<a title=\"#3.13-循环链表\" href=\"#3.13-循环链表\"></a></h4>\n<p>将单链表中终端结点的指针端由空指针改为指向头结点，这使整个单链表形成一个环，这种头尾相接的单链表称为单循环链表，简称循环链表。</p>\n<h4 id=\"3.14-双向链表\">3.14 双向链表<a title=\"#3.14-双向链表\" href=\"#3.14-双向链表\"></a></h4>\n<hr>\n<h3 id=\"第四章-栈与队列\">第四章 栈与队列<a title=\"#第四章-栈与队列\" href=\"#第四章-栈与队列\"></a></h3>\n<h4 id=\"4.2-栈的定义\">4.2 栈的定义<a title=\"#4.2-栈的定义\" href=\"#4.2-栈的定义\"></a></h4>\n<p>栈是限定仅在表尾进行插入和删除操作的线性表。我们把允许插入和删除的一端称为栈顶，另一端称为栈底，栈是后进先出的 <em>线性表</em>，简称 LIFO 结构。</p>\n<h4 id=\"4.3-栈的抽象数据类型\">4.3 栈的抽象数据类型<a title=\"#4.3-栈的抽象数据类型\" href=\"#4.3-栈的抽象数据类型\"></a></h4>\n<p>![image-20200629165825378](/Users/mac/Library/Application Support/typora-user-images/image-20200629165825378.png)</p>\n<h4 id=\"4.4-栈的顺序存储结构\">4.4 栈的顺序存储结构<a title=\"#4.4-栈的顺序存储结构\" href=\"#4.4-栈的顺序存储结构\"></a></h4>\n<h5 id=\"4.4.1-定义\">4.4.1 定义<a title=\"#4.4.1-定义\" href=\"#4.4.1-定义\"></a></h5>\n<p>栈的顺序存储其实是线性表顺序存储的简化，用数组下标为0的一端作为栈底。我们定义top变量指示栈顶元素在数组中的位置，栈的长度为 StackSize，栈顶位置top必须小于 StackSize。空栈的判定条件为 top &lt; 0，</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 结构</span></span><br><span class=\"line\">MAXSIZE = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> stack = &#123;</span><br><span class=\"line\">  top: <span class=\"number\">0</span>,</span><br><span class=\"line\">  data: <span class=\"built_in\">Array</span>[MAXSIZE]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4.4.2-进栈操作\">4.4.2 进栈操作<a title=\"#4.4.2-进栈操作\" href=\"#4.4.2-进栈操作\"></a></h5>\n<p>​\t<em>时间复杂度 O(1)</em></p>\n<ul>\n<li>栈满/栈不存在，抛错</li>\n<li>栈顶指针加一，元素赋值给栈顶空间</li>\n</ul>\n<h5 id=\"4.4.3-出栈操作\">4.4.3 出栈操作<a title=\"#4.4.3-出栈操作\" href=\"#4.4.3-出栈操作\"></a></h5>\n<p>​\t<em>时间复杂度 O(1)</em></p>\n<ul>\n<li>栈空/栈不存在，抛错</li>\n<li>返回删除的栈顶元素，栈顶指针减一</li>\n</ul>\n<h4 id=\"4.5-两栈共享空间\">4.5 两栈共享空间<a title=\"#4.5-两栈共享空间\" href=\"#4.5-两栈共享空间\"></a></h4>\n<p>![image-20200629172604612](/Users/mac/Library/Application Support/typora-user-images/image-20200629172604612.png)</p>\n<h4 id=\"4.6-栈的链式存储结构\">4.6 栈的链式存储结构<a title=\"#4.6-栈的链式存储结构\" href=\"#4.6-栈的链式存储结构\"></a></h4>\n<h4 id=\"4.10-队列\">4.10 队列<a title=\"#4.10-队列\" href=\"#4.10-队列\"></a></h4>\n<h5 id=\"4.10.1-定义\">4.10.1 定义<a title=\"#4.10.1-定义\" href=\"#4.10.1-定义\"></a></h5>\n<p>队列是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。队列是一种先进先出的线性表，简称 FIFO，允许插入的一端称为怼尾，允许删除的一端称为队头。</p>\n<h5 id=\"4.10.2-抽象数据模型\">4.10.2 抽象数据模型<a title=\"#4.10.2-抽象数据模型\" href=\"#4.10.2-抽象数据模型\"></a></h5>\n<p>![image-20200629175749918](/Users/mac/Library/Application Support/typora-user-images/image-20200629175749918.png)</p>\n<h4 id=\"4.11-循环队列\">4.11 循环队列<a title=\"#4.11-循环队列\" href=\"#4.11-循环队列\"></a></h4>\n<h5 id=\"4.11.1-定义\">4.11.1 定义<a title=\"#4.11.1-定义\" href=\"#4.11.1-定义\"></a></h5>\n<p>队列头尾相接的顺序存储结构称为循环队列。</p>\n<h5 id=\"4.11.2-存储结构\">4.11.2 存储结构<a title=\"#4.11.2-存储结构\" href=\"#4.11.2-存储结构\"></a></h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> queue = &#123;</span><br><span class=\"line\">\tdata: <span class=\"built_in\">Array</span>[<span class=\"number\">10</span>],</span><br><span class=\"line\">  front: <span class=\"number\">0</span>,<span class=\"comment\">// 队头元素</span></span><br><span class=\"line\">  rear: <span class=\"number\">0</span> <span class=\"comment\">// 指向队尾元素的下一个位置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4.11.3-队列长度\">4.11.3 队列长度<a title=\"#4.11.3-队列长度\" href=\"#4.11.3-队列长度\"></a></h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不允许队列满，始终空一个元素空间</span></span><br><span class=\"line\">length = (rear + MAXSIZE - frone) % MAXSIZE</span><br></pre></td></tr></table></figure>\n<h5 id=\"4.11.4-入队操作\">4.11.4 入队操作<a title=\"#4.11.4-入队操作\" href=\"#4.11.4-入队操作\"></a></h5>\n<ul>\n<li>\n<p>队满抛错</p>\n</li>\n<li>\n<p>元素赋给队尾</p>\n</li>\n<li>\n<p>rear指针后移一位，若到最后则转到数组头部</p>\n<p><code>rear=(rear+1)%MAXSIZE</code></p>\n</li>\n</ul>\n<h5 id=\"4.11.4-出队操作\">4.11.4 出队操作<a title=\"#4.11.4-出队操作\" href=\"#4.11.4-出队操作\"></a></h5>\n<ul>\n<li>\n<p>队空抛错</p>\n</li>\n<li>\n<p>获取队头元素</p>\n</li>\n<li>\n<p>front指针后移一位，若到最后则转到数组头部</p>\n<p>front=(front+1)%MAXSIZE`</p>\n</li>\n</ul>\n<h4 id=\"4.12-队列的链式存储结构\">4.12 队列的链式存储结构<a title=\"#4.12-队列的链式存储结构\" href=\"#4.12-队列的链式存储结构\"></a></h4>\n<p>队列的链式存储结构，其实就是线性表的单链表，不过只能尾进头出，简称为链队列。我们将队头指针指向链队列的头结点，队尾指针指向终端结点，空队列是，front 和 rear 都指向头结点。</p>\n<hr>\n<h3 id=\"第五章-串\">第五章 串<a title=\"#第五章-串\" href=\"#第五章-串\"></a></h3>\n<h4 id=\"5.2-串的定义\">5.2 串的定义<a title=\"#5.2-串的定义\" href=\"#5.2-串的定义\"></a></h4>\n<p>串是由零个或多个字符组成的有限序列，又名叫字符串。</p>\n<h4 id=\"5.3-串的比较\">5.3 串的比较<a title=\"#5.3-串的比较\" href=\"#5.3-串的比较\"></a></h4>\n<h5 id=\"5.3.1-字符编码\">5.3.1 字符编码<a title=\"#5.3.1-字符编码\" href=\"#5.3.1-字符编码\"></a></h5>\n<ol>\n<li>\n<p>拓展 ASCII 码:</p>\n<p>由 8 位二进制数表示一个字符，总共可以表示 256 个字符。</p>\n</li>\n<li>\n<p>Unicode 编码:</p>\n<p>用 16 位的二进制数表示一个字符，约是 65 万多个字符。为了和 ASCII 码兼容，前 256 个字符与 ASCII 码完全相同。</p>\n</li>\n</ol>\n<h5 id=\"5.3.2-两串相等\">5.3.2 两串相等<a title=\"#5.3.2-两串相等\" href=\"#5.3.2-两串相等\"></a></h5>\n<p>长度和各个位置对应的字符都相等时，两串相等。</p>\n<h5 id=\"5.4.3-两串不等\">5.4.3 两串不等<a title=\"#5.4.3-两串不等\" href=\"#5.4.3-两串不等\"></a></h5>\n<p>![image-20200630145234846](/Users/mac/Library/Application Support/typora-user-images/image-20200630145234846.png)</p>\n<h4 id=\"5.4-串的抽象数据类型\">5.4 串的抽象数据类型<a title=\"#5.4-串的抽象数据类型\" href=\"#5.4-串的抽象数据类型\"></a></h4>\n<p>串的逻辑结构和线性表相似，不同在于串针对字符集，关心的是查找子串位置，得到指定位置子串，替换子串等操作。![image-20200630145445898](/Users/mac/Library/Application Support/typora-user-images/image-20200630145445898.png)</p>\n<h4 id=\"5.5-顺序存储和链式存储\">5.5 顺序存储和链式存储<a title=\"#5.5-顺序存储和链式存储\" href=\"#5.5-顺序存储和链式存储\"></a></h4>\n<h4 id=\"5.6-朴素的模式匹配算法\">5.6 朴素的模式匹配算法<a title=\"#5.6-朴素的模式匹配算法\" href=\"#5.6-朴素的模式匹配算法\"></a></h4>\n<p>从头遍历，时间复杂度 O(n^2)</p>\n<h4 id=\"5.7-kmp-模式匹配算法\">5.7 KMP 模式匹配算法<a title=\"#5.7-kmp-模式匹配算法\" href=\"#5.7-kmp-模式匹配算法\"></a></h4>\n<p>克努特-莫里斯-普拉特算法，简称 KMP 算法。</p>\n<hr>\n<h3 id=\"第六章-树\">第六章 树<a title=\"#第六章-树\" href=\"#第六章-树\"></a></h3>\n<h4 id=\"6.2-树的定义\">6.2 树的定义<a title=\"#6.2-树的定义\" href=\"#6.2-树的定义\"></a></h4>\n<p>树是n个结点的有限集，n=0 时称为空树。在任意一颗非空树中:</p>\n<ol>\n<li>有且仅有一个特点的称为 根(Root) 的结点。</li>\n<li>当 n&gt;1 时，其余结点可分为m(m&gt;0) 个互不相交的有限集，其中每个集合本身又是一棵树，并且称为根的子树(SubTree)。</li>\n</ol>\n<h5 id=\"6.2.1-结点分类\">6.2.1 结点分类<a title=\"#6.2.1-结点分类\" href=\"#6.2.1-结点分类\"></a></h5>\n<p>结点拥有的子树数称为结点的度(Degree)。度为 0 的结点称为叶结点 (Leaf) 或终端结点；度不为 0 的结点称为非终端结点或分支结点。除根节点之外，分支结点也称为内部结点。数的度是树内各结点的度的最大值。</p>\n<h5 id=\"6.2.2-结点间关系\">6.2.2 结点间关系<a title=\"#6.2.2-结点间关系\" href=\"#6.2.2-结点间关系\"></a></h5>\n<p>孩子，双亲，祖先，子孙，兄弟，堂兄弟</p>\n<h5 id=\"6.2.3-其他概念\">6.2.3 其他概念<a title=\"#6.2.3-其他概念\" href=\"#6.2.3-其他概念\"></a></h5>\n<ol>\n<li>树中结点的最大层次称为书的深度(Depth) 或高度。</li>\n<li>如果将树中各结点的子树看成从左至右是有次序的，不能互换的，则称该树为有序树，否则称为无序树。</li>\n<li>森林(Forest) 是 m 棵互不相交的树的集合。对于树中每个结点而言，其子树的集合即为森林。</li>\n</ol>\n<h4 id=\"6.3-树的抽象数据类型\">6.3 树的抽象数据类型<a title=\"#6.3-树的抽象数据类型\" href=\"#6.3-树的抽象数据类型\"></a></h4>\n<p>![image-20200630164505292](/Users/mac/Library/Application Support/typora-user-images/image-20200630164505292.png)</p>\n<h4 id=\"6.4-树的存储结构\">6.4 树的存储结构<a title=\"#6.4-树的存储结构\" href=\"#6.4-树的存储结构\"></a></h4>\n<p>利用顺序存储和链式存储结构的特点，实现对树的存储结构的表示。</p>\n<h5 id=\"6.4.1-双亲表示法\">6.4.1 双亲表示法<a title=\"#6.4.1-双亲表示法\" href=\"#6.4.1-双亲表示法\"></a></h5>\n<p>在每个结点中，附设一个指示器指示其双亲结点到链表中的位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 结点结构</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Node = &#123;</span><br><span class=\"line\">  data: <span class=\"number\">1</span>, <span class=\"comment\">// 数据域</span></span><br><span class=\"line\">  parent: <span class=\"number\">0</span>, <span class=\"comment\">// 该结点的双亲在数组中的下标，根节点为 -1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 树结构</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Tree = &#123;</span><br><span class=\"line\">  nodes: <span class=\"built_in\">Array</span>[Node], <span class=\"comment\">// 结点数组</span></span><br><span class=\"line\">  root: <span class=\"number\">0</span>, <span class=\"comment\">// 根的位置</span></span><br><span class=\"line\">  num: <span class=\"number\">10</span>, <span class=\"comment\">// 结点树</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"6.4.2-孩子表示法\">6.4.2 孩子表示法<a title=\"#6.4.2-孩子表示法\" href=\"#6.4.2-孩子表示法\"></a></h5>\n<p>把每个结点的孩子结点排列起来，以单链表作存储结构，则n个结点有n个孩子链表，如果是叶子结点则此单链表为空。然后n个头指针组成一个线性表，采用顺序存储结构，存放进一个一维数组中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 孩子结点</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Child = &#123;</span><br><span class=\"line\">  child: <span class=\"number\">1</span>, <span class=\"comment\">// 该结点在表头数组中的下标</span></span><br><span class=\"line\">  next: <span class=\"number\">2</span> <span class=\"comment\">// 指向下一个孩子结点的指针</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 表头结构</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Node = &#123;</span><br><span class=\"line\">  data: <span class=\"string\">'some thing'</span>, <span class=\"comment\">// 表头的数据域</span></span><br><span class=\"line\">  firstchild: child&lt;Child&gt; <span class=\"comment\">// 孩子链表的头指针</span></span><br><span class=\"line\">  parent: <span class=\"number\">3</span> <span class=\"comment\">// 双亲的下标，不存在时= -1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 树结构</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Tree = &#123;</span><br><span class=\"line\">  nodes: <span class=\"built_in\">Array</span>&lt;Node&gt;, <span class=\"comment\">// 结点数组</span></span><br><span class=\"line\">  root: <span class=\"number\">0</span>, <span class=\"comment\">// 根节点的位置</span></span><br><span class=\"line\">  num: <span class=\"number\">10</span> <span class=\"comment\">// 结点数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"6.4.3-孩子兄弟表示法\">6.4.3 孩子兄弟表示法<a title=\"#6.4.3-孩子兄弟表示法\" href=\"#6.4.3-孩子兄弟表示法\"></a></h5>\n<p>存储头孩子结点和其右边兄弟的结点。</p>\n<h4 id=\"6.5-二叉树\">6.5 二叉树<a title=\"#6.5-二叉树\" href=\"#6.5-二叉树\"></a></h4>\n<p>二叉树是n个节点的有限集合，该集合或者为空寂，或者由一个根节点和两棵互不相交的，分别称为根节点的左子树和右子树的二叉树组成。</p>\n<h5 id=\"6.5.1-二叉树的五种基本形态:\">6.5.1 二叉树的五种基本形态:<a title=\"#6.5.1-二叉树的五种基本形态:\" href=\"#6.5.1-二叉树的五种基本形态:\"></a></h5>\n<p>空二叉树/只有一个根节点/根节点只有左子树/根节点只有右子树/根节点既有左子树又有右子树</p>\n<h5 id=\"6.5.2-特殊二叉树\">6.5.2 特殊二叉树<a title=\"#6.5.2-特殊二叉树\" href=\"#6.5.2-特殊二叉树\"></a></h5>\n<ol>\n<li>斜树：所有的结点都只有左子树的二叉树叫左写书，所有结点都是右子树的二叉树叫右斜树。**斜树的特点是每层只有一个结点，结点的个数与二叉树的深度相同。**线性表可以理解为树的一种特殊表现形式。</li>\n<li>满二叉树：在一棵二叉树中，所有分支都存在左子树和右子树，所有的叶子在同一层。**特点：叶子只能出现在最下一层/非叶子结点的度一定是2/在同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多。</li>\n<li>完全二叉树：对一棵具有n个结点的二叉树按层序编号，如果编号i的结点与同样深度的满二叉树中编号为i的结点在二叉树中位置完全相同。</li>\n</ol>\n<h5 id=\"6.5.3-完全二叉树特点\">6.5.3 完全二叉树特点<a title=\"#6.5.3-完全二叉树特点\" href=\"#6.5.3-完全二叉树特点\"></a></h5>\n<ol>\n<li>叶子结点只能出现在最下两层</li>\n<li>最下层的叶子一定集中在左部连续位置</li>\n<li>倒数二层若有叶子结点一定在右部连续位置</li>\n<li>结点为1时至右左孩子</li>\n<li>同样结点数的二叉树，完全二叉树深度最小</li>\n</ol>\n<h4 id=\"6.6-二叉树的性质\">6.6 二叉树的性质<a title=\"#6.6-二叉树的性质\" href=\"#6.6-二叉树的性质\"></a></h4>\n<ol>\n<li>\n<p>第i层至多有 2^(i-1) 个结点</p>\n</li>\n<li>\n<p>深度为k时最多有 2^k - 1 个结点</p>\n</li>\n<li>\n<p>一棵二叉树 ![image-20200714174832141](/Users/mac/Library/Application Support/typora-user-images/image-20200714174832141.png)</p>\n</li>\n<li>\n<p>![image-20200714174909277](/Users/mac/Library/Application Support/typora-user-images/image-20200714174909277.png)</p>\n</li>\n</ol>\n<h4 id=\"6.7-二叉树的存储结构\">6.7 二叉树的存储结构<a title=\"#6.7-二叉树的存储结构\" href=\"#6.7-二叉树的存储结构\"></a></h4>\n<h5 id=\"6.7.1-顺序存储\">6.7.1 顺序存储<a title=\"#6.7.1-顺序存储\" href=\"#6.7.1-顺序存储\"></a></h5>\n<p>![image-20200714175240989](/Users/mac/Library/Application Support/typora-user-images/image-20200714175240989.png)</p>\n<h5 id=\"6.7.2-二叉链表\">6.7.2 二叉链表<a title=\"#6.7.2-二叉链表\" href=\"#6.7.2-二叉链表\"></a></h5>\n<p>![image-20200714175222815](/Users/mac/Library/Application Support/typora-user-images/image-20200714175222815.png)</p>\n<h4 id=\"6.8-遍历二叉树\">6.8 遍历二叉树<a title=\"#6.8-遍历二叉树\" href=\"#6.8-遍历二叉树\"></a></h4>\n<h5 id=\"6.8.1-遍历原理\">6.8.1 遍历原理<a title=\"#6.8.1-遍历原理\" href=\"#6.8.1-遍历原理\"></a></h5>\n<p>二叉树的遍历是指从根节点出发，按照某种次序依次访问二叉树中所有结点，使得每个结点被访问一次且仅被访问一次。</p>\n<h5 id=\"6.8.2-遍历方法\">6.8.2 遍历方法<a title=\"#6.8.2-遍历方法\" href=\"#6.8.2-遍历方法\"></a></h5>\n<ol>\n<li>前序遍历： 若二叉树为空，则空操作返回，否则先访问根节点，再前序遍历左子树，再前序遍历右子树。</li>\n<li>中序遍历：若树为空，则空操作返回，否则从根节点开始，中序遍历根节点的左子树，然后访问根节点，最后中序遍历右子树。</li>\n<li>后序遍历：若树为空，则空操作返回，否则从左到右先叶子后结点的方式遍历左右子树，最后访问根节点。</li>\n<li>层序遍历：若树为空，空操作返回，否则从树的第一层，从上而下逐层遍历。在同一层中，按从左到右的顺序对结点逐个访问。</li>\n</ol>\n<h5 id=\"6.8.3-算法\">6.8.3 算法<a title=\"#6.8.3-算法\" href=\"#6.8.3-算法\"></a></h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">preOrderTraverse</span> (<span class=\"params\">BiTree T</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (T === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"comment\">// 为空 返回</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(T.data) <span class=\"comment\">// 显示结点数据</span></span><br><span class=\"line\">  preOrderTraverse(T.lchild) <span class=\"comment\">// 前序遍历左子树</span></span><br><span class=\"line\">  preOrderTraverse(T.rchild) <span class=\"comment\">// 再先序遍历右子树</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调整执行顺序即可分别实现前序，中序，后序遍历算法</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"6.9-二叉树的建立\">6.9 二叉树的建立<a title=\"#6.9-二叉树的建立\" href=\"#6.9-二叉树的建立\"></a></h4>\n<p>递归</p>\n<h4 id=\"6.10-哈夫曼树\">6.10 哈夫曼树<a title=\"#6.10-哈夫曼树\" href=\"#6.10-哈夫曼树\"></a></h4>\n<p>TODO</p>\n<hr>\n<h3 id=\"第七章-图\">第七章 图<a title=\"#第七章-图\" href=\"#第七章-图\"></a></h3>\n<h4 id=\"7.2-图的定义\">7.2 图的定义<a title=\"#7.2-图的定义\" href=\"#7.2-图的定义\"></a></h4>\n<blockquote>\n<p>图是由顶点的有穷非空集合和顶点之间边的集合组成，通常表示为: G(V,E), 其中，G表示一个图，V是图G中顶点的集合，E是图G中边的集合。</p>\n</blockquote>\n<p>TODO</p>\n<hr>\n<h3 id=\"第八章-查找\">第八章 查找<a title=\"#第八章-查找\" href=\"#第八章-查找\"></a></h3>\n<h4 id=\"8.2-概论\">8.2 概论<a title=\"#8.2-概论\" href=\"#8.2-概论\"></a></h4>\n<h5 id=\"8.2.1-术语\">8.2.1 术语<a title=\"#8.2.1-术语\" href=\"#8.2.1-术语\"></a></h5>\n<ul>\n<li>查找表(Search table)： 由同一类型的数据元素或记录构成的集合。</li>\n<li>关键字(Key)：数据元素中某个数据项的值，又称键值，若关键字可以唯一地表示一个记录，称为主关键字；对于可以识别多个数据元素的关键字，称为次关键字。</li>\n<li>查找(Search)：根据给定的某个值，在查找表中去定一个其关键字等于给定值的数据元素。</li>\n</ul>\n<h5 id=\"8.2.2-查找表类别\">8.2.2 查找表类别<a title=\"#8.2.2-查找表类别\" href=\"#8.2.2-查找表类别\"></a></h5>\n<ol>\n<li>静态查找表：只做查找操作的查找表。</li>\n<li>动态查找表：在查找过程中同时插入查找表中不存在的数据元素，或者从查找表中删除已经存在的某个数据元素。</li>\n</ol>\n<h4 id=\"8.3-顺序表查找\">8.3 顺序表查找<a title=\"#8.3-顺序表查找\" href=\"#8.3-顺序表查找\"></a></h4>\n<p>顺序查找又叫线性查找，查找过程是，从表中第一个或者最后一个记录开始，逐个进行记录的关键字和给定值比较，若伯格记录的关键字和给定值相等，则查找成功；到最后一个都不等时，查找不成功。</p>\n<p>时间复杂度： O(n)</p>\n<h5 id=\"8.3.2-有哨兵顺序查找\">8.3.2 有哨兵顺序查找<a title=\"#8.3.2-有哨兵顺序查找\" href=\"#8.3.2-有哨兵顺序查找\"></a></h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">serach2</span> (<span class=\"params\">str, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = str.length</span><br><span class=\"line\">  <span class=\"keyword\">const</span> head = a[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (a[i] !== key &amp;&amp; i &gt; <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    i --</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i === <span class=\"number\">0</span> ) &#123; <span class=\"comment\">// 判断 key 是否等于头部元素</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head === key) <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 返回 -1 则说明查找失败</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"8.4-有序表查找\">8.4 有序表查找<a title=\"#8.4-有序表查找\" href=\"#8.4-有序表查找\"></a></h4>\n<h5 id=\"8.4.1-折半查找/二分查找\">8.4.1 折半查找/二分查找<a title=\"#8.4.1-折半查找/二分查找\" href=\"#8.4.1-折半查找/二分查找\"></a></h5>\n<p>前提是线性表中的记录是关键码有序(通常从小到大)，线性表必须采用顺序存储。</p>\n<p>时间复杂度：O(logn)</p>\n<p>![image-20200716173726439](/Users/mac/Library/Application Support/typora-user-images/image-20200716173726439.png)</p>\n<h5 id=\"8.4.2-插值查找\">8.4.2 插值查找<a title=\"#8.4.2-插值查找\" href=\"#8.4.2-插值查找\"></a></h5>\n<h5 id=\"8.4.3-斐波那契查找\">8.4.3 斐波那契查找<a title=\"#8.4.3-斐波那契查找\" href=\"#8.4.3-斐波那契查找\"></a></h5>\n<h4 id=\"8.5-线性索引查找\">8.5 线性索引查找<a title=\"#8.5-线性索引查找\" href=\"#8.5-线性索引查找\"></a></h4>\n<p>对于增长较快的数据集，要保证记录中某个关键字有序，时间代价是非常高昂的，这种数据通常都是先后顺序存储。</p>\n<p>对于这样的查找表我们引入了索引。</p>\n<p>索引：是为了加快查找速度而设计的一种数据结构，<strong>就是把一个关键字与它对应的记录相关联的过程</strong>，一个索引由所感个索引项构成，每个索引项应至少包含关键字和其对应的记录在存储器中的位置等信息。索引技术是组织大型数据库及磁盘文件的一种重要技术。</p>\n<p>索引按照结构分为：线性索引，树形索引和多级索引。</p>\n<h5 id=\"8.5.1-稠密索引\">8.5.1 稠密索引<a title=\"#8.5.1-稠密索引\" href=\"#8.5.1-稠密索引\"></a></h5>\n<p>稠密索引是指在线性索引中，将数据集中的每个记录对应一个索引项。</p>\n<p>对于稠密索引这个索引表来说，索引项一定是按照关键码有序的排列。</p>\n<h5 id=\"8.5.2-分块索引\">8.5.2 分块索引<a title=\"#8.5.2-分块索引\" href=\"#8.5.2-分块索引\"></a></h5>\n<p>分块有序，是把数据集的记录分成了若干块，且要满足以下两个条件：</p>\n<ol>\n<li>块内无序：每一块内的记录不要求有序。</li>\n<li>块间有序：如要求第二块所有记录的关键字均要大于第一块中记录的关键字。</li>\n</ol>\n<p>定义：对于分块有序的数据集，将每块对应一个索引项。</p>\n<p>定义的分块索引的索引项结构分三个数据项：</p>\n<ol>\n<li>最大关键码：每一块中的最大关键字。</li>\n<li>块中的记录个数。</li>\n<li>指向块首数据元素的指针，便于开始进行遍历。</li>\n</ol>\n<h5 id=\"8.5.3-倒排索引\">8.5.3 倒排索引<a title=\"#8.5.3-倒排索引\" href=\"#8.5.3-倒排索引\"></a></h5>\n<p>倒排索引源于实际应用中需要根据属性(或字段，次关键码)的值来查找记录。这种索引表中的每一项都包括一个属性值和具有该属性值的各记录的地址。由于不是由记录来确定属性值，而是由属性值来确定记录的位置，因为称为倒排索引。</p>\n<h4 id=\"8.6-二叉排序树\">8.6 二叉排序树<a title=\"#8.6-二叉排序树\" href=\"#8.6-二叉排序树\"></a></h4>\n<ol>\n<li>二叉树结点结构</li>\n<li>查找：递归</li>\n<li>插入： todo</li>\n<li>删除： todo</li>\n</ol>\n<h4 id=\"8.7-平衡二叉树(avl树)\">8.7 平衡二叉树(AVL树)<a title=\"#8.7-平衡二叉树(avl树)\" href=\"#8.7-平衡二叉树(avl树)\"></a></h4>\n<p>平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差至多等于1。它是一种高度平衡的二叉排序树。将二叉树结点的左子树深度减去右子树深度的值称为平衡因子BF, 平衡因子只可能是-1,0和1。</p>\n<p>距离插入结点最近的，且平衡因子的绝对值大于 1 的结点为根的子树，称为最小不平衡子树。</p>\n<p>查找，插入和删除的时间复杂度：O(nlogn)</p>\n<h5 id=\"8.7.1-实现原理\">8.7.1 实现原理<a title=\"#8.7.1-实现原理\" href=\"#8.7.1-实现原理\"></a></h5>\n<h4 id=\"8.8-多路查找树\">8.8 多路查找树<a title=\"#8.8-多路查找树\" href=\"#8.8-多路查找树\"></a></h4>\n<p>每一个结点的孩子数可以多于两个，且每一个结点可以存储多个元素。</p>\n<p>特殊形式：2-3树，2-3-4树，B树，B+树</p>\n<h5 id=\"8.8.3-b树\">8.8.3 B树<a title=\"#8.8.3-b树\" href=\"#8.8.3-b树\"></a></h5>\n<p>是一种平衡的多路查找树，结点最大的孩子数目称为B树的阶，2-3树是3阶B树，2-3-4树是4阶B树。</p>\n<p>一个m阶的B树具有如下属性：</p>\n<ul>\n<li>如果根节点不是叶结点，则至少有两棵子树。</li>\n<li>每一个非根的分支结点都有 k-1 个元素和 k 个孩子，其中 m/2 &lt;= k &lt;= m。</li>\n<li>所有叶子结点都位于同一层次。</li>\n</ul>\n<h5 id=\"8.8.4-b+树\">8.8.4 B+树<a title=\"#8.8.4-b+树\" href=\"#8.8.4-b+树\"></a></h5>\n<h4 id=\"8.9-散列表查找(哈希表)概述\">8.9 散列表查找(哈希表)概述<a title=\"#8.9-散列表查找(哈希表)概述\" href=\"#8.9-散列表查找(哈希表)概述\"></a></h4>\n<h5 id=\"8.9.1-定义\">8.9.1 定义<a title=\"#8.9.1-定义\" href=\"#8.9.1-定义\"></a></h5>\n<p>散列技术是在记录的存储位置和它的关键字之间建立一个确定的对应关系f。使得每个关键字 key 对应一个存储位置 f(key)。查找时，根据这个确定的对应关系找到给定值 key 的映射 f(key)，若查找集合中存在这个记录，则在 f(key) 的位置。</p>\n<p>这种对应关系 f 称为散列函数，也叫哈希函数。采用散列技术存储记录的连续存储空间称为散列表或哈希表。关键字对应的记录存储位置称为散列地址。</p>\n<h5 id=\"8.9.2-查找步骤\">8.9.2 查找步骤<a title=\"#8.9.2-查找步骤\" href=\"#8.9.2-查找步骤\"></a></h5>\n<p>在存储和查找时，通过散列函数计算记录的散列地址，按照该地址存储或访问该记录。散列技术既是一种存储方法，也是一种查找方法。</p>\n<p>散列技术的记录之间不存在逻辑关系，只与关键字有关，因此，散列主要是面向查找的存储结构。</p>\n<p>冲突： 两个关键字不相等，地址相等，称为冲突，并把这两个关键字称为这个散列函数的同义词。</p>\n<h4 id=\"8.10-散列函数的构造方法\">8.10 散列函数的构造方法<a title=\"#8.10-散列函数的构造方法\" href=\"#8.10-散列函数的构造方法\"></a></h4>\n<ol>\n<li>\n<p>计算简单</p>\n<p>计算时间不应超过其他查找技术与关键字比较的时间。</p>\n</li>\n<li>\n<p>散列地址分布均匀</p>\n<p>可以保证存储空间的有效利用，并减少为处理冲突而耗费的时间。</p>\n</li>\n</ol>\n<h4 id=\"8.11-实现-todo\">8.11 实现 todo<a title=\"#8.11-实现-todo\" href=\"#8.11-实现-todo\"></a></h4>\n<hr>\n<h3 id=\"第九章-排序\">第九章 排序<a title=\"#第九章-排序\" href=\"#第九章-排序\"></a></h3>\n<h4 id=\"9.2-基本概念与分类\">9.2 基本概念与分类<a title=\"#9.2-基本概念与分类\" href=\"#9.2-基本概念与分类\"></a></h4>\n<h5 id=\"9.2.1-排序的稳定性\">9.2.1 排序的稳定性<a title=\"#9.2.1-排序的稳定性\" href=\"#9.2.1-排序的稳定性\"></a></h5>\n<p>如果两个记录相等，排序后位置不变，则是稳定的，否则称所用的排序方法是不稳定的。</p>\n<h5 id=\"9.2.3-内排序与外排序\">9.2.3 内排序与外排序<a title=\"#9.2.3-内排序与外排序\" href=\"#9.2.3-内排序与外排序\"></a></h5>\n<p>根据排序过程中待排序的记录是否全部被放置在内存中，排序分为内排序和外排序。</p>\n<p>外排序是由于排序的记录个数太多，不能同时放置在内存，整个排序过程需要在内外存之间多次交换数据才能进行。</p>\n<p>对于内排序来说，排序算法的性能受三个方面影响：</p>\n<ol>\n<li>时间性能</li>\n<li>辅助空间</li>\n<li>算法的复杂度</li>\n</ol>\n<h4 id=\"9.3-冒泡排序\">9.3 冒泡排序<a title=\"#9.3-冒泡排序\" href=\"#9.3-冒泡排序\"></a></h4>\n<ul>\n<li>\n<p>基本思想: 两两比较，反序则交换，直到没有反序的记录为止。</p>\n</li>\n<li>\n<p>时间复杂度: O(n^2)</p>\n</li>\n</ul>\n<h5 id=\"9.3.1-冒泡排序算法\">9.3.1 冒泡排序算法<a title=\"#9.3.1-冒泡排序算法\" href=\"#9.3.1-冒泡排序算法\"></a></h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubble</span> (<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = array.length</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!len) <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i &lt; len;i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = len<span class=\"number\">-1</span>;j &gt; i;j--)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (array[j<span class=\"number\">-1</span>] &gt; array[j]) &#123;</span><br><span class=\"line\">        swap(array, j<span class=\"number\">-1</span>, j)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"9.3.2-优化版\">9.3.2 优化版<a title=\"#9.3.2-优化版\" href=\"#9.3.2-优化版\"></a></h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubblePlus</span> (<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> len = array.length</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!len) <span class=\"keyword\">return</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> flag = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i &lt; len &amp;&amp; flag;i++) &#123;</span><br><span class=\"line\">    flag = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = len<span class=\"number\">-1</span>;j &gt; i;j--)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (array[j<span class=\"number\">-1</span>] &gt; array[j]) &#123;</span><br><span class=\"line\">        swap(array, j<span class=\"number\">-1</span>, j)</span><br><span class=\"line\">        flag = <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"9.4-简单选择排序\">9.4 简单选择排序<a title=\"#9.4-简单选择排序\" href=\"#9.4-简单选择排序\"></a></h4>\n<ul>\n<li>基本思想: 通过n-1次关键词的比较，从n-i+1个关键字中找到最小的关键字并和第i个关键字交换。</li>\n<li>时间复杂度: O(n^2)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">select</span> (<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = array.length</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!len) <span class=\"keyword\">return</span> array</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i &lt; len;i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temp = i</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i; j &lt; len;j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (array[j] &lt; array[temp]) temp = j</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (temp !== i) swap(array, temp, i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"9.5-直接插入排序\">9.5 直接插入排序<a title=\"#9.5-直接插入排序\" href=\"#9.5-直接插入排序\"></a></h4>\n<ul>\n<li>基本思想: 将一个记录插入到已经排好序的有序表中，从而得到一个新的记录加一的有序表。</li>\n<li>时间复杂度: O(n^2)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insert</span> (<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = array.length</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!len) <span class=\"keyword\">return</span> array</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i; array[j] &lt; array[j<span class=\"number\">-1</span>] &amp;&amp; j &gt; <span class=\"number\">-1</span>; j--) &#123;</span><br><span class=\"line\">      swap(array, j, j<span class=\"number\">-1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"9.6-希尔排序\">9.6 希尔排序<a title=\"#9.6-希尔排序\" href=\"#9.6-希尔排序\"></a></h4>\n<ul>\n<li>基本思想: 也称递减增量排序算法，是插入排序的一种更高效的改进版本,希尔排序是非稳定排序算法。希尔排序的基本思想是先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录&quot;基本有序&quot;时，再对全体记录进行依次直接插入排序。</li>\n<li>时间复杂度: 优于O(n^2)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shell</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length,</span><br><span class=\"line\">        gap = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(gap &lt; len/<span class=\"number\">3</span>) &#123; <span class=\"comment\">// 动态获取增量</span></span><br><span class=\"line\">        gap = gap * <span class=\"number\">3</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (gap; gap &gt; <span class=\"number\">0</span>; gap = <span class=\"built_in\">Math</span>.floor(gap/<span class=\"number\">3</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = gap; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">let</span> temp = arr[i];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i-gap; j &gt;= <span class=\"number\">0</span> &amp;&amp; arr[j] &gt; temp; j-=gap) &#123;</span><br><span class=\"line\">                arr[j+gap] = arr[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j+gap] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"9.7-堆排序\">9.7 堆排序<a title=\"#9.7-堆排序\" href=\"#9.7-堆排序\"></a></h4>\n<ul>\n<li>时间复杂度: O(nlogn)</li>\n</ul>\n<h4 id=\"9.8-归并排序\">9.8 归并排序<a title=\"#9.8-归并排序\" href=\"#9.8-归并排序\"></a></h4>\n<ul>\n<li>原理: 假设初始序列含有 n 个记录。则可以看成是n个有序的子序列，每个子序列的长度为1，然后两两归并，得到 n/2 个长度为 2 或者 1 的有序子序列，再两两归并，直到得到一个长度为n的有序序列为止。这种排序方法称为2路归并排序。</li>\n</ul>\n<h5 id=\"9.8.1-递归实现\">9.8.1 递归实现<a title=\"#9.8.1-递归实现\" href=\"#9.8.1-递归实现\"></a></h5>\n<ul>\n<li>时间复杂度: O(nlogn)</li>\n<li>空间复杂度: O(n+nlogn)</li>\n</ul>\n<h5 id=\"9.8.1-非递归实现\">9.8.1 非递归实现<a title=\"#9.8.1-非递归实现\" href=\"#9.8.1-非递归实现\"></a></h5>\n<ul>\n<li>空间复杂度: O(n)</li>\n</ul>\n<h4 id=\"9.9-快速排序\">9.9 快速排序<a title=\"#9.9-快速排序\" href=\"#9.9-快速排序\"></a></h4>\n<ul>\n<li>时间复杂度: O(nlogn)</li>\n<li>空间复杂度: O(logn)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quick</span> (<span class=\"params\">array, start, end</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (start &lt; end) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> piovt = getPiovt(array, start, end)</span><br><span class=\"line\">    quick(array, start, piovt<span class=\"number\">-1</span>)</span><br><span class=\"line\">    quick(array, piovt+<span class=\"number\">1</span>, end)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPiovt</span>(<span class=\"params\">array, i, j</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> piovt = array[i]</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; array[j] &gt;= piovt) &#123;</span><br><span class=\"line\">      j--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    array[i] = array[j]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; array[i] &lt;= piovt) &#123;</span><br><span class=\"line\">      i++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    array[j] = array[i]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  array[i] = piovt</span><br><span class=\"line\">  <span class=\"keyword\">return</span> i</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"9.9.2-优化\">9.9.2 优化<a title=\"#9.9.2-优化\" href=\"#9.9.2-优化\"></a></h5>\n<ol>\n<li>三数取中法</li>\n</ol>\n<p>![image-20200724120846447](/Users/mac/Library/Application Support/typora-user-images/image-20200724120846447.png)</p>\n<ol start=\"2\">\n<li>不必要的交换</li>\n</ol>\n","prev":{"title":"每天一个 iterm2 小技巧","link":"2021/05/21/每天一个iterm2小技巧"},"next":{"title":"啊哈！ 算法","link":"2021/05/21/啊哈算法"},"plink":"http://qiuxiaori.github.com/2021/05/21/大话数据结构/","toc":[{"id":"第一章-绪论","title":"第一章 绪论","index":"1","children":[{"id":"1.4-概念和术语","title":"1.4 概念和术语","index":"1.1"},{"id":"1.5-逻辑结构与物理结构","title":"1.5 逻辑结构与物理结构","index":"1.2"},{"id":"1.6-抽象数据类型","title":"1.6 抽象数据类型","index":"1.3"}]},{"id":"第二章-算法","title":"第二章 算法","index":"2","children":[{"id":"2.4-算法定义","title":"2.4 算法定义","index":"2.1"},{"id":"2.5-算法的特性","title":"2.5 算法的特性","index":"2.2"},{"id":"2.6-算法设计的要求","title":"2.6 算法设计的要求","index":"2.3"},{"id":"2.7-算法效率的度量方法","title":"2.7 算法效率的度量方法","index":"2.4"},{"id":"2.8-函数的渐近增长","title":"2.8 函数的渐近增长","index":"2.5"},{"id":"2.9-算法时间复杂度","title":"2.9 算法时间复杂度","index":"2.6"},{"id":"2.10-常见的时间复杂度","title":"2.10 常见的时间复杂度","index":"2.7"},{"id":"2.12-算法空间复杂度","title":"2.12 算法空间复杂度","index":"2.8"}]},{"id":"第三章-线性表-list","title":"第三章 线性表 List","index":"3","children":[{"id":"3.3-线性表的抽象数据类型","title":"3.3 线性表的抽象数据类型","index":"3.1"},{"id":"3.4-线性表的顺序存储结构","title":"3.4 线性表的顺序存储结构","index":"3.2"},{"id":"3.5-顺序存储结构的插入与删除","title":"3.5 顺序存储结构的插入与删除","index":"3.3"},{"id":"3.6-线性表的链式存储结构","title":"3.6 线性表的链式存储结构","index":"3.4"},{"id":"3.7-单链表的读取","title":"3.7 单链表的读取","index":"3.5"},{"id":"3.8-单链表的插入和删除","title":"3.8 单链表的插入和删除","index":"3.6"},{"id":"3.12-静态链表","title":"3.12 静态链表","index":"3.7"},{"id":"3.13-循环链表","title":"3.13 循环链表","index":"3.8"},{"id":"3.14-双向链表","title":"3.14 双向链表","index":"3.9"}]},{"id":"第四章-栈与队列","title":"第四章 栈与队列","index":"4","children":[{"id":"4.2-栈的定义","title":"4.2 栈的定义","index":"4.1"},{"id":"4.3-栈的抽象数据类型","title":"4.3 栈的抽象数据类型","index":"4.2"},{"id":"4.4-栈的顺序存储结构","title":"4.4 栈的顺序存储结构","index":"4.3"},{"id":"4.5-两栈共享空间","title":"4.5 两栈共享空间","index":"4.4"},{"id":"4.6-栈的链式存储结构","title":"4.6 栈的链式存储结构","index":"4.5"},{"id":"4.10-队列","title":"4.10 队列","index":"4.6"},{"id":"4.11-循环队列","title":"4.11 循环队列","index":"4.7"},{"id":"4.12-队列的链式存储结构","title":"4.12 队列的链式存储结构","index":"4.8"}]},{"id":"第五章-串","title":"第五章 串","index":"5","children":[{"id":"5.2-串的定义","title":"5.2 串的定义","index":"5.1"},{"id":"5.3-串的比较","title":"5.3 串的比较","index":"5.2"},{"id":"5.4-串的抽象数据类型","title":"5.4 串的抽象数据类型","index":"5.3"},{"id":"5.5-顺序存储和链式存储","title":"5.5 顺序存储和链式存储","index":"5.4"},{"id":"5.6-朴素的模式匹配算法","title":"5.6 朴素的模式匹配算法","index":"5.5"},{"id":"5.7-kmp-模式匹配算法","title":"5.7 KMP 模式匹配算法","index":"5.6"}]},{"id":"第六章-树","title":"第六章 树","index":"6","children":[{"id":"6.2-树的定义","title":"6.2 树的定义","index":"6.1"},{"id":"6.3-树的抽象数据类型","title":"6.3 树的抽象数据类型","index":"6.2"},{"id":"6.4-树的存储结构","title":"6.4 树的存储结构","index":"6.3"},{"id":"6.5-二叉树","title":"6.5 二叉树","index":"6.4"},{"id":"6.6-二叉树的性质","title":"6.6 二叉树的性质","index":"6.5"},{"id":"6.7-二叉树的存储结构","title":"6.7 二叉树的存储结构","index":"6.6"},{"id":"6.8-遍历二叉树","title":"6.8 遍历二叉树","index":"6.7"},{"id":"6.9-二叉树的建立","title":"6.9 二叉树的建立","index":"6.8"},{"id":"6.10-哈夫曼树","title":"6.10 哈夫曼树","index":"6.9"}]},{"id":"第七章-图","title":"第七章 图","index":"7","children":[{"id":"7.2-图的定义","title":"7.2 图的定义","index":"7.1"}]},{"id":"第八章-查找","title":"第八章 查找","index":"8","children":[{"id":"8.2-概论","title":"8.2 概论","index":"8.1"},{"id":"8.3-顺序表查找","title":"8.3 顺序表查找","index":"8.2"},{"id":"8.4-有序表查找","title":"8.4 有序表查找","index":"8.3"},{"id":"8.5-线性索引查找","title":"8.5 线性索引查找","index":"8.4"},{"id":"8.6-二叉排序树","title":"8.6 二叉排序树","index":"8.5"},{"id":"8.7-平衡二叉树(avl树)","title":"8.7 平衡二叉树(AVL树)","index":"8.6"},{"id":"8.8-多路查找树","title":"8.8 多路查找树","index":"8.7"},{"id":"8.9-散列表查找(哈希表)概述","title":"8.9 散列表查找(哈希表)概述","index":"8.8"},{"id":"8.10-散列函数的构造方法","title":"8.10 散列函数的构造方法","index":"8.9"},{"id":"8.11-实现-todo","title":"8.11 实现 todo","index":"8.10"}]},{"id":"第九章-排序","title":"第九章 排序","index":"9","children":[{"id":"9.2-基本概念与分类","title":"9.2 基本概念与分类","index":"9.1"},{"id":"9.3-冒泡排序","title":"9.3 冒泡排序","index":"9.2"},{"id":"9.4-简单选择排序","title":"9.4 简单选择排序","index":"9.3"},{"id":"9.5-直接插入排序","title":"9.5 直接插入排序","index":"9.4"},{"id":"9.6-希尔排序","title":"9.6 希尔排序","index":"9.5"},{"id":"9.7-堆排序","title":"9.7 堆排序","index":"9.6"},{"id":"9.8-归并排序","title":"9.8 归并排序","index":"9.7"},{"id":"9.9-快速排序","title":"9.9 快速排序","index":"9.8"}]}],"copyright":{"author":"Qiu Xiaori","license":"自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0)","link":"<a href=\"http://qiuxiaori.github.com/2021/05/21/大话数据结构/\" title=\"大话数据结构\">http://qiuxiaori.github.com/2021/05/21/大话数据结构/</a>"}}