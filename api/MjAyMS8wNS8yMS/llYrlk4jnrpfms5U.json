{"title":"啊哈！ 算法","date":"2021-05-21T09:32:50.656Z","date_formatted":{"ll":"May 21, 2021","L":"05/21/2021","MM-DD":"05-21"},"link":"2021/05/21/啊哈算法","tags":["数据结构与算法"],"categories":["编程技术"],"updated":"2021-05-21T09:32:50.656Z","content":"<h3 id=\"第一章-排序\">第一章 排序<a title=\"#第一章-排序\" href=\"#第一章-排序\"></a></h3>\n<h4 id=\"1.0-交换算法\">1.0 交换算法<a title=\"#1.0-交换算法\" href=\"#1.0-交换算法\"></a></h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span> (<span class=\"params\">array, i, j</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> temp = array[i]</span><br><span class=\"line\">    array[i] = array[j]</span><br><span class=\"line\">    array[j] = temp</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1.1-最快最简单的排序——桶排序\">1.1 最快最简单的排序——桶排序<a title=\"#1.1-最快最简单的排序——桶排序\" href=\"#1.1-最快最简单的排序——桶排序\"></a></h4>\n<ul>\n<li>时间复杂度:  O(M+N)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> bucket = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> nums = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; array.length; i ++) &#123;</span><br><span class=\"line\">    nums[array[i]]++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">9</span>; j &gt; <span class=\"number\">-1</span>; j --) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums[j]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> k = <span class=\"number\">0</span>; k &lt; nums[j]; k ++) <span class=\"built_in\">console</span>.log(j)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1.2-冒泡排序\">1.2 冒泡排序<a title=\"#1.2-冒泡排序\" href=\"#1.2-冒泡排序\"></a></h4>\n<ul>\n<li>基本思想:每次比较两个相邻的元素，如果它们的顺序错误就把它们交换过来。</li>\n<li>时间复杂度:  O(N^2)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> bubble = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> len = array.length</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> array</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>;i &lt; len;i ++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">1</span>; j &lt; len - i + <span class=\"number\">1</span>; j ++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (array[j<span class=\"number\">-1</span>] &gt; array[j]) &#123;</span><br><span class=\"line\">                swap(array, j, j - <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1.3-快速排序\">1.3 快速排序<a title=\"#1.3-快速排序\" href=\"#1.3-快速排序\"></a></h4>\n<ul>\n<li>时间复杂度:  O(NlogN)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> quick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">array, start, end</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end) <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> poivtIndex = getPoivtIndex(array, start, end)</span><br><span class=\"line\">    quick(array, start, poivtIndex - <span class=\"number\">1</span>)</span><br><span class=\"line\">    quick(array, poivtIndex + <span class=\"number\">1</span>, end)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取基准数排序后的下标</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getPoivtIndex = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">array, start, end</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> poivt = start</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (start &lt; end &amp;&amp; array[end] &gt; array[poivt]) &#123;</span><br><span class=\"line\">            end --</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (start &lt; end &amp;&amp; array[start] &lt;= array[poivt]) &#123;</span><br><span class=\"line\">            start ++</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start !== end) swap(array, start, end)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start !== poivt) swap(array, poivt, start)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> start</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1.4-小哼买书-（去重排序\">1.4 小哼买书 （去重排序<a title=\"#1.4-小哼买书-（去重排序\" href=\"#1.4-小哼买书-（去重排序\"></a></h4>\n<ol>\n<li>先去重 再排序</li>\n<li>先排序 输出时再去重（判断与前一个数是否相同即可</li>\n</ol>\n","prev":{"title":"代码备份","link":"2021/05/21/代码备份"},"next":{"title":"大话数据结构","link":"2021/05/21/大话数据结构"},"plink":"http://qiuxiaori.github.com/2021/05/21/啊哈算法/","toc":[{"id":"第一章-排序","title":"第一章 排序","index":"1","children":[{"id":"1.0-交换算法","title":"1.0 交换算法","index":"1.1"},{"id":"1.1-最快最简单的排序——桶排序","title":"1.1 最快最简单的排序——桶排序","index":"1.2"},{"id":"1.2-冒泡排序","title":"1.2 冒泡排序","index":"1.3"},{"id":"1.3-快速排序","title":"1.3 快速排序","index":"1.4"},{"id":"1.4-小哼买书-（去重排序","title":"1.4 小哼买书 （去重排序","index":"1.5"}]}],"copyright":{"author":"Qiu Xiaori","license":"自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0)","link":"<a href=\"http://qiuxiaori.github.com/2021/05/21/啊哈算法/\" title=\"啊哈！ 算法\">http://qiuxiaori.github.com/2021/05/21/啊哈算法/</a>"}}