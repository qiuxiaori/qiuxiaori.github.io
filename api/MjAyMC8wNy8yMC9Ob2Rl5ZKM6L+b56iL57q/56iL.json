{"title":"Node和进程线程","date":"2020-07-20T07:05:18.547Z","date_formatted":{"ll":"Jul 20, 2020","L":"07/20/2020","MM-DD":"07-20"},"link":"2020/07/20/Node和进程线程","tags":["node"],"categories":["编程技术"],"updated":"2020-07-20T07:05:18.547Z","content":"<p>公司分享会的内容，随手记</p>\n<a id=\"more\"></a>\n<h3 id=\"一.进程和线程\">一.进程和线程<a title=\"#一.进程和线程\" href=\"#一.进程和线程\"></a></h3>\n<ol>\n<li>\n<p>进程是资源调度的单位<br>\nNode内置方法：process.pid 获取当前进程id<br>\n查看时会得到v8引擎创建的多个线程<br>\nv8引擎会把js代码编译成高效的机器码，创建多个线程，主线程获取代码，编译成机器码，有处理垃圾回收的线程，负责优化的线程</p>\n</li>\n<li>\n<p>线程是运算调度的单位<br>\n进程包含线程，线程不能脱离进程，轻型实体不占用资源，只需要一些保证独立执行的资源，程序和数据，独立调度和分派的独立单元，可并发执行</p>\n</li>\n</ol>\n<ul>\n<li>线程的状态<br>\n新生<br>\n就绪<br>\n运行<br>\n死亡<br>\n阻塞</li>\n</ul>\n<ol start=\"3\">\n<li>二者的区别</li>\n</ol>\n<div class=\"φcy\"><div class=\"φda\"><table><thead>\n<tr>\n<th style=\"padding:0\"></th>\n<th>进程</th>\n<th>线程</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>根本区别</td>\n<td>操作系统资源分配的基本单位</td>\n<td>任务调度和执行的基本单位</td>\n</tr>\n<tr>\n<td>通信方面</td>\n<td>通信IPC</td>\n<td>通信直接读取进程数据段通信</td>\n</tr>\n<tr>\n<td>包含关系</td>\n<td>进程包含线程</td>\n<td>线程不能脱离进程</td>\n</tr>\n<tr>\n<td>开销</td>\n<td>拥有独立的代码块，切换开销大</td>\n<td></td>\n</tr>\n</tbody>\n</table></div></div><h3 id=\"node的多进程\">node的多进程<a title=\"#node的多进程\" href=\"#node的多进程\"></a></h3>\n<ol>\n<li>child_process```js<br>\n// 创建一个子进程<br>\nspawn(command,args,option)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">* exec() 方法</span><br><span class=\"line\">child_process.exec 使用子进程执行命令，缓存子进程的输出，并将子进程的输出以回调函数参数的形式返回。exec() 方法返回最大的缓冲区，并等待进程结束，一次性返回缓冲区的内容。&#96;&#96;&#96;js</span><br><span class=\"line\">child_process.exec(command[, options], callback)</span><br><span class=\"line\">&#x2F;&#x2F; 参数说明</span><br><span class=\"line\">command： 字符串， 将要运行的命令，参数使用空格隔开</span><br><span class=\"line\">options ：对象，可以是：</span><br><span class=\"line\">cwd ，字符串，子进程的当前工作目录</span><br><span class=\"line\">env，对象 环境变量键值对</span><br><span class=\"line\">encoding ，字符串，字符编码（默认： &#39;utf8&#39;）</span><br><span class=\"line\">shell ，字符串，将要执行命令的 Shell（默认: 在 UNIX 中为&#x2F;bin&#x2F;sh， 在 Windows 中为cmd.exe， Shell 应当能识别 -c开关在 UNIX 中，或 &#x2F;s &#x2F;c 在 Windows 中。 在Windows 中，命令行解析应当能兼容cmd.exe）</span><br><span class=\"line\">timeout，数字，超时时间（默认： 0）</span><br><span class=\"line\">maxBuffer，数字， 在 stdout 或 stderr 中允许存在的最大缓冲（二进制），如果超出那么子进程将会被杀死 （默认: 200*1024）</span><br><span class=\"line\">killSignal ，字符串，结束信号（默认：&#39;SIGTERM&#39;）</span><br><span class=\"line\">uid，数字，设置用户进程的 ID</span><br><span class=\"line\">gid，数字，设置进程组的 ID</span><br><span class=\"line\">callback ：回调函数，包含三个参数error, stdout 和 stderr。</span><br></pre></td></tr></table></figure>\n<ul>\n<li>spawn() 方法<br>\nchild_process.spawn 使用指定的命令行参数创建新进程.```js<br>\nchild_process.spawn(command[, args][, options])<br>\n// 参数说明<br>\ncommand： 将要运行的命令<br>\nargs： Array 字符串参数数组<br>\noptions Object<br>\ncwd String 子进程的当前工作目录<br>\nenv Object 环境变量键值对<br>\nstdio Array|String 子进程的 stdio 配置<br>\ndetached Boolean 这个子进程将会变成进程组的领导<br>\nuid Number 设置用户进程的 ID<br>\ngid Number 设置进程组的 ID<br>\nspawn() 方法返回流 (stdout &amp; stderr)，在进程返回大量数据时使用。进程一旦开始执行时 spawn() 就开始接收响应。</li>\n</ul>\n<pre><code>fork 方法\nchild_process.fork 是 spawn() 方法的特殊形式，用于创建进程\n`child_process.fork(modulePath[, args][, options])`\n参数\n参数说明如下：\nmodulePath： String，将要在子进程中运行的模块\nargs： Array 字符串参数数组\noptions：Object\ncwd String 子进程的当前工作目录\nenv Object 环境变量键值对\nexecPath String 创建子进程的可执行文件\nexecArgv Array 子进程的可执行文件的字符串参数数组（默认： process.execArgv）\nsilent Boolean 如果为true，子进程的stdin，stdout和stderr将会被关联至父进程，否则，它们将会从父进程中继承。（默认为：false）\nuid Number 设置用户进程的 ID\ngid Number 设置进程组的 ID\n返回的对象除了拥有ChildProcess实例的所有方法，还有一个内建的通信信道。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n</code></pre>\n","prev":{"title":"Inside主题配置","link":"2020/07/20/Inside主题"},"next":{"title":"Docker实战","link":"2020/07/20/Docker实战"},"plink":"http://qiuxiaori.github.com/2020/07/20/Node和进程线程/","toc":[{"id":"一.进程和线程","title":"一.进程和线程","index":"1"},{"id":"node的多进程","title":"node的多进程","index":"2"}],"copyright":{"author":"Qiu Xiaori","license":"自由转载-非商用-禁止演绎-保持署名（CC BY-NC-ND 4.0)","link":"<a href=\"http://qiuxiaori.github.com/2020/07/20/Node和进程线程/\" title=\"Node和进程线程\">http://qiuxiaori.github.com/2020/07/20/Node和进程线程/</a>"}}