<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qiu Xiaori</title>
  
  <subtitle>Some birds don’t mean to be caged . Their feathers are just too bright. And when they fly away, the part of you that knows it was a sin to lock them up.</subtitle>
  <link href="http://qiuxiaori.github.com/atmo.xml" rel="self"/>
  
  <link href="http://qiuxiaori.github.com/"/>
  <updated>2020-11-10T03:03:31.445Z</updated>
  <id>http://qiuxiaori.github.com/</id>
  
  <author>
    <name>Qiu Xiaori</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每天一个 iterm2 小技巧</title>
    <link href="http://qiuxiaori.github.com/2020/11/10/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAiterm2%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://qiuxiaori.github.com/2020/11/10/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAiterm2%E5%B0%8F%E6%8A%80%E5%B7%A7/</id>
    <published>2020-11-10T03:03:31.445Z</published>
    <updated>2020-11-10T03:03:31.445Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>iterm2 快捷键！ &amp; 有趣的小玩意儿</p></blockquote><!--readmore--><h3 id="一.-快捷键">一. 快捷键<a title="#一.-快捷键" href="#一.-快捷键"></a></h3><h5 id="tab">Tab<a title="#tab" href="#tab"></a></h5><ul><li>command + 数字: 切换到指定tab</li><li>command + &lt;-/-&gt;: 切换左右tab</li></ul><h5 id="pane">Pane<a title="#pane" href="#pane"></a></h5><ul><li>command + d: 垂直切分 pane</li><li>command + shift + d: 水平切分 pane</li><li>command + shift + 上/下/左/右: 切换当前 tab 的 pane</li><li>command + shift + enter: 全屏显示单个pane，再次按下取消全屏</li></ul><h5 id="iterm">iterm<a title="#iterm" href="#iterm"></a></h5><ul><li>command + enter: iterm全屏，再次按下取消全屏</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;iterm2 快捷键！ &amp;amp; 有趣的小玩意儿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--readmore--&gt;
&lt;h3 id=&quot;一.-快捷键&quot;&gt;一. 快捷键&lt;a title=&quot;#一.-快捷键&quot; href=&quot;#一.-快捷键&quot;&gt;&lt;/a&gt;&lt;/h3</summary>
      
    
    
    
    <category term="编程技术" scheme="http://qiuxiaori.github.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="iterm2" scheme="http://qiuxiaori.github.com/tags/iterm2/"/>
    
  </entry>
  
  <entry>
    <title>ORM简记</title>
    <link href="http://qiuxiaori.github.com/2020/11/09/ORM/"/>
    <id>http://qiuxiaori.github.com/2020/11/09/ORM/</id>
    <published>2020-11-09T02:07:56.810Z</published>
    <updated>2020-11-09T08:32:30.445Z</updated>
    
    <content type="html"><![CDATA[<!--readmore--><h3 id="一.-概述">一. 概述<a title="#一.-概述" href="#一.-概述"></a></h3><p>ORM 是通过实例对象的语法，完成关系型数据库的操作的技术，是&quot;对象-关系映射&quot;（Object/Relational Mapping） 的缩写。</p><h5 id="对应关系">对应关系<a title="#对应关系" href="#对应关系"></a></h5><div class="φcy"><div class="φda"><table><thead><tr><th style="text-align:left">数据库</th><th style="text-align:left">对象</th></tr></thead><tbody><tr><td style="text-align:left">数据库的表（table）</td><td style="text-align:left">类（class)</td></tr><tr><td style="text-align:left">记录（record，行数据</td><td style="text-align:left">对象（object）</td></tr><tr><td style="text-align:left">字段（field）</td><td style="text-align:left">对象的属性（attribute）</td></tr></tbody></table></div></div><h5 id="例">例<a title="#例" href="#例"></a></h5><ul><li>一行 SQL 语句</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT id, first_name, last_name, phone, birth_date, sex</span><br><span class="line"> FROM persons </span><br><span class="line"> WHERE id &#x3D; 10</span><br></pre></td></tr></table></figure><ul><li>程序直接运行 SQL，操作数据库的写法如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res &#x3D; db.execSql(sql);</span><br><span class="line">name &#x3D; res[0][&quot;FIRST_NAME&quot;];</span><br></pre></td></tr></table></figure><ul><li>改成 ORM 的写法如下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p &#x3D; Person.get(10);</span><br><span class="line">name &#x3D; p.first_name;</span><br></pre></td></tr></table></figure><h3 id="二.-优缺点">二. 优缺点<a title="#二.-优缺点" href="#二.-优缺点"></a></h3><h5 id="优点">优点<a title="#优点" href="#优点"></a></h5><ol><li>数据模型都在一个地方定义，更容易更新和维护，也利于重用代码。</li><li>ORM 有现成的工具，很多功能都可以自动完成，比如数据消毒、预处理、事务等等。</li><li>它迫使你使用 MVC 架构，ORM 就是天然的 Model，最终使代码更清晰。</li><li>基于 ORM 的业务代码比较简单，代码量少，语义性好，容易理解。</li><li>你不必编写性能不佳的 SQL。</li></ol><h5 id="缺点">缺点<a title="#缺点" href="#缺点"></a></h5><ol><li>ORM 库不是轻量级工具，需要花很多精力学习和设置。</li><li>对于复杂的查询，ORM 要么是无法表达，要么是性能不如原生的 SQL。</li><li>ORM 抽象掉了数据库层，开发者无法了解底层的数据库操作，也无法定制一些特殊的 SQL。</li></ol><h3 id="三.-命名规范">三. 命名规范<a title="#三.-命名规范" href="#三.-命名规范"></a></h3><ol><li>一个类对应一张表。类名是单数，且首字母大写；表名是复数，且全部是小写。比如，表books对应类Book。</li><li>如果名字是不规则复数，则类名依照英语习惯命名，比如，表mice对应类Mouse，表people对应类Person。</li><li>如果名字包含多个单词，那么类名使用首字母全部大写的骆驼拼写法，而表名使用下划线分隔的小写单词。比如，表book_clubs对应类BookClub，表line_items对应类LineItem。</li><li>每个表都必须有一个主键字段，通常是叫做id的整数字段。外键字段名约定为单数的表名 + 下划线 + id，比如item_id表示该字段对应items表的id字段。</li></ol><h3 id="四.-node.js-orm-框架">四. Node.js orm 框架<a title="#四.-node.js-orm-框架" href="#四.-node.js-orm-框架"></a></h3><h5 id="mongoose">Mongoose<a title="#mongoose" href="#mongoose"></a></h5><p>目前比较常见的 MongoDB ORM 框架，官方说法是 ODM 框架，可见对关系型数据库支持一般</p><ul><li>官网：<a href="https://mongoosejs.com/" target="_blank" rel="noopener">https://mongoosejs.com/</a></li><li>数据库：仅支持 MongoDB</li><li>编程风格：</li><li><ul><li>支持 Promise/async/await</li></ul></li><li><ul><li>基于 JS 内置类型的 Schema 声明</li></ul></li><li><ul><li>基于链式构造的 Query Builder 查询</li></ul></li><li>周边技术：</li><li><ul><li>Typegoose<br><a href="https://www.npmjs.com/package/typegoose" target="_blank" rel="noopener">https://www.npmjs.com/package/typegoose</a><br>可以增加 TypeScript 支持，支持使用 Reflect Metadata 自动映射 TS 类型标注</li></ul></li></ul><h5 id="sequelize">Sequelize<a title="#sequelize" href="#sequelize"></a></h5><p>较老牌的 Node.js ORM 框架，相对简易</p><ul><li>官网：<a href="http://docs.sequelizejs.com/" target="_blank" rel="noopener">http://docs.sequelizejs.com/</a></li><li>数据库：支持关系型数据库（MySQL/MSSQL/PostgreSQL/SQLite）</li><li>编程风格：</li><li><ul><li>支持 Promise/async/await</li></ul></li><li><ul><li>基于自带的一套类型枚举声明</li></ul></li><li><ul><li>基于 JSON 对象的查询方式</li></ul></li><li><ul><li>基于自带的一套操作符描述</li></ul></li></ul><h5 id="bookshelf">Bookshelf<a title="#bookshelf" href="#bookshelf"></a></h5><p>Sequelize 之后出现的 ORM 框架，风格与 Sequelize 较相似，看上去比 Sequelize 易用性高</p><ul><li>官网：<a href="http://bookshelfjs.org/" target="_blank" rel="noopener">http://bookshelfjs.org/</a></li><li>数据库：支持关系型数据库</li><li>编程风格：</li><li><ul><li>基本上是 Eloquent ORM 的 JS 版本</li></ul></li><li><ul><li>支持 Promise/async/await</li></ul></li><li><ul><li>支持基于链式构造的 Query Builder 查询</li></ul></li></ul><h5 id="typeorm">TypeORM<a title="#typeorm" href="#typeorm"></a></h5><p>基于 Decorator 的 ORM 框架，对 TypeScript 支持较好，同时支持在 JavaScript 中通过手动声明使用，以及 JSON 方式的 Entity 配置声明</p><ul><li>官网：<a href="https://github.com/typeorm/typeorm/" target="_blank" rel="noopener">https://github.com/typeorm/typeorm/</a></li><li>数据库：支持关系型数据库，Beta 支持 MongoDB</li><li>编程风格：</li><li><ul><li>基本上是 Hibernate 的 JS 版本</li></ul></li><li><ul><li>支持 Promise/async/await</li></ul></li><li><ul><li>支持基于链式构造的 Query Builder 查询</li></ul></li><li><ul><li>支持 CLI 工具</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;!--readmore--&gt;
&lt;h3 id=&quot;一.-概述&quot;&gt;一. 概述&lt;a title=&quot;#一.-概述&quot; href=&quot;#一.-概述&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;ORM 是通过实例对象的语法，完成关系型数据库的操作的技术，是&amp;quot;对象-关系映射&amp;quot;（Object/R</summary>
      
    
    
    
    <category term="编程技术" scheme="http://qiuxiaori.github.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="orm" scheme="http://qiuxiaori.github.com/tags/orm/"/>
    
  </entry>
  
  <entry>
    <title>《我用什么才能留住你》博尔赫斯</title>
    <link href="http://qiuxiaori.github.com/2020/09/15/%E6%88%91%E7%94%A8%E4%BB%80%E4%B9%88%E6%89%8D%E8%83%BD%E7%95%99%E4%BD%8F%E4%BD%A0/"/>
    <id>http://qiuxiaori.github.com/2020/09/15/%E6%88%91%E7%94%A8%E4%BB%80%E4%B9%88%E6%89%8D%E8%83%BD%E7%95%99%E4%BD%8F%E4%BD%A0/</id>
    <published>2020-09-14T17:40:32.188Z</published>
    <updated>2020-09-14T17:40:32.188Z</updated>
    
    <content type="html"><![CDATA[<p>我用什么才能留住你？</p><p>我给你瘦落的街道、绝望的落日、荒郊的月亮。</p><p>我给你一个久久地望着孤月的人的悲哀。</p><p>我给你我已死去的祖辈，后人们用大理石祭奠的先魂：我父亲的父亲，阵亡于布宜诺斯艾利斯的边境，两颗子弹射穿了他的胸膛，死的时候蓄着胡子，尸体被士兵们用牛皮裹起；我母亲的祖父——那年才二十四岁——在秘鲁率领三百人冲锋，如今都成了消失的马背上的亡魂。</p><p>我给你我的书中所能蕴含的一切悟力，以及我生活中所能有的男子气概和幽默。</p><p>我给你一个从未有过信仰的人的忠诚。</p><p>我给你我设法保全的我自己的核心——不营字造句，不和梦交易，不被时间、欢乐和逆境触动的核心。</p><p>我给你早在你出生前多年的一个傍晚看到的一朵黄玫瑰的记忆。</p><p>我给你关于你生命的诠释，关于你自己的理论，你的真实而惊人的存在。</p><p>我给你我的寂寞、我的黑暗、我心的饥渴；我试图用困惑、危险、失败来打动你。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我用什么才能留住你？&lt;/p&gt;
&lt;p&gt;我给你瘦落的街道、绝望的落日、荒郊的月亮。&lt;/p&gt;
&lt;p&gt;我给你一个久久地望着孤月的人的悲哀。&lt;/p&gt;
&lt;p&gt;我给你我已死去的祖辈，后人们用大理石祭奠的先魂：我父亲的父亲，阵亡于布宜诺斯艾利斯的边境，两颗子弹射穿了他的胸膛，死的时候蓄着胡</summary>
      
    
    
    
    <category term="文学" scheme="http://qiuxiaori.github.com/categories/%E6%96%87%E5%AD%A6/"/>
    
    
    <category term="博尔赫斯" scheme="http://qiuxiaori.github.com/tags/%E5%8D%9A%E5%B0%94%E8%B5%AB%E6%96%AF/"/>
    
  </entry>
  
  <entry>
    <title>白苹果解决办法</title>
    <link href="http://qiuxiaori.github.com/2020/08/25/%E7%99%BD%E8%8B%B9%E6%9E%9C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://qiuxiaori.github.com/2020/08/25/%E7%99%BD%E8%8B%B9%E6%9E%9C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</id>
    <published>2020-08-25T11:29:53.402Z</published>
    <updated>2020-10-09T06:12:42.559Z</updated>
    
    <content type="html"><![CDATA[<h3 id="含义">含义<a title="#含义" href="#含义"></a></h3><p>白苹果是指iOS设备出现软硬件故障，卡在启动画面上的现象，一般多出现于越狱后插件冲突或系统bug。从专业角度说，白苹果主要是iPhone的系统启动之后，系统组件调用执行失败后导致系统界面无法出现。</p><h3 id="产生原因">产生原因<a title="#产生原因" href="#产生原因"></a></h3><p>常见的原因：</p><ul><li>软件与系统之间发生冲突导致系统无法正常载入。</li><li>开机启动项过多，软件与软件之间冲突也会造成白苹果。</li><li>系统启动调用组件失败。（可能由于组件被用户误删除，错误修改，权限设置错误等）</li></ul><h3 id="未越狱解决办法">未越狱解决办法<a title="#未越狱解决办法" href="#未越狱解决办法"></a></h3><p>未越狱的机器如果出现白苹果，基本上也就只能通过重刷固件来解决。</p><ol><li><p>需要可以传输文件的数据线，安装了最新的 iTunes 的电脑。</p></li><li><p>打开iTunes，将设备连接至电脑，出现白苹果时同时按下home键和侧边锁屏键直至白苹果消失出现 提示插入数据线恢复的界面来进入DFU模式。</p></li><li><p>iTunes 会自动检测到有问题的手机，提示你选择恢复或更新，选择恢复，并确认后续操作。</p></li><li><p>等待下载固件并安装即可。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;含义&quot;&gt;含义&lt;a title=&quot;#含义&quot; href=&quot;#含义&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;白苹果是指iOS设备出现软硬件故障，卡在启动画面上的现象，一般多出现于越狱后插件冲突或系统bug。从专业角度说，白苹果主要是iPhone的系统启动之后，系统组件调用执行失败后</summary>
      
    
    
    
    <category term="编程技术" scheme="http://qiuxiaori.github.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="iphone" scheme="http://qiuxiaori.github.com/tags/iphone/"/>
    
  </entry>
  
  <entry>
    <title>微博客</title>
    <link href="http://qiuxiaori.github.com/2020/08/13/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    <id>http://qiuxiaori.github.com/2020/08/13/%E7%A2%8E%E7%A2%8E%E5%BF%B5/</id>
    <published>2020-08-12T17:50:03.699Z</published>
    <updated>2020-08-12T17:50:03.700Z</updated>
    
    <content type="html"><![CDATA[<p>南方的梅雨天真凉快啊…</p><a id="more"></a><h4 id="顺风车">顺风车<a title="#顺风车" href="#顺风车"></a></h4><p>周末又找老文玩了，一心想感受一下顺风车上海到苏州的畅快<br>高高兴兴地约了周五的车<br>知道可能会堵车 不过堵的也不是很严重 出了上海就通畅了起来<br>不过对于我这种晕车人士 还是晕晕乎乎的难受<br>靠着车窗不舒服的眯到了苏州<br>！！第二天起床浑身骨头散了架一样！<br>再也不坐顺风车了 还没我高铁🚄舒服</p><h4 id="小朋友">小朋友<a title="#小朋友" href="#小朋友"></a></h4><p>老文奶奶日常给老文打电话<br>你家小朋友没来找你玩吗<br>老文疯狂掩饰 没有啊没有啊<br>这样是少了很多麻烦呢</p><p>小朋友 真好玩</p><h4 id="8.13">8.13<a title="#8.13" href="#8.13"></a></h4><p>不上班真爽啊<br>想怎么熬夜怎么熬夜<br>不过上班的时候也是一样熬</p><p>上班时候熬夜是觉得<br>只有下班后的时间是自己的</p><p>不上班之后<br>时间都是自己的<br>但还是熬<br>熬夜使人快乐</p><p>不上班没什么不好的<br>除了没有钱</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;南方的梅雨天真凉快啊…&lt;/p&gt;</summary>
    
    
    
    <category term="生活方式" scheme="http://qiuxiaori.github.com/categories/%E7%94%9F%E6%B4%BB%E6%96%B9%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Node深入浅出</title>
    <link href="http://qiuxiaori.github.com/2020/08/10/Node%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/"/>
    <id>http://qiuxiaori.github.com/2020/08/10/Node%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/</id>
    <published>2020-08-10T08:45:56.506Z</published>
    <updated>2020-08-10T16:44:23.141Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一.-什么是node">一. 什么是Node<a title="#一.-什么是node" href="#一.-什么是node"></a></h3><h5 id="node.js是一个运行环境">Node.js是一个运行环境<a title="#node.js是一个运行环境" href="#node.js是一个运行环境"></a></h5><p>**Node.js使用c++语言编写而成，是一个 javascript 语言运行环境。Node.js 采用了 Chrome 浏览器的 V8 引擎，性能很好，同时提供了很多系统级的 API。**浏览器端的 javascript 代码在运行时会收得到各种安全性的限制，对客户系统的操作有限，而 Node.js 是一个全面的后台运行时，为javascript 提供了其他语言能够实现的许多功能。</p><h5 id="node.js的特点">Node.js的特点<a title="#node.js的特点" href="#node.js的特点"></a></h5><ul><li>采用事件驱动,异步编程，为网络服务而设计</li><li>以单进程，单线程模式运行，<strong>事件驱动机制</strong>是Node.js通过内部单线程高效率的维护<strong>事件循环队列</strong>来实现的，没有多线程的资源占用和上下文切换开销。</li><li>支持的语言是 javascript。javascript的匿名函数和闭包特性非常适合事件驱动，异步编程。</li></ul><hr><h3 id="三.-模块机制">三. 模块机制<a title="#三.-模块机制" href="#三.-模块机制"></a></h3><h5 id="commonjs--规范">CommonJS  规范<a title="#commonjs--规范" href="#commonjs--规范"></a></h5><p>CommonJS规范的出现，目标是为了构建 Javascript 在包括Web服务器，桌面，命令行工具以及浏览器方面的生态系统。</p><p>CommonJS指定了解决这些问题的一些规范，而Node.js就是这些规范的一种实现。</p><p><strong>Node.js自身实现了 require 方法作为其引入模块的方法，同时 NPM 也基于 CommonJS 定义的包的规范，实现了依赖管理和模块自动安装等功能。</strong></p><h5 id="简单模块定义和使用">简单模块定义和使用<a title="#简单模块定义和使用" href="#简单模块定义和使用"></a></h5><ul><li>导出：如果模块返回的函数或变量不止一个，那它可以通过设定exports对象的属性来指明它们。但如果模块只返回一个函数或变量，则可以设定在module.exports属性。最终在程序里导出的是module.exports，exports只是对module.exports的一个全局引用，最初被定义为一个可以添加属性的空对象。所以exports.myFunc只是 module.exports.myFunc的简写。</li><li>引入：require(‘./fileName’)。如果模块是 个目录，Node通常会在这个目录下找一个叫index.js的文件作为模块的入口。</li></ul><h5 id="模块分类">模块分类<a title="#模块分类" href="#模块分类"></a></h5><ul><li>原生模块：在源代码编译的时候编译进了二进制执行文件，加载的速度最快。原生模块都被定义在lib这个目录下。</li><li>文件模块：动态加载，加载速度比原生模块慢。<ul><li>.js：通过fs模块同步读取js文件并编译执行</li><li>.node：通过c/c++进行编写的Addon，通过dlopen方法进行加载</li><li>.json：读取文件，调用JSON.parse解析加载</li></ul></li></ul><p>node对模块都进行了缓存，在第二次require时，不会有重复开销的。</p><h5 id="文件模块的加载">文件模块的加载<a title="#文件模块的加载" href="#文件模块的加载"></a></h5><p>加载文件模块的工作主要由原生模块module完成和实现，该模块在启动时已经被加载，进程直接调用到 runMain 静态方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Module.runMain = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  Module._load(process.argv[<span class="number">1</span>], <span class="literal">null</span>, ture)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_load 静态方法在分析文件名后执行实例化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = <span class="keyword">new</span> Module(id, parent)</span><br></pre></td></tr></table></figure><p>并根据文件路径缓存当前模块对象，该模块实例对象则根据文件名加载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.load(filename)</span><br></pre></td></tr></table></figure><p>require方法实际上调用的就是load方法，load方法在载入编译缓存了module后，返回module的exports对象。</p><h5 id="require方法中的文件查找策略">require方法中的文件查找策略<a title="#require方法中的文件查找策略" href="#require方法中的文件查找策略"></a></h5><p>文件模块缓存-&gt;原生模块-&gt;文件加载(逐层查找module path)-&gt;npm包</p><hr><h3 id="四.事件机制">四.事件机制<a title="#四.事件机制" href="#四.事件机制"></a></h3><p>基于v8引擎实现的事件驱动IO。</p><hr><h3 id="五.-异步i/o实现">五. 异步I/O实现<a title="#五.-异步i/o实现" href="#五.-异步i/o实现"></a></h3><h5 id="异步i/o">异步I/O<a title="#异步i/o" href="#异步i/o"></a></h5><p>在操作系统中，程序运行的空间分为内核空间和用户空间，我们提到的异步I/O，实质是用户空间的程序不用依赖内核空间中的I/O操作实际完成，即可进行后续任务。时间开销为m+n的两个任务会减小为max(m,n)</p><h5 id="必要性">必要性<a title="#必要性" href="#必要性"></a></h5><p>避免了多线程的资源占用和上下文切换的开销。</p><h5 id="理想的异步i/o模型">理想的异步I/O模型<a title="#理想的异步i/o模型" href="#理想的异步i/o模型"></a></h5><p>理想的模型是在应用程序发起异步调用而不需要进行轮训，进而处理下一个任务，只需要在I/O完成后通过信号或事回调将数据传递给应用程序。</p><ul><li>linux：libeio</li><li>windows：IOCP</li></ul><p>node提供了libuv来作为抽象封装层，平台判断在一层完成。node在编译期间会判断平台条件，选择性编译unix目录或事win目录下的源文件到目标程序中。</p><h5 id="node.js的异步i/o模型">Node.js的异步I/O模型<a title="#node.js的异步i/o模型" href="#node.js的异步i/o模型"></a></h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一.-什么是node&quot;&gt;一. 什么是Node&lt;a title=&quot;#一.-什么是node&quot; href=&quot;#一.-什么是node&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h5 id=&quot;node.js是一个运行环境&quot;&gt;Node.js是一个运行环境&lt;a title=&quot;#node.js是一</summary>
      
    
    
    
    <category term="编程技术" scheme="http://qiuxiaori.github.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="node" scheme="http://qiuxiaori.github.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>http学习</title>
    <link href="http://qiuxiaori.github.com/2020/08/04/http%E5%AD%A6%E4%B9%A0/"/>
    <id>http://qiuxiaori.github.com/2020/08/04/http%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-08-04T15:44:14.815Z</published>
    <updated>2020-08-07T09:49:15.803Z</updated>
    
    <content type="html"><![CDATA[<h3 id="六.-http首部">六. http首部<a title="#六.-http首部" href="#六.-http首部"></a></h3><h4 id="1.--http报文结构">1.  http报文结构<a title="#1.--http报文结构" href="#1.--http报文结构"></a></h4><h5 id="1.1-请求报文">1.1 请求报文<a title="#1.1-请求报文" href="#1.1-请求报文"></a></h5><ul><li>报文首部<ul><li>请求行: 请求方法 URL HTTP版本</li><li>首部字段: 请求/通用/实体 首部字段</li></ul></li><li>空行: CR + LF</li><li>报文主体</li></ul><h5 id="1.2-响应报文">1.2 响应报文<a title="#1.2-响应报文" href="#1.2-响应报文"></a></h5><ul><li>报文首部<ul><li>状态行: HTTP版本 状态码 描述信息</li><li>首部字段: 响应/通用/实体 首部字段</li></ul></li><li>空行:  CR + LF</li><li>报文主体</li></ul><h4 id="2.-首部字段概述">2. 首部字段概述<a title="#2.-首部字段概述" href="#2.-首部字段概述"></a></h4><h5 id="2.1-首部字段结构">2.1 首部字段结构<a title="#2.1-首部字段结构" href="#2.1-首部字段结构"></a></h5><p>由字段名和字段值构成，中间用冒号&quot;:&quot;分隔，字段值可以有多个。</p><p>当出现重复字段时，有些浏览器会优先处理第一次出现的有些相反。</p><h5 id="2.2-根据实际用途分类">2.2 根据实际用途分类<a title="#2.2-根据实际用途分类" href="#2.2-根据实际用途分类"></a></h5><ol><li>通用首部字段</li><li>请求首部字段: 补充了请求的附加容，客户端信息，响应内容优先级等信息。</li><li>响应首部字段: 补充了响应的附加内容，也会要求客户端附加额外的内容信息。</li><li>实体首部字段: 针对实体部分使用的首部，补充了资源内容更新时间等与实体有关的信息。</li></ol><h5 id="2.4-根据缓存代理和非缓存代理的行为分类">2.4 根据缓存代理和非缓存代理的行为分类<a title="#2.4-根据缓存代理和非缓存代理的行为分类" href="#2.4-根据缓存代理和非缓存代理的行为分类"></a></h5><ol><li><p>端到端首部(End-to-end Header)</p><p>分在此类别中的首部会转发给请求/响应对应的最终接收目标，且必须保存在由缓存生成的响应中，另外规定它必须被转发。</p><p>翻译成大白话：这些首部字段不论是经过代理转发还是缓存时都必须未经修改的发送给接收方。</p></li><li><p>逐跳首部(Hop-by-hop Header)</p><p>只对单次转发有效，会因通过缓存或代理而不再转发。</p><p>除以下8个首部字段外都属于端到端首部：</p><p><strong>Connection、Keep-Alive、Proxy-Authenticate、Proxy-Authorization、Trailer、TE、Transfer-Encoding、Upgrade</strong></p></li></ol><h4 id="3.-通用首部字段">3. 通用首部字段<a title="#3.-通用首部字段" href="#3.-通用首部字段"></a></h4><h5 id="3.1-catch-control">3.1 Catch-Control<a title="#3.1-catch-control" href="#3.1-catch-control"></a></h5><ul><li>作用: 控制缓存的行为。</li><li>值：</li></ul><div class="φcy"><div class="φda"><table><thead><tr><th>指令</th><th>参数</th><th>分类</th><th>说明</th></tr></thead><tbody><tr><td>no-cache</td><td>无</td><td>通用</td><td>请求时：不使用缓存资源；响应时：使用缓存前需要确认</td></tr><tr><td>no-store</td><td>无</td><td>通用</td><td>暗示包含机密信息，不能缓存</td></tr><tr><td>public</td><td>可省略</td><td>响应</td><td>其他用户也可利用缓存</td></tr><tr><td>privete</td><td>可省略</td><td>响应</td><td>仅项特定用户返回响应</td></tr><tr><td>max-age</td><td></td><td>通用</td><td>缓存过期时间</td></tr><tr><td>max-stale</td><td></td><td>通用</td><td>即使过期也照常接收，可指定具体数值，即使过期，只要处在这个指定时间内，依旧会被客户端接收。</td></tr><tr><td>only-if-cached</td><td></td><td>通用</td><td>只获取缓存资源，若本地缓存无响应则返回状态码504 Gateway timeout</td></tr><tr><td>must-revalidate</td><td></td><td>通用</td><td>再次验证缓存是否有效，使用此指令会忽略请求的max-stale指令</td></tr><tr><td>no-transform</td><td></td><td>通用</td><td>缓存不能改变实体主体的媒体类型</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table></div></div><h5 id="3.2-connection">3.2 Connection<a title="#3.2-connection" href="#3.2-connection"></a></h5><ul><li>作用：<ul><li>控制不再转发给代理的首部字段：字段名</li><li>管理持久连接：close断开连接</li></ul></li><li>分类： 逐跳首部</li><li>值：首部字段名/‘close’</li></ul><h5 id="3.3-date">3.3 Date<a title="#3.3-date" href="#3.3-date"></a></h5><ul><li>作用： 表明创建豹纹的日期和时间</li><li>值：RFC1123规定的日期时间格式</li></ul><h5 id="3.4-trailer">3.4 Trailer<a title="#3.4-trailer" href="#3.4-trailer"></a></h5><ul><li>作用：事先说明在报文主体后记录了哪些首部字段，可应用于1.1版本分块传输编码时。</li><li>值：首部字段名</li></ul><h5 id="3.5-transfer-encoding">3.5 Transfer-Encoding<a title="#3.5-transfer-encoding" href="#3.5-transfer-encoding"></a></h5><ul><li>作用：规定了传输报文主体时采用的编码方式，1.1的传输编码方式仅对分块传输编码有效。</li><li>值：chunked</li></ul><h5 id="3.6-upgrade">3.6 Upgrade<a title="#3.6-upgrade" href="#3.6-upgrade"></a></h5><ul><li>作用：检测http协议及其他协议是否可以使用更高的版本通信。</li><li>值：指定的通信协议 如HTTP/1.1</li></ul><h5 id="3.7-via">3.7 Via<a title="#3.7-via" href="#3.7-via"></a></h5><ul><li>作用： 追踪客户端与服务器之间的请求和响应报文的传输路径，报文在经过代理或网管事会先在首部字段Via中附加该服务器的信息再转发。类似电子邮件的Received首部工作机制。</li></ul><h5 id="3.8-warning">3.8 Warning<a title="#3.8-warning" href="#3.8-warning"></a></h5><ul><li>作用：告知用户一些与缓存相关的问题的警告。</li><li>值：[警告码] [警告的主机：端口号] “[内容]” ([日期时间])</li></ul><h4 id="4.-请求首部字段">4. 请求首部字段<a title="#4.-请求首部字段" href="#4.-请求首部字段"></a></h4><h5 id="4.1-accept">4.1 Accept<a title="#4.1-accept" href="#4.1-accept"></a></h5><ul><li>作用：能够处理的媒体类型及相对优先级。可使用 type/subtype 指定多种类型。</li><li>值：(权重 q=0～1)媒体类型</li></ul><h5 id="4.2-accept-charset">4.2 Accept-Charset<a title="#4.2-accept-charset" href="#4.2-accept-charset"></a></h5><ul><li>作用：支持的字符集及优先级，可指定多种，支持q值表示相对优先级</li><li>值：例：iso-8859-5；q=0.8</li></ul><h5 id="4.3-accept-encoding">4.3 Accept-Encoding<a title="#4.3-accept-encoding" href="#4.3-accept-encoding"></a></h5><ul><li>作用：支持的内容编码及优先级，可指定多个</li><li>值：gzip/compress/deflate/identity</li></ul><h5 id="4.4-accept-language">4.4 Accept-Language<a title="#4.4-accept-language" href="#4.4-accept-language"></a></h5><h5 id="4.5-authorization">4.5 Authorization<a title="#4.5-authorization" href="#4.5-authorization"></a></h5><h5 id="4.6-expect">4.6 Expect<a title="#4.6-expect" href="#4.6-expect"></a></h5><ul><li>作用：告知服务器期望出现的某种特定行为。服务器无法理解期望作出回应而发生错误时，返回状态码 417 Expectation Failed</li><li>值：例：100-continue</li></ul><h5 id="4.7-from">4.7 From<a title="#4.7-from" href="#4.7-from"></a></h5><ul><li>作用：使用用户代理的u陪你过户电子邮件地址，使用代理时尽量包含</li><li>值：邮件地址</li></ul><h5 id="4.8-host">4.8 Host<a title="#4.8-host" href="#4.8-host"></a></h5><ul><li>作用：请求的资源所处的互联网主机名和端口号，必须包含。</li></ul><h5 id="4.9-if-match">4.9 If-Match<a title="#4.9-if-match" href="#4.9-if-match"></a></h5><h4 id="5.-实体首部字段">5. 实体首部字段<a title="#5.-实体首部字段" href="#5.-实体首部字段"></a></h4><h5 id="5.1-allow">5.1 Allow<a title="#5.1-allow" href="#5.1-allow"></a></h5><ul><li>作用： 允许的方法。</li></ul><h5 id="5.2-content-encoding">5.2 Content-Encoding<a title="#5.2-content-encoding" href="#5.2-content-encoding"></a></h5><ul><li>作用：内容编码方式。</li><li>值：gzip/compress/deflate/identity</li></ul><h5 id="5.3-content-language">5.3 Content-Language<a title="#5.3-content-language" href="#5.3-content-language"></a></h5><ul><li>作用：主体使用的自然语言。</li></ul><h5 id="5.4-content-length">5.4 Content-Length<a title="#5.4-content-length" href="#5.4-content-length"></a></h5><ul><li>作用：实体主体部分的大小，单位是字节。</li></ul><h5 id="5.5-content-location">5.5 Content-Location<a title="#5.5-content-location" href="#5.5-content-location"></a></h5><ul><li>作用：主体返回的资源对应的URL。</li></ul><h5 id="5.6-content-range">5.6 Content-Range<a title="#5.6-content-range" href="#5.6-content-range"></a></h5><ul><li>作用： 针对范围请求。</li><li>值： bytes 5001-10000/10000</li></ul><h5 id="5.7-content-type">5.7 Content-Type<a title="#5.7-content-type" href="#5.7-content-type"></a></h5><ul><li>作用： 实体主体对象的媒体类型。</li></ul><h5 id="5.8---expires">5.8   Expires<a title="#5.8---expires" href="#5.8---expires"></a></h5><ul><li>作用： 资源失效的日期，不希望对资源缓存时，可以写入与Date相同的时间值。但是有max-age指令时优先处理max-age。</li></ul><h5 id="5.9-last-modify">5.9 Last-Modify<a title="#5.9-last-modify" href="#5.9-last-modify"></a></h5><ul><li>作用： 上次修改时间。</li></ul><h5 id="5.10-set-cookie/cookie">5.10 Set-Cookie/Cookie<a title="#5.10-set-cookie/cookie" href="#5.10-set-cookie/cookie"></a></h5><h4 id="6.-其他首部字段">6. 其他首部字段<a title="#6.-其他首部字段" href="#6.-其他首部字段"></a></h4><h5 id="6.1-dnat">6.1 DNAT<a title="#6.1-dnat" href="#6.1-dnat"></a></h5><ul><li>作用：拒绝个人信息被收集</li><li>值：0：同意被追踪/1：拒绝被追踪</li></ul><hr><h3 id="七.-https">七. HTTPS<a title="#七.-https" href="#七.-https"></a></h3><h4 id="1.-http">1. http<a title="#1.-http" href="#1.-http"></a></h4><h5 id="1.1-缺点">1.1 缺点<a title="#1.1-缺点" href="#1.1-缺点"></a></h5><ol><li>通信使用明文，内容可能被窃听</li><li>不验证通信方的身份，有可能遭遇伪装</li><li>无法验证报文的完整性，可能遭到篡改，又叫中间人攻击</li></ol><h5 id="1.2-对应解决方案">1.2 对应解决方案<a title="#1.2-对应解决方案" href="#1.2-对应解决方案"></a></h5><ol><li>通信加密/内容加密</li><li>证书</li><li>md5 sha1</li></ol><h4 id="2.-https">2. https<a title="#2.-https" href="#2.-https"></a></h4><p>我们把添加了加密及认证机制的http称为https</p><p>ssl采用公开密钥加密，使用一对非对称的密钥对，公钥用来加密，私钥用来解密</p><p>https采用混合加密机制：使用公开加密方式交换共享密钥加密中的密钥，再使用共享密钥加密方式通信，公钥可以使用数字证书认证机构和其相关机关办法的公开密钥证书。</p><h3 id="九.-websocket">九. WebSocket<a title="#九.-websocket" href="#九.-websocket"></a></h3><h4 id="1.-主要特点">1. 主要特点<a title="#1.-主要特点" href="#1.-主要特点"></a></h4><ol><li>主动推送</li><li>减少通信量 只要建立起连接 就希望一直保持连接状态 同时首部新戏很小 通信量也相应减少了</li></ol><h4 id="2.-握手请求">2. 握手请求<a title="#2.-握手请求" href="#2.-握手请求"></a></h4><p>为了实现ws通信 需要用到http的Upgrade首部字段 告知服务器通信协议发生变化以达到握手的目的</p><p><code>Upgrade: webSocket</code></p><p>对于握手请求 返回状态码101 的响应。</p><p>成功建立连接后，通信不再使用HTTP的数据帧，而采用WebSocket独立的数据帧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;六.-http首部&quot;&gt;六. http首部&lt;a title=&quot;#六.-http首部&quot; href=&quot;#六.-http首部&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;1.--http报文结构&quot;&gt;1.  http报文结构&lt;a title=&quot;#1.--http报文结构&quot; hre</summary>
      
    
    
    
    <category term="编程技术" scheme="http://qiuxiaori.github.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="http" scheme="http://qiuxiaori.github.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>每天一个 vscode 小技巧</title>
    <link href="http://qiuxiaori.github.com/2020/08/04/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAvscode%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://qiuxiaori.github.com/2020/08/04/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAvscode%E5%B0%8F%E6%8A%80%E5%B7%A7/</id>
    <published>2020-08-04T08:33:38.811Z</published>
    <updated>2020-11-09T08:31:18.853Z</updated>
    
    <content type="html"><![CDATA[<p>又学会了没用的知识呢…</p><a id="more"></a><h3 id="一.mac终端用vscode打开文件">一.mac终端用vscode打开文件<a title="#一.mac终端用vscode打开文件" href="#一.mac终端用vscode打开文件"></a></h3><ol><li>安装code命令<br>vsode中 <code>comand+shift+p</code> -&gt; 搜索 ‘code’ -&gt; 选择’shell 在Path中安装code命令’</li><li>使用<br>命令行输入 <code>code [文件夹路径]</code></li><li>大功告成🎉</li></ol><h3 id="二.mac完整卸载vscode">二.mac完整卸载vscode<a title="#二.mac完整卸载vscode" href="#二.mac完整卸载vscode"></a></h3><ol><li>退出 VSCode 应用</li><li>输入如下指令，删除 VSCode 的设置和配置</li></ol><figure class="highlight plain"><figcaption><span>rm -rf $HOME/Library/Application\ Support/Code```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3. 输入如下指令，删除 VSCode 的插件</span><br><span class="line">&#96;&#96;&#96;sudo rm -rf $HOME&#x2F;.vscode</span><br></pre></td></tr></table></figure><ol start="4"><li>从 Application 中移除 VSCode</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;又学会了没用的知识呢…&lt;/p&gt;</summary>
    
    
    
    <category term="编程技术" scheme="http://qiuxiaori.github.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="vscode" scheme="http://qiuxiaori.github.com/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>啊哈！ 算法</title>
    <link href="http://qiuxiaori.github.com/2020/08/04/%E5%95%8A%E5%93%88%E7%AE%97%E6%B3%95/"/>
    <id>http://qiuxiaori.github.com/2020/08/04/%E5%95%8A%E5%93%88%E7%AE%97%E6%B3%95/</id>
    <published>2020-08-04T07:50:47.546Z</published>
    <updated>2020-08-04T15:35:32.776Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一章-排序">第一章 排序<a title="#第一章-排序" href="#第一章-排序"></a></h3><h4 id="1.0-交换算法">1.0 交换算法<a title="#1.0-交换算法" href="#1.0-交换算法"></a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span> (<span class="params">array, i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> temp = array[i]</span><br><span class="line">    array[i] = array[j]</span><br><span class="line">    array[j] = temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1.1-最快最简单的排序——桶排序">1.1 最快最简单的排序——桶排序<a title="#1.1-最快最简单的排序——桶排序" href="#1.1-最快最简单的排序——桶排序"></a></h4><ul><li>时间复杂度:  O(M+N)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bucket = <span class="function"><span class="keyword">function</span> (<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nums = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i ++) &#123;</span><br><span class="line">    nums[array[i]]++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">9</span>; j &gt; <span class="number">-1</span>; j --) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[j]) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; nums[j]; k ++) <span class="built_in">console</span>.log(j)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1.2-冒泡排序">1.2 冒泡排序<a title="#1.2-冒泡排序" href="#1.2-冒泡排序"></a></h4><ul><li>基本思想:每次比较两个相邻的元素，如果它们的顺序错误就把它们交换过来。</li><li>时间复杂度:  O(N^2)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bubble = <span class="function"><span class="keyword">function</span> (<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> len = array.length</span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">2</span>) <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>;i &lt; len;i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; len - i + <span class="number">1</span>; j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[j<span class="number">-1</span>] &gt; array[j]) &#123;</span><br><span class="line">                swap(array, j, j - <span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1.3-快速排序">1.3 快速排序<a title="#1.3-快速排序" href="#1.3-快速排序"></a></h4><ul><li>时间复杂度:  O(NlogN)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> quick = <span class="function"><span class="keyword">function</span> (<span class="params">array, start, end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; end) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">const</span> poivtIndex = getPoivtIndex(array, start, end)</span><br><span class="line">    quick(array, start, poivtIndex - <span class="number">1</span>)</span><br><span class="line">    quick(array, poivtIndex + <span class="number">1</span>, end)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取基准数排序后的下标</span></span><br><span class="line"><span class="keyword">const</span> getPoivtIndex = <span class="function"><span class="keyword">function</span> (<span class="params">array, start, end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> poivt = start</span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end &amp;&amp; array[end] &gt; array[poivt]) &#123;</span><br><span class="line">            end --</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; end &amp;&amp; array[start] &lt;= array[poivt]) &#123;</span><br><span class="line">            start ++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (start !== end) swap(array, start, end)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (start !== poivt) swap(array, poivt, start)</span><br><span class="line">    <span class="keyword">return</span> start</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1.4-小哼买书-（去重排序">1.4 小哼买书 （去重排序<a title="#1.4-小哼买书-（去重排序" href="#1.4-小哼买书-（去重排序"></a></h4><ol><li>先去重 再排序</li><li>先排序 输出时再去重（判断与前一个数是否相同即可</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第一章-排序&quot;&gt;第一章 排序&lt;a title=&quot;#第一章-排序&quot; href=&quot;#第一章-排序&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;1.0-交换算法&quot;&gt;1.0 交换算法&lt;a title=&quot;#1.0-交换算法&quot; href=&quot;#1.0-交换算法&quot;&gt;&lt;/a&gt;&lt;/h4&gt;
</summary>
      
    
    
    
    <category term="编程技术" scheme="http://qiuxiaori.github.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="数据结构与算法" scheme="http://qiuxiaori.github.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>大话数据结构</title>
    <link href="http://qiuxiaori.github.com/2020/08/02/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://qiuxiaori.github.com/2020/08/02/%E5%A4%A7%E8%AF%9D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2020-08-02T14:42:03.494Z</published>
    <updated>2020-08-04T07:46:36.682Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="第一章-绪论">第一章 绪论<a title="#第一章-绪论" href="#第一章-绪论"></a></h3><h4 id="1.4-概念和术语">1.4 概念和术语<a title="#1.4-概念和术语" href="#1.4-概念和术语"></a></h4><p>数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。</p><h4 id="1.5-逻辑结构与物理结构">1.5 逻辑结构与物理结构<a title="#1.5-逻辑结构与物理结构" href="#1.5-逻辑结构与物理结构"></a></h4><h5 id="1.5.1-逻辑结构：数据对象中数据元素之间的相互关系。">1.5.1 逻辑结构：数据对象中数据元素之间的相互关系。<a title="#1.5.1-逻辑结构：数据对象中数据元素之间的相互关系。" href="#1.5.1-逻辑结构：数据对象中数据元素之间的相互关系。"></a></h5><ol><li><p>集合结构：数据元素除了属于同一个集合外，之间没有其他关系。</p></li><li><p>线性结构：一对一的关系。</p></li><li><p>树形结构：存在一种一对多的曾册关系。</p></li><li><p>图形结构：多对多的关系。</p></li></ol><h5 id="1.5.2-物理结构：数据的逻辑结构在计算机中的存储形式。">1.5.2 物理结构：数据的逻辑结构在计算机中的存储形式。<a title="#1.5.2-物理结构：数据的逻辑结构在计算机中的存储形式。" href="#1.5.2-物理结构：数据的逻辑结构在计算机中的存储形式。"></a></h5><p>数据的存储结构应正确反应数据元素之间的逻辑关系。</p><ol><li>顺序存储结构：把数据元素存放在地址连续的存储单元里，其数据件的逻辑关系和物理关系是一致的。</li><li>链式存储结构：把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。用一个指针存放数据元素的地址，通过地址找到关联数据元素的位置。</li></ol><h4 id="1.6-抽象数据类型">1.6 抽象数据类型<a title="#1.6-抽象数据类型" href="#1.6-抽象数据类型"></a></h4><h5 id="1.6.1-数据类型">1.6.1 数据类型<a title="#1.6.1-数据类型" href="#1.6.1-数据类型"></a></h5><p>是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。</p><p>在c语言中，按照取值的不同，数据类型可分为两类：</p><ol><li>原子类型：不可以再分解的基本类型，整型，实型，字符型等。</li><li>结构类型：由若干个类型组合而成，可以分解，如数组等。</li></ol><h5 id="1.6.2-抽象数据类型">1.6.2 抽象数据类型<a title="#1.6.2-抽象数据类型" href="#1.6.2-抽象数据类型"></a></h5><p>指一个数学模型及定义在该模型上的一组操作。仅取决于它的一组逻辑特性，而与其在计算机内部如何表示和实现无关。</p><p>抽象数据类型体现了程序设计中问题分解，抽象和信息隐藏的特性。</p><hr><h3 id="第二章-算法">第二章 算法<a title="#第二章-算法" href="#第二章-算法"></a></h3><h4 id="2.4-算法定义">2.4 算法定义<a title="#2.4-算法定义" href="#2.4-算法定义"></a></h4><p>算法是解决特定问题求解步骤的描述，在计算机中表现为指令的优先序列，并且每条指令表示一个或多个操作。</p><h4 id="2.5-算法的特性">2.5 算法的特性<a title="#2.5-算法的特性" href="#2.5-算法的特性"></a></h4><p>算法具有五个基本特性：输入，输出，有穷性，确定性和可行性。</p><h4 id="2.6-算法设计的要求">2.6 算法设计的要求<a title="#2.6-算法设计的要求" href="#2.6-算法设计的要求"></a></h4><ol><li><p>正确性：输入输出和加工处理无歧义性，能正确反映问题的需求，能得到问题的正确答案。</p><p>一般情况下，算法是否正确的标准：对于非法的输入数据能够得出满足规格说明的结果。</p></li><li><p>可读性：便于阅读，理解和交流。</p></li><li><p>健壮性：输入数据不合法时，算法也能做出相关处理。</p></li><li><p>时间效率高和存储量低。</p></li></ol><h4 id="2.7-算法效率的度量方法">2.7 算法效率的度量方法<a title="#2.7-算法效率的度量方法" href="#2.7-算法效率的度量方法"></a></h4><h5 id="2.7.1-事后统计方法">2.7.1 事后统计方法<a title="#2.7.1-事后统计方法" href="#2.7.1-事后统计方法"></a></h5><h5 id="2.7.2-事前分析估算方法">2.7.2 事前分析估算方法<a title="#2.7.2-事前分析估算方法" href="#2.7.2-事前分析估算方法"></a></h5><p>在计算机程序编制前，依据统计方法对算法进行估算。</p><p>一个用高级程序语言编写的程序在计算机上运行时所消耗的时间取决于下列因素：</p><ol><li>算法采用的策略，方法：算法好坏的根本。</li><li>编译产生的代码质量：软件的支持。</li><li>问题的输入规模。</li><li>机器执行指令的速度：硬件性能。</li></ol><p>在分析程序的运行时间时，重要的是把程序看成独立于程序设计语言的算法或一系列步骤。</p><h4 id="2.8-函数的渐近增长">2.8 函数的渐近增长<a title="#2.8-函数的渐近增长" href="#2.8-函数的渐近增长"></a></h4><p><strong>定义：</strong> 给定两个函数 f(n) 和 g(n)，如果存在一个整数 N，使得对于所有 n &gt; N，  f(n) 总是比 g(n) 大，那么我们说  f(n)  的增长渐近快于 g(n)。</p><p>判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而更应该关注主项的阶数。</p><h4 id="2.9-算法时间复杂度">2.9 算法时间复杂度<a title="#2.9-算法时间复杂度" href="#2.9-算法时间复杂度"></a></h4><h5 id="2.9.1-定义：">2.9.1 定义：<a title="#2.9.1-定义：" href="#2.9.1-定义："></a></h5><p>在进行算法分析时，语句总的执行次数 T(n) 是关于问题规模 n 的函数，进而分析  T(n) 随 n 的变化情况并确定  T(n) 的数量级。算法的时间复杂度，也就是算法的时间量度，记作： T(n) = O(f(n))。它表示随问题规模 n 的增大，算法执行时间的增长率和  f(n) 的增长率相同，称作算法的渐近时间复杂度，简称为时间复杂度。其中 f(n) 是问题规模 n 的某个函数。一般情况下，随着 n 的增大， T(n) 增长最慢的算法为最优算法 。</p><h5 id="2.9.2-推导大-o-阶">2.9.2 推导大 O 阶<a title="#2.9.2-推导大-o-阶" href="#2.9.2-推导大-o-阶"></a></h5><ol><li>用常数 1 取代运行时间中的所有加法常数。</li><li>在修改后的运行次数函数中，只保留最高阶项。</li><li>如果最高阶项存在且不为 1，则去除与这个项相乘的常数。</li></ol><h4 id="2.10-常见的时间复杂度">2.10 常见的时间复杂度<a title="#2.10-常见的时间复杂度" href="#2.10-常见的时间复杂度"></a></h4><p>![image-20200616154806058](/Users/mac/Library/Application Support/typora-user-images/image-20200616154806058.png)</p><h4 id="2.12-算法空间复杂度">2.12 算法空间复杂度<a title="#2.12-算法空间复杂度" href="#2.12-算法空间复杂度"></a></h4><p>算法的空间复杂度通过计算算法所需的存储空间实现，算法空间复杂度的计算公式记作：S(n) = O(f(n))，其中，n 为问题的规模，f(n) 为语句关于 n 所占存储空间的函数。</p><hr><h3 id="第三章-线性表-list">第三章 线性表 List<a title="#第三章-线性表-list" href="#第三章-线性表-list"></a></h3><blockquote><p>零个或多个数据元素的有限序列。</p></blockquote><h4 id="3.3-线性表的抽象数据类型">3.3 线性表的抽象数据类型<a title="#3.3-线性表的抽象数据类型" href="#3.3-线性表的抽象数据类型"></a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ADT 线性表(List)</span><br><span class="line">Data</span><br><span class="line">数据元素类型相同，除第一个元素外，每个元素有且只有一个直接前驱元素，除了最后一个元素外，每个元素有且只有一个直接后继元素。数据元素之间的关系是一对一。</span><br><span class="line">Operation</span><br><span class="line">initList,listEmpty,clearList,getElem,locateElem,ListInsert,ListDelete,ListLength</span><br><span class="line">endADT</span><br></pre></td></tr></table></figure><h4 id="3.4-线性表的顺序存储结构">3.4 线性表的顺序存储结构<a title="#3.4-线性表的顺序存储结构" href="#3.4-线性表的顺序存储结构"></a></h4><h5 id="3.4.1-定义">3.4.1 定义<a title="#3.4.1-定义" href="#3.4.1-定义"></a></h5><p>用一段地址连续的存储单元一次存储线性表的数据元素。</p><h5 id="3.4.4-地址计算方法">3.4.4 地址计算方法<a title="#3.4.4-地址计算方法" href="#3.4.4-地址计算方法"></a></h5><p>存储器中的每个存储单元都有自己的编号，这个编号称为地址。</p><p>假设每个数据占用 c 个存储单元，则： LOC(a[i+1]) =  LOC(a[i]) + c</p><p>可推出： LOC(a[i]) =  LOC(a[1]) + (i-1) c</p><h4 id="3.5-顺序存储结构的插入与删除">3.5 顺序存储结构的插入与删除<a title="#3.5-顺序存储结构的插入与删除" href="#3.5-顺序存储结构的插入与删除"></a></h4><h5 id="3.5.1-获得元素操作">3.5.1 获得元素操作<a title="#3.5.1-获得元素操作" href="#3.5.1-获得元素操作"></a></h5><ul><li>在数组下标范围内，直接返回。</li></ul><h5 id="3.5.2-插入操作">3.5.2 插入操作<a title="#3.5.2-插入操作" href="#3.5.2-插入操作"></a></h5><ul><li>插入位置不合理，抛出异常。</li><li>线性表长度大于或等于数组长度，抛出异常或增加容量。</li><li>插入的位置不在表尾，从最后向前遍历到第 i 个位置，向后移动一个位置。</li><li>将要插入元素填入位置 i。</li><li>表长加 1。</li></ul><h5 id="3.5.3-删除操作">3.5.3 删除操作<a title="#3.5.3-删除操作" href="#3.5.3-删除操作"></a></h5><ul><li><p>线性表为空，抛出异常。</p></li><li><p>删除位置不合理，抛出异常。</p></li><li><p>取出删除元素。</p></li><li><p>删除元素不在表尾，从删除位置遍历到最后。分别向前移动一个位置。</p></li><li><p>表长减 1。</p></li></ul><h5 id="3.4.5-时间复杂度及优缺点">3.4.5 时间复杂度及优缺点<a title="#3.4.5-时间复杂度及优缺点" href="#3.4.5-时间复杂度及优缺点"></a></h5><ul><li>时间复杂度：</li></ul><div class="φcy"><div class="φda"><table><thead><tr><th>操作</th><th>时间复杂度</th></tr></thead><tbody><tr><td>存，取</td><td>O(1)</td></tr><tr><td>插入，删除</td><td>O(n)</td></tr></tbody></table></div></div><ul><li>优点：无须为表示表中元素之间的逻辑关系而增加额外的存储空间；可以快速的存取表中任意位置的元素。</li><li>缺点：删除和插入操作需要移动大量元素；当线性表长度变化较大时，难以确定存储空间的容量；造成存储空间的碎片。</li></ul><h4 id="3.6-线性表的链式存储结构">3.6 线性表的链式存储结构<a title="#3.6-线性表的链式存储结构" href="#3.6-线性表的链式存储结构"></a></h4><h5 id="3.6.4-代码描述">3.6.4 代码描述<a title="#3.6.4-代码描述" href="#3.6.4-代码描述"></a></h5><p>![image-20200617115130497](/Users/mac/Library/Application Support/typora-user-images/image-20200617115130497.png)</p><h4 id="3.7-单链表的读取">3.7 单链表的读取<a title="#3.7-单链表的读取" href="#3.7-单链表的读取"></a></h4><blockquote><p>时间复杂度 O(n)</p></blockquote><ul><li>声明一个结点 p 指向链表第一个结点，初始化 j = 1。</li><li>当 j &lt; i 时, 遍历链表，让 p 的指针向后移动，不断指向下一结点， j 累加 1。</li><li>循环结束 p 为空，元素不存在。</li><li>否则查找成功，返回结点 p 的数据。</li></ul><h4 id="3.8-单链表的插入和删除">3.8 单链表的插入和删除<a title="#3.8-单链表的插入和删除" href="#3.8-单链表的插入和删除"></a></h4><h5 id="3.8.1-插入的操作">3.8.1 插入的操作<a title="#3.8.1-插入的操作" href="#3.8.1-插入的操作"></a></h5><p>![image-20200617134046716](/Users/mac/Library/Application Support/typora-user-images/image-20200617134046716.png)</p><h4 id="3.12-静态链表">3.12 静态链表<a title="#3.12-静态链表" href="#3.12-静态链表"></a></h4><p>用数组描述的链表叫做静态链表。我们让数组的元素都是由俩个数据域组成，data 和 cur，cur用来存放该元素的后继在数组中的下标。</p><h5 id="3.12.1-静态链表的插入操作">3.12.1 静态链表的插入操作<a title="#3.12.1-静态链表的插入操作" href="#3.12.1-静态链表的插入操作"></a></h5><h4 id="3.13-循环链表">3.13 循环链表<a title="#3.13-循环链表" href="#3.13-循环链表"></a></h4><p>将单链表中终端结点的指针端由空指针改为指向头结点，这使整个单链表形成一个环，这种头尾相接的单链表称为单循环链表，简称循环链表。</p><h4 id="3.14-双向链表">3.14 双向链表<a title="#3.14-双向链表" href="#3.14-双向链表"></a></h4><hr><h3 id="第四章-栈与队列">第四章 栈与队列<a title="#第四章-栈与队列" href="#第四章-栈与队列"></a></h3><h4 id="4.2-栈的定义">4.2 栈的定义<a title="#4.2-栈的定义" href="#4.2-栈的定义"></a></h4><p>栈是限定仅在表尾进行插入和删除操作的线性表。我们把允许插入和删除的一端称为栈顶，另一端称为栈底，栈是后进先出的 <em>线性表</em>，简称 LIFO 结构。</p><h4 id="4.3-栈的抽象数据类型">4.3 栈的抽象数据类型<a title="#4.3-栈的抽象数据类型" href="#4.3-栈的抽象数据类型"></a></h4><p>![image-20200629165825378](/Users/mac/Library/Application Support/typora-user-images/image-20200629165825378.png)</p><h4 id="4.4-栈的顺序存储结构">4.4 栈的顺序存储结构<a title="#4.4-栈的顺序存储结构" href="#4.4-栈的顺序存储结构"></a></h4><h5 id="4.4.1-定义">4.4.1 定义<a title="#4.4.1-定义" href="#4.4.1-定义"></a></h5><p>栈的顺序存储其实是线性表顺序存储的简化，用数组下标为0的一端作为栈底。我们定义top变量指示栈顶元素在数组中的位置，栈的长度为 StackSize，栈顶位置top必须小于 StackSize。空栈的判定条件为 top &lt; 0，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结构</span></span><br><span class="line">MAXSIZE = <span class="number">10</span></span><br><span class="line"><span class="keyword">const</span> stack = &#123;</span><br><span class="line">  top: <span class="number">0</span>,</span><br><span class="line">  data: <span class="built_in">Array</span>[MAXSIZE]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4.4.2-进栈操作">4.4.2 进栈操作<a title="#4.4.2-进栈操作" href="#4.4.2-进栈操作"></a></h5><p>​<em>时间复杂度 O(1)</em></p><ul><li>栈满/栈不存在，抛错</li><li>栈顶指针加一，元素赋值给栈顶空间</li></ul><h5 id="4.4.3-出栈操作">4.4.3 出栈操作<a title="#4.4.3-出栈操作" href="#4.4.3-出栈操作"></a></h5><p>​<em>时间复杂度 O(1)</em></p><ul><li>栈空/栈不存在，抛错</li><li>返回删除的栈顶元素，栈顶指针减一</li></ul><h4 id="4.5-两栈共享空间">4.5 两栈共享空间<a title="#4.5-两栈共享空间" href="#4.5-两栈共享空间"></a></h4><p>![image-20200629172604612](/Users/mac/Library/Application Support/typora-user-images/image-20200629172604612.png)</p><h4 id="4.6-栈的链式存储结构">4.6 栈的链式存储结构<a title="#4.6-栈的链式存储结构" href="#4.6-栈的链式存储结构"></a></h4><h4 id="4.10-队列">4.10 队列<a title="#4.10-队列" href="#4.10-队列"></a></h4><h5 id="4.10.1-定义">4.10.1 定义<a title="#4.10.1-定义" href="#4.10.1-定义"></a></h5><p>队列是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。队列是一种先进先出的线性表，简称 FIFO，允许插入的一端称为怼尾，允许删除的一端称为队头。</p><h5 id="4.10.2-抽象数据模型">4.10.2 抽象数据模型<a title="#4.10.2-抽象数据模型" href="#4.10.2-抽象数据模型"></a></h5><p>![image-20200629175749918](/Users/mac/Library/Application Support/typora-user-images/image-20200629175749918.png)</p><h4 id="4.11-循环队列">4.11 循环队列<a title="#4.11-循环队列" href="#4.11-循环队列"></a></h4><h5 id="4.11.1-定义">4.11.1 定义<a title="#4.11.1-定义" href="#4.11.1-定义"></a></h5><p>队列头尾相接的顺序存储结构称为循环队列。</p><h5 id="4.11.2-存储结构">4.11.2 存储结构<a title="#4.11.2-存储结构" href="#4.11.2-存储结构"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queue = &#123;</span><br><span class="line">data: <span class="built_in">Array</span>[<span class="number">10</span>],</span><br><span class="line">  front: <span class="number">0</span>,<span class="comment">// 队头元素</span></span><br><span class="line">  rear: <span class="number">0</span> <span class="comment">// 指向队尾元素的下一个位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4.11.3-队列长度">4.11.3 队列长度<a title="#4.11.3-队列长度" href="#4.11.3-队列长度"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不允许队列满，始终空一个元素空间</span></span><br><span class="line">length = (rear + MAXSIZE - frone) % MAXSIZE</span><br></pre></td></tr></table></figure><h5 id="4.11.4-入队操作">4.11.4 入队操作<a title="#4.11.4-入队操作" href="#4.11.4-入队操作"></a></h5><ul><li><p>队满抛错</p></li><li><p>元素赋给队尾</p></li><li><p>rear指针后移一位，若到最后则转到数组头部</p><p><code>rear=(rear+1)%MAXSIZE</code></p></li></ul><h5 id="4.11.4-出队操作">4.11.4 出队操作<a title="#4.11.4-出队操作" href="#4.11.4-出队操作"></a></h5><ul><li><p>队空抛错</p></li><li><p>获取队头元素</p></li><li><p>front指针后移一位，若到最后则转到数组头部</p><p>front=(front+1)%MAXSIZE`</p></li></ul><h4 id="4.12-队列的链式存储结构">4.12 队列的链式存储结构<a title="#4.12-队列的链式存储结构" href="#4.12-队列的链式存储结构"></a></h4><p>队列的链式存储结构，其实就是线性表的单链表，不过只能尾进头出，简称为链队列。我们将队头指针指向链队列的头结点，队尾指针指向终端结点，空队列是，front 和 rear 都指向头结点。</p><hr><h3 id="第五章-串">第五章 串<a title="#第五章-串" href="#第五章-串"></a></h3><h4 id="5.2-串的定义">5.2 串的定义<a title="#5.2-串的定义" href="#5.2-串的定义"></a></h4><p>串是由零个或多个字符组成的有限序列，又名叫字符串。</p><h4 id="5.3-串的比较">5.3 串的比较<a title="#5.3-串的比较" href="#5.3-串的比较"></a></h4><h5 id="5.3.1-字符编码">5.3.1 字符编码<a title="#5.3.1-字符编码" href="#5.3.1-字符编码"></a></h5><ol><li><p>拓展 ASCII 码:</p><p>由 8 位二进制数表示一个字符，总共可以表示 256 个字符。</p></li><li><p>Unicode 编码:</p><p>用 16 位的二进制数表示一个字符，约是 65 万多个字符。为了和 ASCII 码兼容，前 256 个字符与 ASCII 码完全相同。</p></li></ol><h5 id="5.3.2-两串相等">5.3.2 两串相等<a title="#5.3.2-两串相等" href="#5.3.2-两串相等"></a></h5><p>长度和各个位置对应的字符都相等时，两串相等。</p><h5 id="5.4.3-两串不等">5.4.3 两串不等<a title="#5.4.3-两串不等" href="#5.4.3-两串不等"></a></h5><p>![image-20200630145234846](/Users/mac/Library/Application Support/typora-user-images/image-20200630145234846.png)</p><h4 id="5.4-串的抽象数据类型">5.4 串的抽象数据类型<a title="#5.4-串的抽象数据类型" href="#5.4-串的抽象数据类型"></a></h4><p>串的逻辑结构和线性表相似，不同在于串针对字符集，关心的是查找子串位置，得到指定位置子串，替换子串等操作。![image-20200630145445898](/Users/mac/Library/Application Support/typora-user-images/image-20200630145445898.png)</p><h4 id="5.5-顺序存储和链式存储">5.5 顺序存储和链式存储<a title="#5.5-顺序存储和链式存储" href="#5.5-顺序存储和链式存储"></a></h4><h4 id="5.6-朴素的模式匹配算法">5.6 朴素的模式匹配算法<a title="#5.6-朴素的模式匹配算法" href="#5.6-朴素的模式匹配算法"></a></h4><p>从头遍历，时间复杂度 O(n^2)</p><h4 id="5.7-kmp-模式匹配算法">5.7 KMP 模式匹配算法<a title="#5.7-kmp-模式匹配算法" href="#5.7-kmp-模式匹配算法"></a></h4><p>克努特-莫里斯-普拉特算法，简称 KMP 算法。</p><hr><h3 id="第六章-树">第六章 树<a title="#第六章-树" href="#第六章-树"></a></h3><h4 id="6.2-树的定义">6.2 树的定义<a title="#6.2-树的定义" href="#6.2-树的定义"></a></h4><p>树是n个结点的有限集，n=0 时称为空树。在任意一颗非空树中:</p><ol><li>有且仅有一个特点的称为 根(Root) 的结点。</li><li>当 n&gt;1 时，其余结点可分为m(m&gt;0) 个互不相交的有限集，其中每个集合本身又是一棵树，并且称为根的子树(SubTree)。</li></ol><h5 id="6.2.1-结点分类">6.2.1 结点分类<a title="#6.2.1-结点分类" href="#6.2.1-结点分类"></a></h5><p>结点拥有的子树数称为结点的度(Degree)。度为 0 的结点称为叶结点 (Leaf) 或终端结点；度不为 0 的结点称为非终端结点或分支结点。除根节点之外，分支结点也称为内部结点。数的度是树内各结点的度的最大值。</p><h5 id="6.2.2-结点间关系">6.2.2 结点间关系<a title="#6.2.2-结点间关系" href="#6.2.2-结点间关系"></a></h5><p>孩子，双亲，祖先，子孙，兄弟，堂兄弟</p><h5 id="6.2.3-其他概念">6.2.3 其他概念<a title="#6.2.3-其他概念" href="#6.2.3-其他概念"></a></h5><ol><li>树中结点的最大层次称为书的深度(Depth) 或高度。</li><li>如果将树中各结点的子树看成从左至右是有次序的，不能互换的，则称该树为有序树，否则称为无序树。</li><li>森林(Forest) 是 m 棵互不相交的树的集合。对于树中每个结点而言，其子树的集合即为森林。</li></ol><h4 id="6.3-树的抽象数据类型">6.3 树的抽象数据类型<a title="#6.3-树的抽象数据类型" href="#6.3-树的抽象数据类型"></a></h4><p>![image-20200630164505292](/Users/mac/Library/Application Support/typora-user-images/image-20200630164505292.png)</p><h4 id="6.4-树的存储结构">6.4 树的存储结构<a title="#6.4-树的存储结构" href="#6.4-树的存储结构"></a></h4><p>利用顺序存储和链式存储结构的特点，实现对树的存储结构的表示。</p><h5 id="6.4.1-双亲表示法">6.4.1 双亲表示法<a title="#6.4.1-双亲表示法" href="#6.4.1-双亲表示法"></a></h5><p>在每个结点中，附设一个指示器指示其双亲结点到链表中的位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结点结构</span></span><br><span class="line"><span class="keyword">const</span> Node = &#123;</span><br><span class="line">  data: <span class="number">1</span>, <span class="comment">// 数据域</span></span><br><span class="line">  parent: <span class="number">0</span>, <span class="comment">// 该结点的双亲在数组中的下标，根节点为 -1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 树结构</span></span><br><span class="line"><span class="keyword">const</span> Tree = &#123;</span><br><span class="line">  nodes: <span class="built_in">Array</span>[Node], <span class="comment">// 结点数组</span></span><br><span class="line">  root: <span class="number">0</span>, <span class="comment">// 根的位置</span></span><br><span class="line">  num: <span class="number">10</span>, <span class="comment">// 结点树</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6.4.2-孩子表示法">6.4.2 孩子表示法<a title="#6.4.2-孩子表示法" href="#6.4.2-孩子表示法"></a></h5><p>把每个结点的孩子结点排列起来，以单链表作存储结构，则n个结点有n个孩子链表，如果是叶子结点则此单链表为空。然后n个头指针组成一个线性表，采用顺序存储结构，存放进一个一维数组中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 孩子结点</span></span><br><span class="line"><span class="keyword">const</span> Child = &#123;</span><br><span class="line">  child: <span class="number">1</span>, <span class="comment">// 该结点在表头数组中的下标</span></span><br><span class="line">  next: <span class="number">2</span> <span class="comment">// 指向下一个孩子结点的指针</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 表头结构</span></span><br><span class="line"><span class="keyword">const</span> Node = &#123;</span><br><span class="line">  data: <span class="string">'some thing'</span>, <span class="comment">// 表头的数据域</span></span><br><span class="line">  firstchild: child&lt;Child&gt; <span class="comment">// 孩子链表的头指针</span></span><br><span class="line">  parent: <span class="number">3</span> <span class="comment">// 双亲的下标，不存在时= -1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 树结构</span></span><br><span class="line"><span class="keyword">const</span> Tree = &#123;</span><br><span class="line">  nodes: <span class="built_in">Array</span>&lt;Node&gt;, <span class="comment">// 结点数组</span></span><br><span class="line">  root: <span class="number">0</span>, <span class="comment">// 根节点的位置</span></span><br><span class="line">  num: <span class="number">10</span> <span class="comment">// 结点数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6.4.3-孩子兄弟表示法">6.4.3 孩子兄弟表示法<a title="#6.4.3-孩子兄弟表示法" href="#6.4.3-孩子兄弟表示法"></a></h5><p>存储头孩子结点和其右边兄弟的结点。</p><h4 id="6.5-二叉树">6.5 二叉树<a title="#6.5-二叉树" href="#6.5-二叉树"></a></h4><p>二叉树是n个节点的有限集合，该集合或者为空寂，或者由一个根节点和两棵互不相交的，分别称为根节点的左子树和右子树的二叉树组成。</p><h5 id="6.5.1-二叉树的五种基本形态:">6.5.1 二叉树的五种基本形态:<a title="#6.5.1-二叉树的五种基本形态:" href="#6.5.1-二叉树的五种基本形态:"></a></h5><p>空二叉树/只有一个根节点/根节点只有左子树/根节点只有右子树/根节点既有左子树又有右子树</p><h5 id="6.5.2-特殊二叉树">6.5.2 特殊二叉树<a title="#6.5.2-特殊二叉树" href="#6.5.2-特殊二叉树"></a></h5><ol><li>斜树：所有的结点都只有左子树的二叉树叫左写书，所有结点都是右子树的二叉树叫右斜树。**斜树的特点是每层只有一个结点，结点的个数与二叉树的深度相同。**线性表可以理解为树的一种特殊表现形式。</li><li>满二叉树：在一棵二叉树中，所有分支都存在左子树和右子树，所有的叶子在同一层。**特点：叶子只能出现在最下一层/非叶子结点的度一定是2/在同样深度的二叉树中，满二叉树的结点个数最多，叶子数最多。</li><li>完全二叉树：对一棵具有n个结点的二叉树按层序编号，如果编号i的结点与同样深度的满二叉树中编号为i的结点在二叉树中位置完全相同。</li></ol><h5 id="6.5.3-完全二叉树特点">6.5.3 完全二叉树特点<a title="#6.5.3-完全二叉树特点" href="#6.5.3-完全二叉树特点"></a></h5><ol><li>叶子结点只能出现在最下两层</li><li>最下层的叶子一定集中在左部连续位置</li><li>倒数二层若有叶子结点一定在右部连续位置</li><li>结点为1时至右左孩子</li><li>同样结点数的二叉树，完全二叉树深度最小</li></ol><h4 id="6.6-二叉树的性质">6.6 二叉树的性质<a title="#6.6-二叉树的性质" href="#6.6-二叉树的性质"></a></h4><ol><li><p>第i层至多有 2^(i-1) 个结点</p></li><li><p>深度为k时最多有 2^k - 1 个结点</p></li><li><p>一棵二叉树 ![image-20200714174832141](/Users/mac/Library/Application Support/typora-user-images/image-20200714174832141.png)</p></li><li><p>![image-20200714174909277](/Users/mac/Library/Application Support/typora-user-images/image-20200714174909277.png)</p></li></ol><h4 id="6.7-二叉树的存储结构">6.7 二叉树的存储结构<a title="#6.7-二叉树的存储结构" href="#6.7-二叉树的存储结构"></a></h4><h5 id="6.7.1-顺序存储">6.7.1 顺序存储<a title="#6.7.1-顺序存储" href="#6.7.1-顺序存储"></a></h5><p>![image-20200714175240989](/Users/mac/Library/Application Support/typora-user-images/image-20200714175240989.png)</p><h5 id="6.7.2-二叉链表">6.7.2 二叉链表<a title="#6.7.2-二叉链表" href="#6.7.2-二叉链表"></a></h5><p>![image-20200714175222815](/Users/mac/Library/Application Support/typora-user-images/image-20200714175222815.png)</p><h4 id="6.8-遍历二叉树">6.8 遍历二叉树<a title="#6.8-遍历二叉树" href="#6.8-遍历二叉树"></a></h4><h5 id="6.8.1-遍历原理">6.8.1 遍历原理<a title="#6.8.1-遍历原理" href="#6.8.1-遍历原理"></a></h5><p>二叉树的遍历是指从根节点出发，按照某种次序依次访问二叉树中所有结点，使得每个结点被访问一次且仅被访问一次。</p><h5 id="6.8.2-遍历方法">6.8.2 遍历方法<a title="#6.8.2-遍历方法" href="#6.8.2-遍历方法"></a></h5><ol><li>前序遍历： 若二叉树为空，则空操作返回，否则先访问根节点，再前序遍历左子树，再前序遍历右子树。</li><li>中序遍历：若树为空，则空操作返回，否则从根节点开始，中序遍历根节点的左子树，然后访问根节点，最后中序遍历右子树。</li><li>后序遍历：若树为空，则空操作返回，否则从左到右先叶子后结点的方式遍历左右子树，最后访问根节点。</li><li>层序遍历：若树为空，空操作返回，否则从树的第一层，从上而下逐层遍历。在同一层中，按从左到右的顺序对结点逐个访问。</li></ol><h5 id="6.8.3-算法">6.8.3 算法<a title="#6.8.3-算法" href="#6.8.3-算法"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">preOrderTraverse</span> (<span class="params">BiTree T</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (T === <span class="literal">null</span>) <span class="keyword">return</span> <span class="comment">// 为空 返回</span></span><br><span class="line">  <span class="built_in">console</span>.log(T.data) <span class="comment">// 显示结点数据</span></span><br><span class="line">  preOrderTraverse(T.lchild) <span class="comment">// 前序遍历左子树</span></span><br><span class="line">  preOrderTraverse(T.rchild) <span class="comment">// 再先序遍历右子树</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调整执行顺序即可分别实现前序，中序，后序遍历算法</span></span><br></pre></td></tr></table></figure><h4 id="6.9-二叉树的建立">6.9 二叉树的建立<a title="#6.9-二叉树的建立" href="#6.9-二叉树的建立"></a></h4><p>递归</p><h4 id="6.10-哈夫曼树">6.10 哈夫曼树<a title="#6.10-哈夫曼树" href="#6.10-哈夫曼树"></a></h4><p>TODO</p><hr><h3 id="第七章-图">第七章 图<a title="#第七章-图" href="#第七章-图"></a></h3><h4 id="7.2-图的定义">7.2 图的定义<a title="#7.2-图的定义" href="#7.2-图的定义"></a></h4><blockquote><p>图是由顶点的有穷非空集合和顶点之间边的集合组成，通常表示为: G(V,E), 其中，G表示一个图，V是图G中顶点的集合，E是图G中边的集合。</p></blockquote><p>TODO</p><hr><h3 id="第八章-查找">第八章 查找<a title="#第八章-查找" href="#第八章-查找"></a></h3><h4 id="8.2-概论">8.2 概论<a title="#8.2-概论" href="#8.2-概论"></a></h4><h5 id="8.2.1-术语">8.2.1 术语<a title="#8.2.1-术语" href="#8.2.1-术语"></a></h5><ul><li>查找表(Search table)： 由同一类型的数据元素或记录构成的集合。</li><li>关键字(Key)：数据元素中某个数据项的值，又称键值，若关键字可以唯一地表示一个记录，称为主关键字；对于可以识别多个数据元素的关键字，称为次关键字。</li><li>查找(Search)：根据给定的某个值，在查找表中去定一个其关键字等于给定值的数据元素。</li></ul><h5 id="8.2.2-查找表类别">8.2.2 查找表类别<a title="#8.2.2-查找表类别" href="#8.2.2-查找表类别"></a></h5><ol><li>静态查找表：只做查找操作的查找表。</li><li>动态查找表：在查找过程中同时插入查找表中不存在的数据元素，或者从查找表中删除已经存在的某个数据元素。</li></ol><h4 id="8.3-顺序表查找">8.3 顺序表查找<a title="#8.3-顺序表查找" href="#8.3-顺序表查找"></a></h4><p>顺序查找又叫线性查找，查找过程是，从表中第一个或者最后一个记录开始，逐个进行记录的关键字和给定值比较，若伯格记录的关键字和给定值相等，则查找成功；到最后一个都不等时，查找不成功。</p><p>时间复杂度： O(n)</p><h5 id="8.3.2-有哨兵顺序查找">8.3.2 有哨兵顺序查找<a title="#8.3.2-有哨兵顺序查找" href="#8.3.2-有哨兵顺序查找"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serach2</span> (<span class="params">str, key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = str.length</span><br><span class="line">  <span class="keyword">const</span> head = a[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">while</span> (a[i] !== key &amp;&amp; i &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    i --</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (i === <span class="number">0</span> ) &#123; <span class="comment">// 判断 key 是否等于头部元素</span></span><br><span class="line">    <span class="keyword">if</span> (head === key) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> i</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回 -1 则说明查找失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8.4-有序表查找">8.4 有序表查找<a title="#8.4-有序表查找" href="#8.4-有序表查找"></a></h4><h5 id="8.4.1-折半查找/二分查找">8.4.1 折半查找/二分查找<a title="#8.4.1-折半查找/二分查找" href="#8.4.1-折半查找/二分查找"></a></h5><p>前提是线性表中的记录是关键码有序(通常从小到大)，线性表必须采用顺序存储。</p><p>时间复杂度：O(logn)</p><p>![image-20200716173726439](/Users/mac/Library/Application Support/typora-user-images/image-20200716173726439.png)</p><h5 id="8.4.2-插值查找">8.4.2 插值查找<a title="#8.4.2-插值查找" href="#8.4.2-插值查找"></a></h5><h5 id="8.4.3-斐波那契查找">8.4.3 斐波那契查找<a title="#8.4.3-斐波那契查找" href="#8.4.3-斐波那契查找"></a></h5><h4 id="8.5-线性索引查找">8.5 线性索引查找<a title="#8.5-线性索引查找" href="#8.5-线性索引查找"></a></h4><p>对于增长较快的数据集，要保证记录中某个关键字有序，时间代价是非常高昂的，这种数据通常都是先后顺序存储。</p><p>对于这样的查找表我们引入了索引。</p><p>索引：是为了加快查找速度而设计的一种数据结构，<strong>就是把一个关键字与它对应的记录相关联的过程</strong>，一个索引由所感个索引项构成，每个索引项应至少包含关键字和其对应的记录在存储器中的位置等信息。索引技术是组织大型数据库及磁盘文件的一种重要技术。</p><p>索引按照结构分为：线性索引，树形索引和多级索引。</p><h5 id="8.5.1-稠密索引">8.5.1 稠密索引<a title="#8.5.1-稠密索引" href="#8.5.1-稠密索引"></a></h5><p>稠密索引是指在线性索引中，将数据集中的每个记录对应一个索引项。</p><p>对于稠密索引这个索引表来说，索引项一定是按照关键码有序的排列。</p><h5 id="8.5.2-分块索引">8.5.2 分块索引<a title="#8.5.2-分块索引" href="#8.5.2-分块索引"></a></h5><p>分块有序，是把数据集的记录分成了若干块，且要满足以下两个条件：</p><ol><li>块内无序：每一块内的记录不要求有序。</li><li>块间有序：如要求第二块所有记录的关键字均要大于第一块中记录的关键字。</li></ol><p>定义：对于分块有序的数据集，将每块对应一个索引项。</p><p>定义的分块索引的索引项结构分三个数据项：</p><ol><li>最大关键码：每一块中的最大关键字。</li><li>块中的记录个数。</li><li>指向块首数据元素的指针，便于开始进行遍历。</li></ol><h5 id="8.5.3-倒排索引">8.5.3 倒排索引<a title="#8.5.3-倒排索引" href="#8.5.3-倒排索引"></a></h5><p>倒排索引源于实际应用中需要根据属性(或字段，次关键码)的值来查找记录。这种索引表中的每一项都包括一个属性值和具有该属性值的各记录的地址。由于不是由记录来确定属性值，而是由属性值来确定记录的位置，因为称为倒排索引。</p><h4 id="8.6-二叉排序树">8.6 二叉排序树<a title="#8.6-二叉排序树" href="#8.6-二叉排序树"></a></h4><ol><li>二叉树结点结构</li><li>查找：递归</li><li>插入： todo</li><li>删除： todo</li></ol><h4 id="8.7-平衡二叉树(avl树)">8.7 平衡二叉树(AVL树)<a title="#8.7-平衡二叉树(avl树)" href="#8.7-平衡二叉树(avl树)"></a></h4><p>平衡二叉树是一种二叉排序树，其中每个节点的左子树和右子树的高度差至多等于1。它是一种高度平衡的二叉排序树。将二叉树结点的左子树深度减去右子树深度的值称为平衡因子BF, 平衡因子只可能是-1,0和1。</p><p>距离插入结点最近的，且平衡因子的绝对值大于 1 的结点为根的子树，称为最小不平衡子树。</p><p>查找，插入和删除的时间复杂度：O(nlogn)</p><h5 id="8.7.1-实现原理">8.7.1 实现原理<a title="#8.7.1-实现原理" href="#8.7.1-实现原理"></a></h5><h4 id="8.8-多路查找树">8.8 多路查找树<a title="#8.8-多路查找树" href="#8.8-多路查找树"></a></h4><p>每一个结点的孩子数可以多于两个，且每一个结点可以存储多个元素。</p><p>特殊形式：2-3树，2-3-4树，B树，B+树</p><h5 id="8.8.3-b树">8.8.3 B树<a title="#8.8.3-b树" href="#8.8.3-b树"></a></h5><p>是一种平衡的多路查找树，结点最大的孩子数目称为B树的阶，2-3树是3阶B树，2-3-4树是4阶B树。</p><p>一个m阶的B树具有如下属性：</p><ul><li>如果根节点不是叶结点，则至少有两棵子树。</li><li>每一个非根的分支结点都有 k-1 个元素和 k 个孩子，其中 m/2 &lt;= k &lt;= m。</li><li>所有叶子结点都位于同一层次。</li></ul><h5 id="8.8.4-b+树">8.8.4 B+树<a title="#8.8.4-b+树" href="#8.8.4-b+树"></a></h5><h4 id="8.9-散列表查找(哈希表)概述">8.9 散列表查找(哈希表)概述<a title="#8.9-散列表查找(哈希表)概述" href="#8.9-散列表查找(哈希表)概述"></a></h4><h5 id="8.9.1-定义">8.9.1 定义<a title="#8.9.1-定义" href="#8.9.1-定义"></a></h5><p>散列技术是在记录的存储位置和它的关键字之间建立一个确定的对应关系f。使得每个关键字 key 对应一个存储位置 f(key)。查找时，根据这个确定的对应关系找到给定值 key 的映射 f(key)，若查找集合中存在这个记录，则在 f(key) 的位置。</p><p>这种对应关系 f 称为散列函数，也叫哈希函数。采用散列技术存储记录的连续存储空间称为散列表或哈希表。关键字对应的记录存储位置称为散列地址。</p><h5 id="8.9.2-查找步骤">8.9.2 查找步骤<a title="#8.9.2-查找步骤" href="#8.9.2-查找步骤"></a></h5><p>在存储和查找时，通过散列函数计算记录的散列地址，按照该地址存储或访问该记录。散列技术既是一种存储方法，也是一种查找方法。</p><p>散列技术的记录之间不存在逻辑关系，只与关键字有关，因此，散列主要是面向查找的存储结构。</p><p>冲突： 两个关键字不相等，地址相等，称为冲突，并把这两个关键字称为这个散列函数的同义词。</p><h4 id="8.10-散列函数的构造方法">8.10 散列函数的构造方法<a title="#8.10-散列函数的构造方法" href="#8.10-散列函数的构造方法"></a></h4><ol><li><p>计算简单</p><p>计算时间不应超过其他查找技术与关键字比较的时间。</p></li><li><p>散列地址分布均匀</p><p>可以保证存储空间的有效利用，并减少为处理冲突而耗费的时间。</p></li></ol><h4 id="8.11-实现-todo">8.11 实现 todo<a title="#8.11-实现-todo" href="#8.11-实现-todo"></a></h4><hr><h3 id="第九章-排序">第九章 排序<a title="#第九章-排序" href="#第九章-排序"></a></h3><h4 id="9.2-基本概念与分类">9.2 基本概念与分类<a title="#9.2-基本概念与分类" href="#9.2-基本概念与分类"></a></h4><h5 id="9.2.1-排序的稳定性">9.2.1 排序的稳定性<a title="#9.2.1-排序的稳定性" href="#9.2.1-排序的稳定性"></a></h5><p>如果两个记录相等，排序后位置不变，则是稳定的，否则称所用的排序方法是不稳定的。</p><h5 id="9.2.3-内排序与外排序">9.2.3 内排序与外排序<a title="#9.2.3-内排序与外排序" href="#9.2.3-内排序与外排序"></a></h5><p>根据排序过程中待排序的记录是否全部被放置在内存中，排序分为内排序和外排序。</p><p>外排序是由于排序的记录个数太多，不能同时放置在内存，整个排序过程需要在内外存之间多次交换数据才能进行。</p><p>对于内排序来说，排序算法的性能受三个方面影响：</p><ol><li>时间性能</li><li>辅助空间</li><li>算法的复杂度</li></ol><h4 id="9.3-冒泡排序">9.3 冒泡排序<a title="#9.3-冒泡排序" href="#9.3-冒泡排序"></a></h4><ul><li><p>基本思想: 两两比较，反序则交换，直到没有反序的记录为止。</p></li><li><p>时间复杂度: O(n^2)</p></li></ul><h5 id="9.3.1-冒泡排序算法">9.3.1 冒泡排序算法<a title="#9.3.1-冒泡排序算法" href="#9.3.1-冒泡排序算法"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span> (<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> len = array.length</span><br><span class="line">  <span class="keyword">if</span> (!len) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; len;i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = len<span class="number">-1</span>;j &gt; i;j--)&#123;</span><br><span class="line">      <span class="keyword">if</span> (array[j<span class="number">-1</span>] &gt; array[j]) &#123;</span><br><span class="line">        swap(array, j<span class="number">-1</span>, j)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9.3.2-优化版">9.3.2 优化版<a title="#9.3.2-优化版" href="#9.3.2-优化版"></a></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubblePlus</span> (<span class="params">array</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> len = array.length</span><br><span class="line">  <span class="keyword">if</span> (!len) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; len &amp;&amp; flag;i++) &#123;</span><br><span class="line">    flag = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = len<span class="number">-1</span>;j &gt; i;j--)&#123;</span><br><span class="line">      <span class="keyword">if</span> (array[j<span class="number">-1</span>] &gt; array[j]) &#123;</span><br><span class="line">        swap(array, j<span class="number">-1</span>, j)</span><br><span class="line">        flag = <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9.4-简单选择排序">9.4 简单选择排序<a title="#9.4-简单选择排序" href="#9.4-简单选择排序"></a></h4><ul><li>基本思想: 通过n-1次关键词的比较，从n-i+1个关键字中找到最小的关键字并和第i个关键字交换。</li><li>时间复杂度: O(n^2)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">select</span> (<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> len = array.length</span><br><span class="line">  <span class="keyword">if</span> (!len) <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; len;i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> temp = i</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; len;j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (array[j] &lt; array[temp]) temp = j</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (temp !== i) swap(array, temp, i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9.5-直接插入排序">9.5 直接插入排序<a title="#9.5-直接插入排序" href="#9.5-直接插入排序"></a></h4><ul><li>基本思想: 将一个记录插入到已经排好序的有序表中，从而得到一个新的记录加一的有序表。</li><li>时间复杂度: O(n^2)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span> (<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> len = array.length</span><br><span class="line">  <span class="keyword">if</span>(!len) <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; array[j] &lt; array[j<span class="number">-1</span>] &amp;&amp; j &gt; <span class="number">-1</span>; j--) &#123;</span><br><span class="line">      swap(array, j, j<span class="number">-1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9.6-希尔排序">9.6 希尔排序<a title="#9.6-希尔排序" href="#9.6-希尔排序"></a></h4><ul><li>基本思想: 也称递减增量排序算法，是插入排序的一种更高效的改进版本,希尔排序是非稳定排序算法。希尔排序的基本思想是先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录&quot;基本有序&quot;时，再对全体记录进行依次直接插入排序。</li><li>时间复杂度: 优于O(n^2)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shell</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length,</span><br><span class="line">        gap = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(gap &lt; len/<span class="number">3</span>) &#123; <span class="comment">// 动态获取增量</span></span><br><span class="line">        gap = gap * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (gap; gap &gt; <span class="number">0</span>; gap = <span class="built_in">Math</span>.floor(gap/<span class="number">3</span>)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = gap; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> temp = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = i-gap; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j-=gap) &#123;</span><br><span class="line">                arr[j+gap] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j+gap] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9.7-堆排序">9.7 堆排序<a title="#9.7-堆排序" href="#9.7-堆排序"></a></h4><ul><li>时间复杂度: O(nlogn)</li></ul><h4 id="9.8-归并排序">9.8 归并排序<a title="#9.8-归并排序" href="#9.8-归并排序"></a></h4><ul><li>原理: 假设初始序列含有 n 个记录。则可以看成是n个有序的子序列，每个子序列的长度为1，然后两两归并，得到 n/2 个长度为 2 或者 1 的有序子序列，再两两归并，直到得到一个长度为n的有序序列为止。这种排序方法称为2路归并排序。</li></ul><h5 id="9.8.1-递归实现">9.8.1 递归实现<a title="#9.8.1-递归实现" href="#9.8.1-递归实现"></a></h5><ul><li>时间复杂度: O(nlogn)</li><li>空间复杂度: O(n+nlogn)</li></ul><h5 id="9.8.1-非递归实现">9.8.1 非递归实现<a title="#9.8.1-非递归实现" href="#9.8.1-非递归实现"></a></h5><ul><li>空间复杂度: O(n)</li></ul><h4 id="9.9-快速排序">9.9 快速排序<a title="#9.9-快速排序" href="#9.9-快速排序"></a></h4><ul><li>时间复杂度: O(nlogn)</li><li>空间复杂度: O(logn)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick</span> (<span class="params">array, start, end</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (start &lt; end) &#123;</span><br><span class="line">    <span class="keyword">const</span> piovt = getPiovt(array, start, end)</span><br><span class="line">    quick(array, start, piovt<span class="number">-1</span>)</span><br><span class="line">    quick(array, piovt+<span class="number">1</span>, end)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPiovt</span>(<span class="params">array, i, j</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> piovt = array[i]</span><br><span class="line">  <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j &amp;&amp; array[j] &gt;= piovt) &#123;</span><br><span class="line">      j--</span><br><span class="line">    &#125;</span><br><span class="line">    array[i] = array[j]</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j &amp;&amp; array[i] &lt;= piovt) &#123;</span><br><span class="line">      i++</span><br><span class="line">    &#125;</span><br><span class="line">    array[j] = array[i]</span><br><span class="line">  &#125;</span><br><span class="line">  array[i] = piovt</span><br><span class="line">  <span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9.9.2-优化">9.9.2 优化<a title="#9.9.2-优化" href="#9.9.2-优化"></a></h5><ol><li>三数取中法</li></ol><p>![image-20200724120846447](/Users/mac/Library/Application Support/typora-user-images/image-20200724120846447.png)</p><ol start="2"><li>不必要的交换</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h3 id=&quot;第一章-绪论&quot;&gt;第一章 绪论&lt;a title=&quot;#第一章-绪论&quot; href=&quot;#第一章-绪论&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;1.4-概念和术语&quot;&gt;1.4 概念和术语&lt;a title=&quot;#1.4-概念和术语&quot; href=&quot;#1.4-概念和术语&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="编程技术" scheme="http://qiuxiaori.github.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="数据结构" scheme="http://qiuxiaori.github.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>能看的Hexo主题</title>
    <link href="http://qiuxiaori.github.com/2020/07/24/%E8%83%BD%E7%9C%8B%E7%9A%84Hexo%E4%B8%BB%E9%A2%98/"/>
    <id>http://qiuxiaori.github.com/2020/07/24/%E8%83%BD%E7%9C%8B%E7%9A%84Hexo%E4%B8%BB%E9%A2%98/</id>
    <published>2020-07-23T20:09:03.869Z</published>
    <updated>2020-07-23T20:09:03.869Z</updated>
    
    <content type="html"><![CDATA[<p>一些还算能看的主题收藏备用</p><p>hexo官方主题库: <a href="https://hexo.io/themes/" target="_blank">Themes</a></p><a id="more"></a><h3 id="1.ocean">1.ocean<a title="#1.ocean" href="#1.ocean"></a></h3><ul><li>预览: <a href="https://zhwangart.github.io/" target="_blank">Preview</a></li><li>地址: <a href="https://github.com/zhwangart/hexo-theme-ocean" target="_blank">Github</a></li><li>部分功能: 本地搜索/阅读更多/评论系统</li></ul><h3 id="2.butterfly">2.butterfly<a title="#2.butterfly" href="#2.butterfly"></a></h3><ul><li>预览: <a href="https://demo.jerryc.me/" target="_blank">Preview</a></li><li>地址: <a href="https://github.com/jerryc127/hexo-theme-butterfly" target="_blank">Github</a></li><li>部分功能: 文章封面/文章分享/评论系统/背景特效/自定义修改配色</li></ul><h3 id="3.matery">3.matery<a title="#3.matery" href="#3.matery"></a></h3><ul><li>预览: <a href="http://blinkfox.com/" target="_blank">Preview</a></li><li>地址: <a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank">Github</a></li></ul><h3 id="4.next">4.next<a title="#4.next" href="#4.next"></a></h3><ul><li>预览: <a href="http://blinkfox.com/" target="_blank">Preview</a></li><li>地址: <a href="https://github.com/theme-next/hexo-theme-next" target="_blank">Github</a></li></ul><h3 id="5.cactus">5.cactus<a title="#5.cactus" href="#5.cactus"></a></h3><ul><li>预览: <a href="http://blinkfox.com/" target="_blank">Preview</a></li><li>地址: <a href="https://github.com/zhwangart/hexo-theme-ocean" target="_blank">Github</a></li></ul><h3 id="6.maupassant">6.maupassant<a title="#6.maupassant" href="#6.maupassant"></a></h3><ul><li>预览: <a href="https://www.haomwei.com/" target="_blank">Preview</a></li><li>地址: <a href="https://github.com/tufu9441/maupassant-hexo" target="_blank">Github</a></li></ul><h3 id="7.yun">7.yun<a title="#7.yun" href="#7.yun"></a></h3><ul><li>预览: <a href="https://www.yunyoujun.cn" target="_blank">Preview</a></li><li>地址: <a href="https://github.com/YunYouJun/hexo-theme-yun" target="_blank">Github</a></li></ul><h3 id="8.icarus">8.Icarus<a title="#8.icarus" href="#8.icarus"></a></h3><ul><li>地址: <a href="https://github.com/ppoffice/hexo-theme-icarus" target="_blank">Github</a></li></ul><h3 id="9.icarus-rtl-jalaali">9.icarus-rtl-jalaali<a title="#9.icarus-rtl-jalaali" href="#9.icarus-rtl-jalaali"></a></h3><!-- * 预览: [Preview](http://blinkfox.com/) --><ul><li>地址: <a href="http://ghaseminya.ir/" target="_blank">Github</a></li></ul><h3 id="10.volantis">10.volantis<a title="#10.volantis" href="#10.volantis"></a></h3><ul><li>地址: <a href="https://github.com/volantis-x/volantis-docs/" target="_blank">Github</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;一些还算能看的主题收藏备用&lt;/p&gt;
&lt;p&gt;hexo官方主题库: &lt;a href=&quot;https://hexo.io/themes/&quot; target=&quot;_blank&quot;&gt;Themes&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="hexo" scheme="http://qiuxiaori.github.com/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://qiuxiaori.github.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>随笔</title>
    <link href="http://qiuxiaori.github.com/2020/07/24/%E9%9A%8F%E7%AC%94/"/>
    <id>http://qiuxiaori.github.com/2020/07/24/%E9%9A%8F%E7%AC%94/</id>
    <published>2020-07-23T20:09:03.869Z</published>
    <updated>2020-08-07T13:21:00.758Z</updated>
    
    <content type="html"><![CDATA[<p>不必要的想法。</p><a id="more"></a><h3 id="一">一<a title="#一" href="#一"></a></h3><p>毕业季已经接近尾声，高考结束也有几日了，大学毕业也有一年多了，因为跳槽太多次，至今没有对哪家公司产生什么归属感，倒是上家公司的同事都挺好的，想来有点可惜。<br>我的性格是偏消极的，处事也总是破罐子破摔巴不得把事情向糟糕的绝望的境地推动，然而奇妙的是，可能内心深处始终自觉不愿真的变成一个悲惨的人，凡事也都歪打正着的向不错的方向发展，遇到机会也能勉强把握到，这大概是我现在过的还不赖的原因把。<br>初中有个女同学，性格和我有几分相似，都是大大咧咧的，学习比我还要好上一些，不知怎的，高中一蹶不起，最后只读了个专科，后来才从同学口中得知她爸爸出轨之类的家庭变故导致高中无心学习，现在只是在朋友圈里做做微商而已。念人之境遇，唏嘘不已。我初高中的家庭情况，和这位女同学也差不了太多，家里总是无休止的吵架，不同的是我考上了个还不错的大学，随后的家庭地位不可同日而语。若是我们两个家庭都很平稳幸福，以我们的智商考上好的大学不成问题。而家庭幸福的人，即便智商不足，父母也愿意请家教或报辅导报来减少差距。这是多么古怪的事情。<br>每每高考结束，人们反而开始宣扬，高考不是唯一的出路，没有考好不要紧，这种听上去很马后炮又搞笑的话。高考失利而跳楼的学生每年可不在少数，对于家庭背景不错的人而言，考的如何确实不是问题，但是对于背负着全家的希望的人而言，高考，乃至中考，十年的教育都是永远萦绕脑海里的噩梦。时至今日，我还常常会做高中复读，或是大学劝退重考高考这样的梦，醒来能体味到害怕的感觉，心里倍感荒凉。我算是高考超常发挥了五十分，正是超常发挥总让我忍不住想，假如我没有比平时多这五十分呢，我岂不是只能读一个垃圾二本，过悲惨的人生，依然在家里过没有地位的生活了吗，虽然这样的想法无异于自寻烦恼，但是反过来有会觉得庆幸，大概就是这么矛盾的心理。<br>我想说的是，自高考恢复以来，中国的教育就变得越发的恐怖，外国考不上好大学的人依然可以过的很快乐，但在中国，没有读大学就自觉低人一等，我是个很看重学历的人，因为我自己也是千辛万苦跨过独木桥的人，这个社会让我的认知不可能不看重学历。所以，我希望的是，每个人都能不那么有压力的在安稳幸福的家庭里，不必带着背水一战的心情去学习，去为了高考付出美好的青春，学习之余都能快乐些，教育，永远不该是这么痛苦的一件事。</p><h3 id="二">二<a title="#二" href="#二"></a></h3><p>觉得事情有些离谱，是从maestro项目快要开始测试产品才突然想起来要加测试机的预算的时候，安卓和苹果都要顶配的机子，都大言不惭的要两台。我有点疑惑，之前没有用剩下的手机吗，而且一个不大的软件顶配未免有点大材小用了吧(而且三星的机器那么高配都好垃圾啊，还不如千元机)，但是没人觉得奇怪，一切理所当然。<br>然后更神奇的是每当有新项目，就像安排新手机一样增加人手，不同的是这个需要麻烦到hr，实际上就我肉眼可见大部分人都挺闲的，哪怕每个人协调下也不至于接不下来新工作，毕竟我之前的公司都忙的多的多，一个需求说真的，个把小时就写完了尤其是连单测都没有。但是就是要招新人，哪怕大部分人十一点才到公司，中午休息时间两个小时，每个人屏幕大部分时间都是和工作无关的内容，晚上还按点就可以下班，这样的工作量的情况下，还是要招新人，新项目做完了怎么办呢，就如同测试用剩下的手机一样不知所踪吗。<br>曾经和对象因为他说我是码农而吵了一架，我心里也清楚，程序员就跟奶牛一样，吃的是草，挤出来的是奶，学着令人头秃的技术，往往还要面临着不怎么高的地位。但我不愿意这么想，我觉得敲代码挺高兴的，不用和人打交道，也不用低三下四低眉顺眼低声下气的，蛮好的。但是没想到在公司，年幼无知的我平生第一次真切感受到了码农末流的地位，除了某老外还算比较亲善之外，king开起会来总是别人欠他钱的亚子，可能这样显得比较酷吧，至于menson，严格一点都可以算上性骚扰了吧，无聊的黄色笑话，大声打电话和女人聊床事，还喊别人处男。没事就拉着组长开会，除了吼没有一点核心内容，我寻思组长也没干啥啊，咋就天天被拎过去一顿熊，冤不冤啊，你要人家怎么做之前至少好好告诉人家你希望怎么做吧，而不是上来：我有告诉你不能这样这样吧，我就，地铁 老爷爷 看手机…<br>最最震撼我妈的是每次开会都有那么多人，大部相关的和稍微跟项目沾点关系的十几个人隆隆重重地都要去开会，需求会也好，例会也罢，和每个人相关的不过十之二三，但是不去也不行，于是便都去，于是便满满当当的会议，于是两三分钟能讲完的东西七嘴八舌扯上好久，我至今好奇，会议的主导人电脑的某个文件夹是否存在这个会议的大纲，啊，你说你也不知道，那你为什么要浪费大家的时间，开个会的功夫我都能睡着了。<br>还有okr，这个东西，简直是西方资本主义的糟粕，和产品经理一样没有存在的必要，我真的不知道我们做技术的，一条一条的需求怎么给你编成okr，而且这个okr居然还可以不完成？所以到底有什么存在的意义。还有日报，oa这个项目，，说句实在话真的很难用，不如花点钱上企业微信，或者花点时间设计好吧。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;不必要的想法。&lt;/p&gt;</summary>
    
    
    
    <category term="生活方式" scheme="http://qiuxiaori.github.com/categories/%E7%94%9F%E6%B4%BB%E6%96%B9%E5%BC%8F/"/>
    
    
    <category term="日记" scheme="http://qiuxiaori.github.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>rss订阅</title>
    <link href="http://qiuxiaori.github.com/2020/07/24/rss%E8%AE%A2%E9%98%85%E7%88%B1%E4%BA%86/"/>
    <id>http://qiuxiaori.github.com/2020/07/24/rss%E8%AE%A2%E9%98%85%E7%88%B1%E4%BA%86/</id>
    <published>2020-07-23T20:09:03.862Z</published>
    <updated>2020-07-23T20:09:03.863Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>搭建完自己的小博客后突然就对 rss 订阅产生了兴趣，查阅了之后觉得这中订阅方式真是太适合我这种懒人了，能把所有感兴趣的内容放在一个地方阅读，虽然 9012 年了，rss 没有之前火热了，但是我觉得还是很应该大力推广的。</p></blockquote><a id="more"></a><h3 id="阅读器">阅读器<a title="#阅读器" href="#阅读器"></a></h3><p>rss 订阅自然需要阅读起来阅读订阅源，阅读器分为客户端和在线版。我选择的是<a href="https://feeder.co/reader" target="_blank">feeder</a>在线阅读器，也符合我懒的作风，阅读方便，不需要额外多开软件。进去后注册，并在左侧功能栏 ‘Add Feed’ 中添加订阅源。想要阅读订阅的 rss 源只要打开这个网页就能方便的浏览啦。</p><h3 id="我的订阅源">我的订阅源<a title="#我的订阅源" href="#我的订阅源"></a></h3><ol><li>编程<br><a href="https://www.williamlong.info/rss.xml" target="_blank">月光博客</a><br><a href="https://rsshub.app/toutiao/today" target="_blank">开发者头条</a></li><li>游戏<br><a href="https://www.yystv.cn/rss/feed" target="_blank">游研社</a><br><a href="https://www.gcores.com/rss" target="_blank">机核网</a><br><a href="https://rsshub.app/lfsyd/2" target="_blank">旅法师营地-炉石传说</a><br><a href="https://rsshub.app/gamersky/news" target="_blank">游民星空-今日推荐</a></li><li>资讯<br><a href="https://feeds.appinn.com/appinns/" target="_blank">小众软件</a><br><a href="https://rsshub.app/zhihu/daily" target="_blank">知乎日报</a><br><a href="https://www.zhihu.com/rss" target="_blank">知乎每日精选</a><br><a href="https://rsshub.app/anitama" target="_blank">Anitama</a></li><li>书籍<br><a href="https://www.shuge.org/feed/" target="_blank">书格</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;搭建完自己的小博客后突然就对 rss 订阅产生了兴趣，查阅了之后觉得这中订阅方式真是太适合我这种懒人了，能把所有感兴趣的内容放在一个地方阅读，虽然 9012 年了，rss 没有之前火热了，但是我觉得还是很应该大力推广的。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="生活方式" scheme="http://qiuxiaori.github.com/categories/%E7%94%9F%E6%B4%BB%E6%96%B9%E5%BC%8F/"/>
    
    
    <category term="教程" scheme="http://qiuxiaori.github.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>log4js实战</title>
    <link href="http://qiuxiaori.github.com/2020/07/24/log4js%E5%AE%9E%E6%88%98/"/>
    <id>http://qiuxiaori.github.com/2020/07/24/log4js%E5%AE%9E%E6%88%98/</id>
    <published>2020-07-23T20:09:03.858Z</published>
    <updated>2020-08-02T12:53:40.686Z</updated>
    
    <content type="html"><![CDATA[<p>工作啦这么久，终于有机会自己从头搭日志啦，开心～<br>用的是 log4js 包</p><a id="more"></a><h4 id=""><a title="#" href="#"></a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">import &#123; configure, getLogger &#125; from &#39;log4js&#39;</span><br><span class="line">import &#123; create &#125; from &#39;..&#x2F;daos&#x2F;logger&#39;</span><br><span class="line">import &#123; PRODUCTION, TEST &#125; from &#39;..&#x2F;interfaces&#x2F;constant&#39;</span><br><span class="line"></span><br><span class="line">const NODE_ENV &#x3D; process.env.NODE_ENV</span><br><span class="line"></span><br><span class="line">configure(&#123;</span><br><span class="line">  appenders: &#123;</span><br><span class="line">    out: &#123; type: &#39;stdout&#39; &#125;,</span><br><span class="line">    overDebug: &#123; type: &#39;stdout&#39; &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  categories: &#123;</span><br><span class="line">    default: &#123; appenders: [&#39;out&#39;], level: &#39;all&#39; &#125;,</span><br><span class="line">    info: &#123; appenders: [&#39;overDebug&#39;], level: &#39;info&#39; &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">export default class Log &#123;</span><br><span class="line">  constructor(public fileName: string) &#123;</span><br><span class="line">    this.fileName &#x3D; fileName</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   *</span><br><span class="line">   * @param location</span><br><span class="line">   * @param partContent</span><br><span class="line">   * @param error</span><br><span class="line">   *&#x2F;</span><br><span class="line">  public async error(location: string, partContent: Record&lt;string, unknown&gt;, error: Error): Promise&lt;void&gt; &#123;</span><br><span class="line">    await wrapLog(&#39;error&#39;, this.fileName, location, &#123; error: error.stack, ...partContent &#125;, error.name)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   *</span><br><span class="line">   * @param location</span><br><span class="line">   * @param content</span><br><span class="line">   *&#x2F;</span><br><span class="line">  public async info(location: string, content: Record&lt;string, unknown&gt;): Promise&lt;void&gt; &#123;</span><br><span class="line">    await wrapLog(&#39;info&#39;, this.fileName, location, content)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;**</span><br><span class="line">   *</span><br><span class="line">   * @param location</span><br><span class="line">   * @param content</span><br><span class="line">   *&#x2F;</span><br><span class="line">  public async debug(location: string, content: Record&lt;string, unknown&gt;): Promise&lt;void&gt; &#123;</span><br><span class="line">    await wrapLog(&#39;debug&#39;, this.fileName, location, content)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 根据 NODE_ENV 打印或保存日志信息</span><br><span class="line"> * @param level 错误级别 debug&#x2F;info&#x2F;error</span><br><span class="line"> * @param fileName 所在文件</span><br><span class="line"> * @param location 所在方法 或 操作描述</span><br><span class="line"> * @param content 日志内容</span><br><span class="line"> * @param errorName 错误名称</span><br><span class="line"> *&#x2F;</span><br><span class="line">export async function wrapLog(</span><br><span class="line">  level: string,</span><br><span class="line">  fileName: string,</span><br><span class="line">  location: string,</span><br><span class="line">  content: Record&lt;string, unknown&gt;,</span><br><span class="line">  errorName &#x3D; &#39;&#39;,</span><br><span class="line">): Promise&lt;void&gt; &#123;</span><br><span class="line">  const contentStr &#x3D; JSON.stringify(content)</span><br><span class="line">  &#x2F;&#x2F; 控制台打印</span><br><span class="line">  let info &#x3D; &#96;$&#123;fileName&#125; - $&#123;location&#125;: $&#123;contentStr&#125;&#96;</span><br><span class="line">  if (errorName) &#123;</span><br><span class="line">    info +&#x3D; &#96;, errorName: $&#123;errorName&#125;&#96;</span><br><span class="line">  &#125;</span><br><span class="line">  if (NODE_ENV &#x3D;&#x3D;&#x3D; PRODUCTION) &#123;</span><br><span class="line">    &#x2F;&#x2F; 生产环境只输出 &#39;debug&#39; 以上的日志</span><br><span class="line">    getLogger(&#39;overDebug&#39;)[level](info)</span><br><span class="line">  &#125;</span><br><span class="line">  getLogger(&#39;out&#39;)[level](info)</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; 测试环境所有日志 或 生产环境 debug 以上的日志 存储到数据库</span><br><span class="line">  const isSaveProd &#x3D; NODE_ENV &#x3D;&#x3D;&#x3D; PRODUCTION &amp;&amp; (level &#x3D;&#x3D;&#x3D; &#39;info&#39; || level &#x3D;&#x3D;&#x3D; &#39;error&#39;)</span><br><span class="line">  const isSaveTest &#x3D; NODE_ENV &#x3D;&#x3D;&#x3D; TEST</span><br><span class="line">  if (isSaveProd || isSaveTest) &#123;</span><br><span class="line">    await create(level, fileName, location, contentStr, errorName)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;工作啦这么久，终于有机会自己从头搭日志啦，开心～&lt;br&gt;
用的是 log4js 包&lt;/p&gt;</summary>
    
    
    
    <category term="编程技术" scheme="http://qiuxiaori.github.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Hexo搭建一个博客[Mac版]</title>
    <link href="http://qiuxiaori.github.com/2020/07/24/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://qiuxiaori.github.com/2020/07/24/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2020-07-23T20:09:03.855Z</published>
    <updated>2020-07-23T20:09:03.857Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><a id="more"></a><h3 id="一.搭建博客">一.搭建博客<a title="#一.搭建博客" href="#一.搭建博客"></a></h3><ol><li>开发环境<ul><li><a href="https://nodejs.org/en/" target="_blank">Node.js</a>   下载对应平台系统安装包按提示安装，在命令行输入下边代码，提示版本号即为安装成功。<br><code>node -v或 node --version</code></li><li><a href="https://git-scm.com/download" target="_blank">Git</a>   git是一个版本管理工具，安装后就可以使用git命令管理项目了。</li></ul></li><li>安装Hexo<br>命令行运行以下代码<br><code>npm install -g hexo-cli</code></li><li>初始化博客框架<code>js hexo init [blog_name]         //在要创建博客的路径下,blog_name为你的博客名称 cd [blog_name]                //移动到博客项目 npm install                   //安装依赖 hexo server                   //启动博客</code><br>浏览器打开<a href="http://localhost:4000/" target="_blank">http://localhost:4000/</a>看到你的博客主页了。</li></ol><h3 id="二.修改主题">二.修改主题<a title="#二.修改主题" href="#二.修改主题"></a></h3><ol><li>博客搭好后可以按照喜好配置主题，个人比较喜欢以下几款：</li></ol><ul><li><a href="git@github.com:nameoverflow/hexo-theme-icalm.git">icalm</a></li><li><a href="git@github.com:sun11hexo-theme-paperbox.git">paperbox</a></li><li><a href="git@github.com:fi3ework/hexo-theme-archer.git">archer</a></li><li>更多主题见<a href="https://hexo.io/themes/" target="_blank">官网主题</a></li></ul><ol start="2"><li>使用方法</li></ol><ul><li>下载主题并放到项目themes文件夹下</li><li>找到项目根目录 _config.yml文件</li><li>找到theme属性，修改为主题对应的文件夹名称即可</li></ul><h3 id="三.部署到github">三.部署到github<a title="#三.部署到github" href="#三.部署到github"></a></h3><p><strong>默认已有github账号，并添加过ssh，如果没有，自行谷歌</strong></p><ol><li>新建仓库<br>仓库名为：&lt;Github账号名称&gt;.github.io</li><li>配置项目<br>在项目根目录的_config.yml文件最后添加如下代码：<code>js deploy: type: git  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io branch: master</code></li><li>部署项目</li></ol><ul><li>安装hexo-deployer-git插件，在命令行运行以下命令：<br><code>npm install hexo-deployer-git --save</code></li><li>推送到GithubPages。<br>在命令行（即Git Bash）依次输入以下命令， 返回INFO Deploy done: git即成功推送：<code>js hexo g hexo d</code></li></ul><ol start="4"><li>等待1分钟左右，浏览器访问网址： https://&lt;Github账号名称&gt;.github.io</li></ol><h3 id="四.多终端同步">四.多终端同步<a title="#四.多终端同步" href="#四.多终端同步"></a></h3><h3 id="五.可视化编辑文章">五.可视化编辑文章<a title="#五.可视化编辑文章" href="#五.可视化编辑文章"></a></h3>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="编程技术" scheme="http://qiuxiaori.github.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="hexo" scheme="http://qiuxiaori.github.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Rxjs学习</title>
    <link href="http://qiuxiaori.github.com/2020/07/23/rxjs%E5%AD%A6%E4%B9%A0/"/>
    <id>http://qiuxiaori.github.com/2020/07/23/rxjs%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-07-23T06:19:09.759Z</published>
    <updated>2020-07-23T08:36:43.788Z</updated>
    
    <content type="html"><![CDATA[<p>RxJS 是一个库，它通过使用 observable 序列来编写异步和基于事件的程序。它提供了一个核心类型 Observable，附属类型 (Observer、 Schedulers、 Subjects) 和受 [Array#extras] 启发的操作符 (map、filter、reduce、every, 等等)，这些数组操作符可以把异步事件作为集合来处理。</p><blockquote><p>可以把 RxJS 当做是用来处理事件的 Lodash</p></blockquote><a id="more"></a><p>ReactiveX 结合了 观察者模式、迭代器模式 和 使用集合的函数式编程，以满足以一种理想方式来管理事件序列所需要的一切。</p><h3 id="基本概念">基本概念<a title="#基本概念" href="#基本概念"></a></h3><ul><li>Observable (可观察对象): 表示一个概念，这个概念是一个可调用的未来值或事件的集合。</li><li>Observer (观察者): 一个回调函数的集合，它知道如何去监听由 Observable 提供的值。</li><li>Sbscription (订阅): 表示 Observable 的执行，主要用于取消 Observable 的执行。</li><li>Operators (操作符): 采用函数式编程风格的纯函数 (pure function)，使用像 map、filter、concat、flatMap 等这样的操作符来处理集合。</li><li>Subject (主体): 相当于 EventEmitter，并且是将值或事件多路推送给多个 Observer 的唯一方式。</li><li>Schedulers (调度器): 用来控制并发并且是中央集权的调度员，允许我们在发生计算时进行协调，例如 setTimeout 或 requestAnimationFrame 或其他。</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;RxJS 是一个库，它通过使用 observable 序列来编写异步和基于事件的程序。它提供了一个核心类型 Observable，附属类型 (Observer、 Schedulers、 Subjects) 和受 [Array#extras] 启发的操作符 (map、filter、reduce、every, 等等)，这些数组操作符可以把异步事件作为集合来处理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以把 RxJS 当做是用来处理事件的 Lodash&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="编程技术" scheme="http://qiuxiaori.github.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="rxjs" scheme="http://qiuxiaori.github.com/tags/rxjs/"/>
    
  </entry>
  
  <entry>
    <title>mac使用指南</title>
    <link href="http://qiuxiaori.github.com/2020/07/22/mac%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://qiuxiaori.github.com/2020/07/22/mac%E5%B0%8F%E6%8A%80%E5%B7%A7/</id>
    <published>2020-07-22T10:16:29.368Z</published>
    <updated>2020-08-02T16:23:42.808Z</updated>
    
    <content type="html"><![CDATA[<p>努力让mac更好用(不一定用得上…</p><a id="more"></a><h4 id="快编程-axe.store">快编程 axe.store<a title="#快编程-axe.store" href="#快编程-axe.store"></a></h4><ul><li>地址: <a href="https://gitee.com/kuaibiancheng/store" target="_blank">gitee</a></li><li>简介: axe.store 是一款 Mac 下的包管理工具，同时支持命令行软件和图形界面软件安装</li><li>安装: <code>/bin/bash -c &quot;$(curl -fsSL https://gitee.com/kuaibiancheng/store/raw/master/install.sh)&quot;</code> 然后输入mac密码</li><li>使用: <code>store.axe sou/get/rm [name]</code></li></ul><h4 id="查看订阅项">查看订阅项<a title="#查看订阅项" href="#查看订阅项"></a></h4><ol><li>打开 App Store App。</li><li>点按边栏底部的登录按钮  或您的姓名。</li><li>点按窗口顶部的 “查看信息”。系统可能会要求您登录。</li><li>在显示的页面上，滚动浏览，直到看到“订阅”，然后点按“管理”。</li><li>点按所需的订阅旁边的“编辑”。没有看到您要查找的订阅？</li><li>点按“取消订阅”。如果您没有看到“取消订阅”，则说明订阅已被取消并且不会续订。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;努力让mac更好用(不一定用得上…&lt;/p&gt;</summary>
    
    
    
    
    <category term="工具" scheme="http://qiuxiaori.github.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>前端页面使用editor编辑器</title>
    <link href="http://qiuxiaori.github.com/2020/07/20/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E4%BD%BF%E7%94%A8markdown%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>http://qiuxiaori.github.com/2020/07/20/%E5%89%8D%E7%AB%AF%E9%A1%B5%E9%9D%A2%E4%BD%BF%E7%94%A8markdown%E7%BC%96%E8%BE%91%E5%99%A8/</id>
    <published>2020-07-20T07:05:18.553Z</published>
    <updated>2020-07-20T07:05:18.553Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>富文本编辑器，Rich Text Editor, 简称 RTE, 是一种可内嵌于浏览器，所见即所得的文本编辑器。富文本编辑器不同于文本编辑器，程序员可到网上下载免费的富文本编辑器内嵌于自己的网站或程序里，方便用户编辑文章或信息。</p></blockquote><a id="more"></a><p>目前常见的富文本编辑器有很多，比如<a href="https://github.com/pandao/editor.md" target="_blank">editor</a>,<a href="https://github.com/showdownjs/showdown" target="_blank">showdown</a>等，个人觉得 editor 使用感不错，简单记录一下在 editor 的使用方式。</p><h3 id="一.获取-editor">一.获取 editor<a title="#一.获取-editor" href="#一.获取-editor"></a></h3><ol><li>Github download<br><code>git clone git@github.com:pandao/editor.md.git</code><br>或见<a href="https://github.com/pandao/editor.md" target="_blank">git 主页</a></li><li>NPM install :<br><code>npm install editor.md</code></li><li>Bower install :<br><code>bower install editor.md</code></li></ol><h3 id="二.使用-editor">二.使用 editor<a title="#二.使用-editor" href="#二.使用-editor"></a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 引入文件，href为存放下载的editor插件的路径</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;editor.md&#x2F;css&#x2F;editormd.min.css&quot; &#x2F;&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;editor.md&#x2F;editormd.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#x2F;&#x2F; 在页面中插入</span><br><span class="line">&lt;div id&#x3D;&quot;editor&quot;&gt;</span><br><span class="line">    &lt;!-- Tips: Editor.md can auto append a &#96;&lt;textarea&gt;&#96; tag --&gt;</span><br><span class="line">    &lt;textarea style&#x3D;&quot;display:none;&quot;&gt;### Hello Editor.md !&lt;&#x2F;textarea&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&#x2F;&#x2F; 初始化editormd</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    $(function() &#123;</span><br><span class="line">        var editor &#x3D; editormd(&quot;editor&quot;, &#123;</span><br><span class="line">            &#x2F;&#x2F; width: &quot;100%&quot;,</span><br><span class="line">            path : &quot;editor.md&#x2F;lib&#x2F;&quot;  &#x2F;&#x2F; 存放下载的editor插件的lib路径</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="三.编辑器初始化属性">三.编辑器初始化属性<a title="#三.编辑器初始化属性" href="#三.编辑器初始化属性"></a></h3><p>重要属性大致介绍，相当于翻译了下注释哈哈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  mode                 : &quot;gfm&quot;,          &#x2F;&#x2F; gfm or markdown[编辑器模式]</span><br><span class="line">  name                 : &quot;&quot;,             &#x2F;&#x2F; Form element name for post[文章标题]</span><br><span class="line">  value                : &quot;&quot;,             &#x2F;&#x2F; value for CodeMirror, if mode not gfm&#x2F;markdown</span><br><span class="line">  theme                : &quot;&quot;,             &#x2F;&#x2F; Editor.md self themes, before v1.5.0 is CodeMirror theme, default empty</span><br><span class="line">  editorTheme          : &quot;default&quot;,      &#x2F;&#x2F; Editor area, this is CodeMirror theme at v1.5.0</span><br><span class="line">  previewTheme         : &quot;&quot;,             &#x2F;&#x2F; Preview area theme, default empty</span><br><span class="line">  markdown             : &quot;&quot;,             &#x2F;&#x2F; Markdown source code</span><br><span class="line">  appendMarkdown       : &quot;&quot;,             &#x2F;&#x2F; if in init textarea value not empty, append markdown to textarea</span><br><span class="line">  width                : &quot;100%&quot;,</span><br><span class="line">  height               : &quot;100%&quot;,</span><br><span class="line">  path                 : &quot;.&#x2F;lib&#x2F;&quot;,       &#x2F;&#x2F; Dependents module file directory</span><br><span class="line">  pluginPath           : &quot;&quot;,             &#x2F;&#x2F; If this empty, default use settings.path + &quot;..&#x2F;plugins&#x2F;&quot;</span><br><span class="line">  delay                : 300,            &#x2F;&#x2F; Delay parse markdown to html, Uint : ms</span><br><span class="line">  autoLoadModules      : true,           &#x2F;&#x2F; Automatic load dependent module files</span><br><span class="line">  watch                : true,</span><br><span class="line">  placeholder          : &quot;Enjoy Markdown! coding now...&quot;,</span><br><span class="line">  gotoLine             : true,           &#x2F;&#x2F; Enable &#x2F; disable goto a line</span><br><span class="line">  codeFold             : false,</span><br><span class="line">  autoHeight           : false,</span><br><span class="line">  autoFocus            : true,           &#x2F;&#x2F; Enable &#x2F; disable auto focus editor left input area</span><br><span class="line">  autoCloseTags        : true,</span><br><span class="line">  searchReplace        : true,           &#x2F;&#x2F; Enable &#x2F; disable (CodeMirror) search and replace function</span><br><span class="line">  syncScrolling        : true,           &#x2F;&#x2F; options: true | false | &quot;single&quot;, default true</span><br><span class="line">  readOnly             : false,          &#x2F;&#x2F; Enable &#x2F; disable readonly mode</span><br><span class="line">  tabSize              : 4,</span><br><span class="line">  indentUnit           : 4,</span><br><span class="line">  lineNumbers          : true,           &#x2F;&#x2F; Display editor line numbers</span><br><span class="line">  lineWrapping         : true,</span><br><span class="line">  autoCloseBrackets    : true,</span><br><span class="line">  showTrailingSpace    : true,</span><br><span class="line">  matchBrackets        : true,</span><br><span class="line">  indentWithTabs       : true,</span><br><span class="line">  styleSelectedText    : true,</span><br><span class="line">  matchWordHighlight   : true,           &#x2F;&#x2F; options: true, false, &quot;onselected&quot;</span><br><span class="line">  styleActiveLine      : true,           &#x2F;&#x2F; Highlight the current line</span><br><span class="line">  dialogLockScreen     : true,</span><br><span class="line">  dialogShowMask       : true,</span><br><span class="line">  dialogDraggable      : true,</span><br><span class="line">  dialogMaskBgColor    : &quot;#fff&quot;,</span><br><span class="line">  dialogMaskOpacity    : 0.1,</span><br><span class="line">  fontSize             : &quot;13px&quot;,</span><br><span class="line">  saveHTMLToTextarea   : false,          &#x2F;&#x2F; If enable, Editor will create a &lt;textarea name&#x3D;&quot;&#123;editor-id&#125;-html-code&quot;&gt; tag save HTML code for form post to server-side.</span><br><span class="line">  disabledKeyMaps      : [],</span><br><span class="line"></span><br><span class="line">  onload               : function() &#123;&#125;,</span><br><span class="line">  onresize             : function() &#123;&#125;,</span><br><span class="line">  onchange             : function() &#123;&#125;,</span><br><span class="line">  onwatch              : null,</span><br><span class="line">  onunwatch            : null,</span><br><span class="line">  onpreviewing         : function() &#123;&#125;,</span><br><span class="line">  onpreviewed          : function() &#123;&#125;,</span><br><span class="line">  onfullscreen         : function() &#123;&#125;,</span><br><span class="line">  onfullscreenExit     : function() &#123;&#125;,</span><br><span class="line">  onscroll             : function() &#123;&#125;,</span><br><span class="line">  onpreviewscroll      : function() &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  imageUpload          : false,          &#x2F;&#x2F; Enable&#x2F;disable upload</span><br><span class="line">  imageFormats         : [&quot;jpg&quot;, &quot;jpeg&quot;, &quot;gif&quot;, &quot;png&quot;, &quot;bmp&quot;, &quot;webp&quot;],</span><br><span class="line">  imageUploadURL       : &quot;&quot;,             &#x2F;&#x2F; Upload url</span><br><span class="line">  crossDomainUpload    : false,          &#x2F;&#x2F; Enable&#x2F;disable Cross-domain upload</span><br><span class="line">  uploadCallbackURL    : &quot;&quot;,             &#x2F;&#x2F; Cross-domain upload callback url</span><br><span class="line"></span><br><span class="line">  toc                  : true,           &#x2F;&#x2F; Table of contents</span><br><span class="line">  tocm                 : false,          &#x2F;&#x2F; Using [TOCM], auto create ToC dropdown menu</span><br><span class="line">  tocTitle             : &quot;&quot;,             &#x2F;&#x2F; for ToC dropdown menu button</span><br><span class="line">  tocDropdown          : false,          &#x2F;&#x2F; Enable&#x2F;disable Table Of Contents dropdown menu</span><br><span class="line">  tocContainer         : &quot;&quot;,             &#x2F;&#x2F; Custom Table Of Contents Container Selector</span><br><span class="line">  tocStartLevel        : 1,              &#x2F;&#x2F; Said from H1 to create ToC</span><br><span class="line">  htmlDecode           : false,          &#x2F;&#x2F; Open the HTML tag identification</span><br><span class="line">  pageBreak            : true,           &#x2F;&#x2F; Enable parse page break [&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;]</span><br><span class="line">  atLink               : true,           &#x2F;&#x2F; for @link</span><br><span class="line">  emailLink            : true,           &#x2F;&#x2F; for email address auto link</span><br><span class="line">  taskList             : false,          &#x2F;&#x2F; Enable Github Flavored Markdown task lists</span><br><span class="line">  emoji                : false,          &#x2F;&#x2F; :emoji: , Support Github emoji, Twitter Emoji (Twemoji);</span><br><span class="line">                                         &#x2F;&#x2F; Support FontAwesome icon emoji :fa-xxx: &gt; Using fontAwesome icon web fonts;</span><br><span class="line">                                         &#x2F;&#x2F; Support Editor.md logo icon emoji :editormd-logo: :editormd-logo-1x: &gt; 1~8x;</span><br><span class="line">  tex                  : false,          &#x2F;&#x2F; TeX(LaTeX), based on KaTeX</span><br><span class="line">  flowChart            : false,          &#x2F;&#x2F; flowChart.js only support IE9+</span><br><span class="line">  sequenceDiagram      : false,          &#x2F;&#x2F; sequenceDiagram.js only support IE9+</span><br><span class="line">  previewCodeHighlight : true,           &#x2F;&#x2F; Enable &#x2F; disable code highlight of editor preview area</span><br><span class="line"></span><br><span class="line">  toolbar              : true,           &#x2F;&#x2F; show or hide toolbar</span><br><span class="line">  toolbarAutoFixed     : true,           &#x2F;&#x2F; on window scroll auto fixed position</span><br><span class="line">  toolbarIcons         : &quot;full&quot;,         &#x2F;&#x2F; Toolbar icons mode, options: full, simple, mini, See &#96;editormd.toolbarModes&#96; property.</span><br><span class="line">  toolbarTitles        : &#123;&#125;,</span><br><span class="line">  toolbarHandlers      : &#123;</span><br><span class="line">      ucwords : function() &#123;</span><br><span class="line">          return editormd.toolbarHandlers.ucwords;</span><br><span class="line">      &#125;,</span><br><span class="line">      lowercase : function() &#123;</span><br><span class="line">          return editormd.toolbarHandlers.lowercase;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  toolbarCustomIcons   : &#123;               &#x2F;&#x2F; using html tag create toolbar icon, unused default &lt;a&gt; tag.</span><br><span class="line">      lowercase        : &quot;&lt;a href&#x3D;\&quot;javascript:;\&quot; title&#x3D;\&quot;Lowercase\&quot; unselectable&#x3D;\&quot;on\&quot;&gt;&lt;i class&#x3D;\&quot;fa\&quot; name&#x3D;\&quot;lowercase\&quot; style&#x3D;\&quot;font-size:24px;margin-top: -10px;\&quot;&gt;a&lt;&#x2F;i&gt;&lt;&#x2F;a&gt;&quot;,</span><br><span class="line">      &quot;ucwords&quot;        : &quot;&lt;a href&#x3D;\&quot;javascript:;\&quot; title&#x3D;\&quot;ucwords\&quot; unselectable&#x3D;\&quot;on\&quot;&gt;&lt;i class&#x3D;\&quot;fa\&quot; name&#x3D;\&quot;ucwords\&quot; style&#x3D;\&quot;font-size:20px;margin-top: -3px;\&quot;&gt;Aa&lt;&#x2F;i&gt;&lt;&#x2F;a&gt;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  toolbarIconTexts     : &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  lang : &#123;  &#x2F;&#x2F; Language data, you can custom your language.</span><br><span class="line">      name        : &quot;zh-cn&quot;,</span><br><span class="line">      description : &quot;开源在线Markdown编辑器&lt;br&#x2F;&gt;Open source online Markdown editor.&quot;,</span><br><span class="line">      tocTitle    : &quot;目录&quot;,</span><br><span class="line">      toolbar     : &#123;</span><br><span class="line">          &#x2F;&#x2F;...</span><br><span class="line">      &#125;,</span><br><span class="line">      button: &#123;</span><br><span class="line">          &#x2F;&#x2F;...</span><br><span class="line">      &#125;,</span><br><span class="line">      dialog : &#123;</span><br><span class="line">          &#x2F;&#x2F;...</span><br><span class="line">      &#125;</span><br><span class="line">      &#x2F;&#x2F;...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四.md-文本转-html"><a href="http://xn--wbs.md" target="_blank" rel="noopener">四.md</a> 文本转 html<a title="#四.md-文本转-html" href="#四.md-文本转-html"></a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;editormd&#x2F;css&#x2F;editormd.preview.css&quot; &#x2F;&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;test-markdown-view&quot;&gt;</span><br><span class="line">    &lt;!-- Server-side output Markdown text --&gt;</span><br><span class="line">    &lt;textarea style&#x3D;&quot;display:none;&quot;&gt;### Hello world!&lt;&#x2F;textarea&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;editormd&#x2F;editormd.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;editormd&#x2F;lib&#x2F;marked.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;editormd&#x2F;lib&#x2F;prettify.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    $(function() &#123;</span><br><span class="line">    var testView &#x3D; editormd.markdownToHTML(&quot;test-markdown-view&quot;, &#123;</span><br><span class="line">            &#x2F;&#x2F; markdown : &quot;[TOC]\n### Hello world!\n## Heading 2&quot;, &#x2F;&#x2F; Also, you can dynamic set Markdown text</span><br><span class="line">            &#x2F;&#x2F; htmlDecode : true,  &#x2F;&#x2F; Enable &#x2F; disable HTML tag encode.</span><br><span class="line">            &#x2F;&#x2F; htmlDecode : &quot;style,script,iframe&quot;,  &#x2F;&#x2F; Note: If enabled, you should filter some dangerous HTML tags for website security.</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;富文本编辑器，Rich Text Editor, 简称 RTE, 是一种可内嵌于浏览器，所见即所得的文本编辑器。富文本编辑器不同于文本编辑器，程序员可到网上下载免费的富文本编辑器内嵌于自己的网站或程序里，方便用户编辑文章或信息。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="编程技术" scheme="http://qiuxiaori.github.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="前端" scheme="http://qiuxiaori.github.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>上传文件到金山云</title>
    <link href="http://qiuxiaori.github.com/2020/07/20/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0%E9%87%91%E5%B1%B1%E4%BA%91/"/>
    <id>http://qiuxiaori.github.com/2020/07/20/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%88%B0%E9%87%91%E5%B1%B1%E4%BA%91/</id>
    <published>2020-07-20T07:05:18.552Z</published>
    <updated>2020-07-20T07:05:18.552Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.ksyun.com/proservice/storage_service" target="_blank">金山对象存储</a>（Kingsoft Standard Storage Service，简称KS3是金山云为企业用户提供的无限制、多备份、分布式的低成本存储空间服务，解决存储扩容、数据可靠安全以及分布式访问等相关复杂问题。入门文档见<a href="https://docs.ksyun.com/documents/858" target="_blank">这里</a>。</p><a id="more"></a><h3 id="一.使用入门">一.使用入门<a title="#一.使用入门" href="#一.使用入门"></a></h3><h4 id="1.开通ks3服务">1.开通KS3服务<a title="#1.开通ks3服务" href="#1.开通ks3服务"></a></h4><ol><li>注册金山云账户<br>使用KS3对象存储，需要注册金山云账户并开通KS3服务。</li></ol><ul><li>转到 <a href="https://passport.ksyun.com/register.html" target="_blank">https://passport.ksyun.com/register.html</a> 注册页面。</li><li>按照注册认证帮助文档的说明进行操作。</li></ul><ol start="2"><li>开通KS3服务</li></ol><ul><li>登录控制台后，点击右上角账号下拉菜单，选择【accesskeys】,进入【AK密钥管理】页面。<br><img src="https://resource.ksyun.com/project/cms/fdb82ab59adba76ad27bb785b7cb1fda" alt="1"></li><li>点击【AK密钥】标签页，检查访问密钥是否正常，如果您还没有创建访问密钥，请立即创建。密钥创建后30分钟即可生效。有关访问密钥的内容请参考<a href="https://docs.ksyun.com/documents/1376" target="_blank">身份与访问控制（IAM）文档</a>。<br><img src="https://resource.ksyun.com/project/cms/02e14263e6fd907fde29858760955588" alt="2"></li></ul><ol start="3"><li>联系金山云商务或售前人员为您开通KS3上传、下载权限。<br>ks3存储功能需要购买，价格清单看👀<a href="https://price.ksyun.com/#!/ks3/price" target="_blank">这里</a>。</li></ol><h4 id="2.创建存储空间">2.创建存储空间<a title="#2.创建存储空间" href="#2.创建存储空间"></a></h4><ol><li>Bucket<br>注册开通金山云KS3后，您就可以开始使用KS3管理控制台创建存储空间（Bucket）。KS3中的每个文件（Object）都存储在存储空间(Bucket)中。必须先创建一个存储空间，然后才能在KS3中存储数据。</li><li>存储空间限制<br>同一用户创建的存储空间总数不能超过30个。<br>存储空间的名称在KS3服务内全局唯一。<br>存储空间一旦创建成功，名称和所处地域不能修改。<br>单个存储空间的容量无限制。</li><li>操作步骤<br>进入 KS3 管理控制台界面 <a href="https://ks3.console.ksyun.com/console.html" target="_blank" rel="noopener">https://ks3.console.ksyun.com/console.html</a> 。<br>单击新建空间。<br>注意：存储空间的命名必须符合命名规范。所选定的存储空间名称在KS3的所有现有存储空间名称中必须具有唯一性。创建后不支持更改存储空间名称。具体过程见<a href="https://docs.ksyun.com/documents/859" target="_blank">官方文档</a>。</li></ol><h4 id="3.文件上传">3.文件上传<a title="#3.文件上传" href="#3.文件上传"></a></h4><ol><li><p>上传工具上传<br>上传工具<a href="https://docs.ksyun.com/documents/894" target="_blank">下载地址</a>及使用方法。</p></li><li><p>api上传<br>控制台不能上传超过500M的文件，最多只能255个文件，大文件请通过API进行分块上传:<a href="http://ks3.ksyun.com/doc/api/multipart_upload.html" target="_blank" rel="noopener">http://ks3.ksyun.com/doc/api/multipart_upload.html</a></p></li></ol><h4 id="4.文件分享&amp;&amp;删除&amp;&amp;空间删除">4.文件分享&amp;&amp;删除&amp;&amp;空间删除<a title="#4.文件分享&amp;&amp;删除&amp;&amp;空间删除" href="#4.文件分享&amp;&amp;删除&amp;&amp;空间删除"></a></h4><ol><li>文件分享 <a href="https://docs.ksyun.com/documents/861" target="_blank" rel="noopener">https://docs.ksyun.com/documents/861</a></li><li>文件删除 <a href="https://docs.ksyun.com/documents/862" target="_blank" rel="noopener">https://docs.ksyun.com/documents/862</a></li><li>空间删除 <a href="https://docs.ksyun.com/documents/863" target="_blank" rel="noopener">https://docs.ksyun.com/documents/863</a></li></ol><h3 id="二.概念和术语">二.概念和术语<a title="#二.概念和术语" href="#二.概念和术语"></a></h3><ol><li><p>AccessKey（访问秘钥）、SecretKey<br>使用KS3，您需要KS3颁发给您的AccessKey（长度为20个字符的ASCII字符串）和SecretKey（长度为40个字符的ASCII字符串）。AccessKey用于标识客户的身份，SecretKey作为私钥形式存放于客户服务器不在网络中传递。SecretKey通常用作计算请求签名的密钥，用以保证该请求是来自指定的客户。使用AccessKey进行身份识别，加上SecretKey进行数字签名，即可完成应用接入与认证授权。</p></li><li><p>Region（区域）<br>地区包含：中国(北京）、中国（上海）、中国（香港）,创建bucket时需要选择Region,如果不配置成对应的域名将返回307，会跳转到Bucket所在的Region。</p></li></ol><div class="φcy"><div class="φda"><table><thead><tr><th>Region中文名称</th><th>外网域名</th><th>内网域名</th></tr></thead><tbody><tr><td>中国（北京）</td><td><a href="http://ks3-cn-beijing.ksyun.com" target="_blank" rel="noopener">ks3-cn-beijing.ksyun.com</a></td><td><a href="http://ks3-cn-beijing-internal.ksyun.com" target="_blank" rel="noopener">ks3-cn-beijing-internal.ksyun.com</a></td></tr><tr><td>中国（上海）</td><td><a href="http://ks3-cn-shanghai.ksyun.com" target="_blank" rel="noopener">ks3-cn-shanghai.ksyun.com</a></td><td><a href="http://ks3-cn-shanghai-internal.ksyun.com" target="_blank" rel="noopener">ks3-cn-shanghai-internal.ksyun.com</a></td></tr><tr><td>中国（香港）</td><td><a href="http://ks3-cn-hk-1.ksyun.com" target="_blank" rel="noopener">ks3-cn-hk-1.ksyun.com</a></td><td><a href="http://ks3-cn-hk-1-internal.ksyun.com" target="_blank" rel="noopener">ks3-cn-hk-1-internal.ksyun.com</a></td></tr></tbody></table></div></div><ol start="3"><li><p>Service（服务）<br>KS3提供给用户的虚拟存储空间，在这个虚拟空间中，每个用户可拥有一个到多个Bucket。</p></li><li><p>Bucket（存储空间）<br>Bucket是存放Object的容器，所有的Object都必须存放在特定的Bucket中。每个用户最多可以创建20个Bucket，每个Bucket中可以存放无限多个Object。Bucket不能嵌套，每个Bucket中只能存放Object，不能再存放Bucket，Bucket下的Object是一个平级的结构。Bucket的名称全局唯一且命名规则与DNS命名规则相同：</p></li></ol><ul><li>仅包含小写英文字母（a-z），数字，点（.），中线，即： abcdefghijklmnopqrstuvwxyz0123456789.-</li><li>必须由字母或数字开头</li><li>长度在3和63个字符之间</li><li>不能是IP的形式，类似192.168.0.1</li><li>不能以kss开头</li></ul><ol start="5"><li><p>Object（对象，文件）<br>在KS3中，用户操作的基本数据单元是Object。单个Object允许存储0~5TB的数据。 Object 包含key和data。其中，key是Object的名字；data是Object 的数据。key为UTF-8编码，且编码后的长度不得超过1024个字节。</p></li><li><p>Key（文件名）<br>即Object的名字，key为UTF-8编码，且编码后的长度不得超过1024个字节。Key中可以带有斜杠，当Key中带有斜杠的时候，将会自动在控制台里组织成目录结构。</p></li><li><p>ACL（访问控制权限）<br>对Bucket和Object相关访问的控制策略，例如允许匿名用户公开访问等。<br>目前ACL支持READ, WRITE, FULL_CONTROL三种权限。对于bucket的拥有者,总是FULL_CONTROL。可以授予所有用户(包括匿名用户)或指定用户READ， WRITE, 或者FULL_CONTROL权限。<br>目前提供了三种预设的ACL.分别是private、public-read和public-read-write。public-read表示为所有用户授予READ权限，public-read-write表示为所有用户授予WRITE权限.使用的时候通过在header中添加x-kss-acl实现。<br>对于BUCKET来说，READ是指罗列Bucket中的文件、罗列Bucket中正在进行的分块上传、罗列某个分块上传已经上传的块。WRITE是指可以上传，删除BUCKET中文件的功能。FULL_CONTROL则包含所有操作。可以通过PUT Bucket acl接口设置。<br>对于Object来说，READ是指查看或者下载文件的功能。WRITE无意义。FULL_CONTROL则包含所有操作。可以通过PUT Object acl设置。</p></li><li><p>Logging（日志）<br>对Bucket和Object的日志配置。<br>当给Bucket配置Logging之后，每天将会自动把该Bucket的操作日志上传到指定的Bucket。</p></li></ol><h3 id="三.ks3-sdk-for-node.js">三.KS3 SDK For Node.js<a title="#三.ks3-sdk-for-node.js" href="#三.ks3-sdk-for-node.js"></a></h3><p><a href="https://ks3.ksyun.com/doc/sdk/nodejs.html#sdk%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener">https://ks3.ksyun.com/doc/sdk/nodejs.html#sdk详细介绍</a></p><h3 id="四.一个小实例">四.一个小实例<a title="#四.一个小实例" href="#四.一个小实例"></a></h3><ol><li>安装ks3插件<br><code>npm i ks3 --save</code></li><li>引入模块```js<br>const fs = require(‘fs’);<br>const KS3 = require(‘ks3’);</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. 具体实现&#96;&#96;&#96;js</span><br><span class="line"></span><br><span class="line">let ks3 &#x3D; new KS3(KS3Config.AK, KS3Config.SK, KS3Config.server, KS3Config.region);</span><br><span class="line"> _ks3upload(file, type) &#123;</span><br><span class="line">    return new Promise(function (resolve, reject) &#123;</span><br><span class="line">        let bucket &#x3D; type;</span><br><span class="line">        let filePath &#x3D; file.path;</span><br><span class="line">        let fileName &#x3D; file.name;</span><br><span class="line">        let suffix &#x3D; (fileName.match(&#x2F;\.[^.]*$&#x2F;) || [&#39;&#39;])[0];</span><br><span class="line">        let pathname &#x3D; [bucket, uuidV1().replace(&#x2F;-&#x2F;g, &#39;&#39;) + suffix].join(&#39;&#x2F;&#39;);</span><br><span class="line"></span><br><span class="line">        let ksUrl &#x3D; url.format(&#123;</span><br><span class="line">            protocol: KS3Config.protocol,</span><br><span class="line">            hostname: KS3Config.hostname,</span><br><span class="line">            pathname: pathname</span><br><span class="line">        &#125;);</span><br><span class="line">        ks3.object.put(&#123;</span><br><span class="line">            Key: pathname,</span><br><span class="line">            ACL: &#39;public-read&#39;,</span><br><span class="line">            filePath: filePath</span><br><span class="line">        &#125;, function (error, data, res) &#123;</span><br><span class="line">            &#x2F;&#x2F; 请求错误</span><br><span class="line">            if (error || res.statusCode !&#x3D;&#x3D; 200) &#123;</span><br><span class="line">                reject(error || res.statusCode);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F; 上传成功后删除临时文件</span><br><span class="line">            fs.unlink(filePath, function (err) &#123;</span><br><span class="line">                if (err) Logger.error(err);</span><br><span class="line">            &#125;);</span><br><span class="line">            &#x2F;&#x2F; 检验上传是否成功</span><br><span class="line">            ks3.object.getAcl(&#123;</span><br><span class="line">                Key: pathname</span><br><span class="line">            &#125;, function (error, data, res) &#123;</span><br><span class="line">                &#x2F;&#x2F; 请求错误</span><br><span class="line">                if (error || res.status !&#x3D;&#x3D; 200) &#123;</span><br><span class="line">                    reject(&#39;上传失败请重新上传&#39;);</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                resolve(ksUrl);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.ksyun.com/proservice/storage_service&quot; target=&quot;_blank&quot;&gt;金山对象存储&lt;/a&gt;（Kingsoft Standard Storage Service，简称KS3是金山云为企业用户提供的无限制、多备份、分布式的低成本存储空间服务，解决存储扩容、数据可靠安全以及分布式访问等相关复杂问题。入门文档见&lt;a href=&quot;https://docs.ksyun.com/documents/858&quot; target=&quot;_blank&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="编程技术" scheme="http://qiuxiaori.github.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Node" scheme="http://qiuxiaori.github.com/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>代码备份</title>
    <link href="http://qiuxiaori.github.com/2020/07/20/%E4%BB%A3%E7%A0%81%E5%A4%87%E4%BB%BD/"/>
    <id>http://qiuxiaori.github.com/2020/07/20/%E4%BB%A3%E7%A0%81%E5%A4%87%E4%BB%BD/</id>
    <published>2020-07-20T07:05:18.552Z</published>
    <updated>2020-07-26T15:06:37.613Z</updated>
    
    <content type="html"><![CDATA[<p>实现的需求整理备份</p><a id="more"></a><h3 id="一.上传文件创建需求">一.上传文件创建需求<a title="#一.上传文件创建需求" href="#一.上传文件创建需求"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">const</span> Service = <span class="built_in">require</span>(<span class="string">'egg'</span>).Service;</span><br><span class="line"><span class="comment">// 文件模块</span></span><br><span class="line"><span class="keyword">const</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>);</span><br><span class="line"><span class="keyword">let</span> stories = [];</span><br><span class="line"><span class="keyword">const</span> _recursionHtml = <span class="function">(<span class="params">notes, parentName</span>) =&gt;</span> &#123;</span><br><span class="line">  notes.map(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.pageName) &#123;</span><br><span class="line">      <span class="keyword">const</span> name = parentName + e.pageName;</span><br><span class="line">      stories.push(name);</span><br><span class="line">      <span class="comment">// 递归子节点</span></span><br><span class="line">      <span class="keyword">if</span> (e.children) &#123;</span><br><span class="line">        _recursionHtml(e.children, name + <span class="string">'/'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StoryService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> addStoryByFile() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx, app &#125; = <span class="keyword">this</span>;</span><br><span class="line">    <span class="comment">// 参数接收,校验</span></span><br><span class="line">    <span class="keyword">let</span> stream = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      stream = <span class="keyword">await</span> ctx.getFileStream();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> session = ctx.session;</span><br><span class="line">    <span class="keyword">const</span> workspace_id = stream.fields.workspace_id;</span><br><span class="line">    <span class="keyword">const</span> iteration_id = stream.fields.iteration_id;</span><br><span class="line">    <span class="keyword">if</span> (!stream || !workspace_id || !iteration_id) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'params error'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 时间锁</span></span><br><span class="line">    <span class="keyword">if</span> (session.cTime) &#123;</span><br><span class="line">      <span class="keyword">const</span> sIteration_id = session.sIteration_id || <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">const</span> isBlocker = (<span class="built_in">Date</span>.now() - session.cTime) &lt; <span class="number">7000</span>;</span><br><span class="line">      <span class="keyword">if</span> (isBlocker &amp;&amp; sIteration_id === iteration_id) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.session.cTime = <span class="built_in">Date</span>.now();</span><br><span class="line">    ctx.session.sIteration_id = iteration_id;</span><br><span class="line">    <span class="comment">// 读取文件代码</span></span><br><span class="line">    stream.setEncoding(<span class="string">'utf-8'</span>);</span><br><span class="line">    <span class="keyword">let</span> data = <span class="string">''</span>;</span><br><span class="line">    stream.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">      data += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      stream.on(<span class="string">'end'</span>, () =&gt; &#123; <span class="comment">// 监听状态</span></span><br><span class="line">        resolve();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 执行代码方法</span></span><br><span class="line">    <span class="keyword">const</span> $axure = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> rootNodes = &#123;&#125;;</span><br><span class="line">    $axure.loadDocument = <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">      rootNodes = d.sitemap.rootNodes || <span class="string">''</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (!data.match(<span class="regexp">/axure.loadDocument/</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'con\'t analysis file'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="built_in">eval</span>(data);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rootNodes.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'analysis file error'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rootNodes.length === <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (rootNodes[<span class="number">0</span>].children) &#123;</span><br><span class="line">        _recursionHtml(rootNodes[<span class="number">0</span>].children, <span class="string">''</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _recursionHtml(rootNodes, <span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取当前要创建的迭代的需求</span></span><br><span class="line">    <span class="keyword">const</span> curStories = <span class="keyword">await</span> app.tapd(<span class="string">'stories'</span>, &#123;</span><br><span class="line">      data: &#123; workspace_id, iteration_id, <span class="attr">limit</span>: <span class="number">200</span> &#125;,</span><br><span class="line">      method: <span class="string">'GET'</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 如果当前迭代已有需求，去重</span></span><br><span class="line">    <span class="keyword">if</span> (curStories.status === <span class="number">1</span> &amp;&amp; curStories.data.lenght !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> curNames = [];</span><br><span class="line">      curStories.data.map(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> name = e.Story.name || <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">if</span> (curNames.indexOf(name) === <span class="number">-1</span>) &#123;</span><br><span class="line">          curNames.push(name);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      stories = _.difference(stories, curNames);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建需求和任务</span></span><br><span class="line">    <span class="keyword">const</span> creator = ctx.session.user.real_name || <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> name <span class="keyword">of</span> stories) &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> app.tapd(<span class="string">'stories'</span>, &#123;</span><br><span class="line">        data: &#123; name, workspace_id, iteration_id, <span class="attr">priority</span>: <span class="number">3</span>, creator &#125;,</span><br><span class="line">        method: <span class="string">'POST'</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (result.status === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> story_id = result.data.Story.id;</span><br><span class="line">        <span class="keyword">const</span> qName = name + <span class="string">'_前端'</span>;</span><br><span class="line">        <span class="keyword">const</span> taskRes = <span class="keyword">await</span> app.tapd(<span class="string">'tasks'</span>, &#123;</span><br><span class="line">          data: &#123; <span class="attr">name</span>: qName, workspace_id, iteration_id, <span class="attr">priority</span>: <span class="number">3</span>, creator, story_id &#125;,</span><br><span class="line">          method: <span class="string">'POST'</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = StoryService;</span><br></pre></td></tr></table></figure><h3 id="二.导出excel浏览器下载">二.导出excel浏览器下载<a title="#二.导出excel浏览器下载" href="#二.导出excel浏览器下载"></a></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xlsx = <span class="built_in">require</span>(<span class="string">'node-xlsx'</span>);</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导出文章统计数据为xlsx文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>ctx </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">exportResource</span>(<span class="params">ctx</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> req = ctx.request;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> _getEliteResources(req);<span class="comment">// 获取数据,无关方法略</span></span><br><span class="line">  <span class="keyword">let</span> rows = result.rows || [];                <span class="comment">// 获取数据数组</span></span><br><span class="line">  <span class="comment">// 创建excel二维数组，定义表头</span></span><br><span class="line">  <span class="keyword">let</span> retval = [</span><br><span class="line">    [<span class="string">'文章名称'</span>, <span class="string">'创建者'</span>, <span class="string">'审核者'</span>, <span class="string">'创建时间'</span>,<span class="string">'浏览'</span>,<span class="string">'收藏'</span>,<span class="string">'点赞'</span>,<span class="string">'点击量'</span>,<span class="string">'点击率'</span>,<span class="string">'转发次数'</span>]</span><br><span class="line">  ]; </span><br><span class="line">  <span class="comment">// 添加订单数据</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> row <span class="keyword">of</span> rows || []) &#123;</span><br><span class="line">      <span class="keyword">const</span> statistics = row.statistics;</span><br><span class="line">      retval.push([</span><br><span class="line">          row.body.title || <span class="string">''</span>,</span><br><span class="line">          row.creator || <span class="string">''</span>,</span><br><span class="line">          row.last_editor,</span><br><span class="line">          row.ctime,</span><br><span class="line">          statistics.show_count,</span><br><span class="line">          statistics.collection_count,</span><br><span class="line">          statistics.like_count,</span><br><span class="line">          statistics.click_count,</span><br><span class="line">          statistics.view_rate,</span><br><span class="line">          statistics.forward_count,</span><br><span class="line">      ]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 空数据时填充</span></span><br><span class="line">  retval.push([ <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>]);</span><br><span class="line">  <span class="comment">// 创建数据流</span></span><br><span class="line">  <span class="keyword">let</span> buffer = xlsx.build([&#123;</span><br><span class="line">      data: retval</span><br><span class="line">  &#125;]);</span><br><span class="line">  <span class="comment">// 设置生成的文件名</span></span><br><span class="line">  <span class="keyword">let</span> filename = moment(<span class="keyword">new</span> <span class="built_in">Date</span>()).format(<span class="string">'YYYY-MM-DD'</span>) + <span class="string">'文件名'</span>;</span><br><span class="line">  filename = <span class="built_in">encodeURIComponent</span>(filename);</span><br><span class="line">  <span class="keyword">let</span> disposition = <span class="string">`attachment;filename=<span class="subst">$&#123;filename&#125;</span>.xlsx`</span>;</span><br><span class="line">  <span class="comment">// 设置响应头</span></span><br><span class="line">  ctx.response.set(&#123;</span><br><span class="line">      <span class="string">'content-type'</span>: <span class="string">'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'</span>,</span><br><span class="line">      <span class="string">'content-disposition'</span>: disposition,</span><br><span class="line">      <span class="string">'filename'</span>: filename + <span class="string">'.xlsx'</span></span><br><span class="line">  &#125;);</span><br><span class="line">  ctx.body = buffer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三.使用axios下载网络资源">三.使用axios下载网络资源<a title="#三.使用axios下载网络资源" href="#三.使用axios下载网络资源"></a></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">const axios &#x3D; require(&#39;axios&#39;);</span><br><span class="line">const GET_RESOURCES_URL &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:8160&#x2F;fdp_api&#x2F;resources&#39;;</span><br><span class="line">const PUT_RESOURCE_URL &#x3D; &#39;http:&#x2F;&#x2F;127.0.0.1:8160&#x2F;fdp_api&#x2F;resources&#x2F;cover&#39;;</span><br><span class="line">const Cookie &#x3D; &#39;kbplat-test-session-id&#x3D;6719da848e0ec864081ea55f28ff77ab197f90829085338f8d5b7871aeae4f974a7b7406c388bc58b9973528d17ea0c1259af9cb32b925a944774bd4d2235fa069af99c24f35ee09e2267f21387028df580b434864df19f10d333afac3dec2bb060fa0666ed539ca2203fac9adcee9bef20dccfb6fb16e0d104fd1a5fa828702cc9d0d1f98f16b0c249bc72bc8c4933e81064a6b57de0fe9fd1075fa7d239e8d140fa093f11ecdd0775e6e07a212a5811bca6a3fee90070bd9d56b38c4aa747d733c80571999188a448e0d6a86af8d9db5c9e172e353b43465d47d05dbfc927e32ef46c812b0feb503db58e4dbf5c2feb497f27f6b2cbba755ccb21b25d258bc39089cb7c358df368e8c2db00cff57cdc72b30c94316a4a69ebeb27f9871394835584b168ed55b41bcc7c6a85518cfba0a9a7435979e88dac0ad3d93b32af50412efcd6483adb7ccbfad0c3e4b2cdea809a070d91454aef7e4d2ea295d646ddd475ce1f6580d0ade71271308882ae2daf57a1b9603e4a640131b524f28017e6e5ef38b9c15ea4ef185b91865c645a4333d50090a36c38a6d589bf3ab70779aee6787b1ea97a4ccc537b2bb3f327ceb8d6ad7d35fc435fe680c3c8aba087b90e0&#39;;</span><br><span class="line"></span><br><span class="line">(async function updateCovers()&#123;</span><br><span class="line">  let resources &#x3D; [];</span><br><span class="line">  await new Promise((resolve, reject) &#x3D;&gt; &#123;</span><br><span class="line">    axios(&#123; </span><br><span class="line">      headers: &#123; &#39;Cookie&#39;: Cookie &#125;,</span><br><span class="line">      method: &#39;get&#39;, </span><br><span class="line">      url: GET_RESOURCES_URL, </span><br><span class="line">      params: &#123; elite: 1, type: &#39;视频&#39;, limit: 760&#125;</span><br><span class="line">    &#125;).then(response &#x3D;&gt; &#123;</span><br><span class="line">      resources &#x3D; response.data.data.rows;</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;).catch(err &#x3D;&gt; &#123;</span><br><span class="line">      throw err;</span><br><span class="line">      reject();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line">  for(let i &#x3D; 7; i &lt; 8; i++)&#123;</span><br><span class="line">    const response &#x3D; await axios(&#123; </span><br><span class="line">      method: &#39;put&#39;, </span><br><span class="line">      headers: &#123; &#39;Cookie&#39;: Cookie &#125;,</span><br><span class="line">      url: PUT_RESOURCE_URL, </span><br><span class="line">      data: resources[i]</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;实现的需求整理备份&lt;/p&gt;</summary>
    
    
    
    <category term="编程技术" scheme="http://qiuxiaori.github.com/categories/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="源码" scheme="http://qiuxiaori.github.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
</feed>
